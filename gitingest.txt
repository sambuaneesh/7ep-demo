Directory structure:
└── 7ep-demo/
    ├── README.md
    ├── DIRECTORY_README.txt
    ├── gradle.properties
    ├── gradlew
    ├── gradlew.bat
    ├── LICENSE
    ├── Pipfile
    ├── desktop_app/
    │   ├── README.txt
    │   ├── gradlew
    │   ├── gradlew.bat
    │   ├── gradle/
    │   │   └── wrapper/
    │   │       └── gradle-wrapper.properties
    │   └── src/
    │       ├── main/
    │       │   ├── java/
    │       │   │   └── com/
    │       │   │       └── coveros/
    │       │   │           └── training/
    │       │   │               └── autoinsurance/
    │       │   │                   ├── AutoInsuranceAction.java
    │       │   │                   ├── AutoInsuranceProcessor.java
    │       │   │                   ├── AutoInsuranceScriptServer.java
    │       │   │                   ├── AutoInsuranceUI.java
    │       │   │                   ├── InvalidClaimsException.java
    │       │   │                   └── WarningLetterEnum.java
    │       │   └── resources/
    │       │       └── log4j2.xml
    │       └── test/
    │           └── java/
    │               └── com/
    │                   └── coveros/
    │                       └── training/
    │                           └── autoinsurance/
    │                               ├── AutoInsuranceActionTests.java
    │                               ├── AutoInsuranceProcessorTests.java
    │                               ├── AutoInsuranceScriptClient.java
    │                               ├── DesktopTester.java
    │                               ├── DesktopUiTests.java
    │                               └── ExecutionDataClient.java
    ├── docs/
    │   ├── README.txt
    │   ├── coveros_text.txt
    │   ├── api_testing/
    │   │   ├── README.txt
    │   │   ├── api_testing_with_curl.txt
    │   │   ├── api_testing_with_soapui.txt
    │   │   ├── soapui_demo_tests.xml
    │   │   └── tester.postman_collection.json
    │   ├── ci_and_cd/
    │   │   ├── README.txt
    │   │   ├── ci_and_cd_for_localhost.txt
    │   │   ├── install_docker_centos.txt
    │   │   ├── jenkins_box_guide.txt
    │   │   ├── ssl.txt
    │   │   ├── ui_test_box.txt
    │   │   └── virtualbox_networking.txt
    │   ├── dev_notes/
    │   │   ├── README.txt
    │   │   ├── architecture.txt
    │   │   ├── monitoring_tomcat.txt
    │   │   ├── pre-push
    │   │   └── README_db.txt
    │   ├── performance_testing/
    │   │   ├── README.txt
    │   │   └── perf_testing_with_jmeter.txt
    │   ├── security_testing/
    │   │   ├── README.txt
    │   │   └── zap_proxy_security_scanning.txt
    │   └── ui_testing/
    │       ├── README.txt
    │       ├── desktop_automation.txt
    │       ├── python_selenium_cheat_sheet.txt
    │       ├── python_selenium_walkthrough.txt
    │       ├── README_python.txt
    │       └── running selenium_grid.txt
    ├── gradle/
    │   └── wrapper/
    │       └── gradle-wrapper.properties
    ├── jenkins/
    │   └── Jenkinsfile
    └── src/
        ├── README.txt
        ├── api_tests/
        │   ├── README.txt
        │   ├── pytest.ini
        │   └── test_api.py
        ├── bdd_test/
        │   ├── README.txt
        │   ├── java/
        │   │   └── com/
        │   │       └── coveros/
        │   │           └── training/
        │   │               ├── authentication/
        │   │               │   ├── LoginStepDefs.java
        │   │               │   └── RegistrationStepDefs.java
        │   │               ├── cartesianproduct/
        │   │               │   └── CartesianProductStepDefs.java
        │   │               ├── expenses/
        │   │               │   └── AlcoholStepDefs.java
        │   │               ├── library/
        │   │               │   ├── AddDeleteListSearchBooksAndBorrowersStepDefs.java
        │   │               │   └── BookCheckOutStepDefs.java
        │   │               └── math/
        │   │                   ├── AckermannStepDefs.java
        │   │                   ├── FibonacciStepDefs.java
        │   │                   └── MathStepDefs.java
        │   └── resources/
        │       ├── authentication/
        │       │   ├── login_user.feature
        │       │   └── register_user.feature
        │       ├── cartesianproduct/
        │       │   └── cartesianproduct.feature
        │       ├── expenses/
        │       │   └── alcohol.feature
        │       ├── library/
        │       │   ├── add_and_delete_books.feature
        │       │   ├── add_and_delete_borrowers.feature
        │       │   ├── check_out_a_book.feature
        │       │   ├── list_and_search_books.feature
        │       │   └── list_and_search_borrowers.feature
        │       └── math/
        │           ├── ackerman.feature
        │           ├── Fibonacci.feature
        │           └── math.feature
        ├── integration_test/
        │   ├── java/
        │   │   └── com/
        │   │       └── coveros/
        │   │           └── training/
        │   │               └── persistence/
        │   │                   └── PersistenceLayerTests.java
        │   └── resources/
        │       └── db_sample_files/
        │           ├── README.txt
        │           ├── v2_empty_schema.sql
        │           ├── v2_one_book_one_borrower.sql
        │           ├── v2_one_loan.sql
        │           ├── v2_one_user.sql
        │           └── v2_three_books_three_borrowers.sql
        ├── main/
        │   ├── java/
        │   │   └── com/
        │   │       └── coveros/
        │   │           └── training/
        │   │               ├── README.txt
        │   │               ├── authentication/
        │   │               │   ├── LoginServlet.java
        │   │               │   ├── LoginUtils.java
        │   │               │   ├── package-info.java
        │   │               │   ├── RegisterServlet.java
        │   │               │   ├── RegistrationUtils.java
        │   │               │   └── domainobjects/
        │   │               │       ├── package-info.java
        │   │               │       ├── PasswordResult.java
        │   │               │       ├── PasswordResultEnums.java
        │   │               │       ├── RegistrationResult.java
        │   │               │       ├── RegistrationStatusEnums.java
        │   │               │       └── User.java
        │   │               ├── cartesianproduct/
        │   │               │   ├── CartesianProduct.java
        │   │               │   └── package-info.java
        │   │               ├── expenses/
        │   │               │   ├── AlcoholCalculator.java
        │   │               │   ├── AlcoholResult.java
        │   │               │   ├── DinnerPrices.java
        │   │               │   └── package-info.java
        │   │               ├── helpers/
        │   │               │   ├── AssertionException.java
        │   │               │   ├── CheckUtils.java
        │   │               │   ├── package-info.java
        │   │               │   ├── ServletUtils.java
        │   │               │   └── StringUtils.java
        │   │               ├── library/
        │   │               │   ├── LibraryBookListAvailableServlet.java
        │   │               │   ├── LibraryBookListSearchServlet.java
        │   │               │   ├── LibraryBorrowerListSearchServlet.java
        │   │               │   ├── LibraryLendServlet.java
        │   │               │   ├── LibraryRegisterBookServlet.java
        │   │               │   ├── LibraryRegisterBorrowerServlet.java
        │   │               │   ├── LibraryUtils.java
        │   │               │   ├── package-info.java
        │   │               │   └── domainobjects/
        │   │               │       ├── Book.java
        │   │               │       ├── Borrower.java
        │   │               │       ├── LibraryActionResults.java
        │   │               │       ├── Loan.java
        │   │               │       └── package-info.java
        │   │               ├── mathematics/
        │   │               │   ├── Ackermann.java
        │   │               │   ├── AckermannIterative.java
        │   │               │   ├── AckServlet.java
        │   │               │   ├── Calculator.java
        │   │               │   ├── Fibonacci.java
        │   │               │   ├── FibonacciIterative.java
        │   │               │   ├── FibServlet.java
        │   │               │   ├── FunctionalField.java
        │   │               │   ├── MathServlet.java
        │   │               │   ├── package-info.java
        │   │               │   └── TailRecursive.java
        │   │               ├── persistence/
        │   │               │   ├── DbServlet.java
        │   │               │   ├── EmptyDataSource.java
        │   │               │   ├── IPersistenceLayer.java
        │   │               │   ├── NotImplementedException.java
        │   │               │   ├── package-info.java
        │   │               │   ├── ParameterObject.java
        │   │               │   ├── PersistenceLayer.java
        │   │               │   ├── SqlData.java
        │   │               │   └── SqlRuntimeException.java
        │   │               └── tomcat/
        │   │                   ├── package-info.java
        │   │                   └── WebAppListener.java
        │   ├── javadoc/
        │   │   └── overview.html
        │   ├── resources/
        │   │   ├── README.txt
        │   │   ├── log4j2.xml
        │   │   └── db/
        │   │       ├── README.txt
        │   │       └── migration/
        │   │           ├── V1__Create_person_table.sql
        │   │           └── V2__Rest_of_tables_for_auth_and_library.sql
        │   └── webapp/
        │       ├── catalog.css
        │       ├── catalog.js
        │       ├── dbhelp.html
        │       ├── endpointcatalog.html
        │       ├── index.html
        │       ├── library.html
        │       ├── library.js
        │       ├── main.css
        │       ├── restfulresult.jsp
        │       ├── result.jsp
        │       └── WEB-INF/
        │           └── web.xml
        ├── selenified_tests/
        │   ├── java/
        │   │   └── com/
        │   │       └── coveros/
        │   │           └── training/
        │   │               └── selenified/
        │   │                   └── SelenifiedSample.java
        │   └── resources/
        │       └── selenified.properties
        ├── test/
        │   └── java/
        │       └── com/
        │           └── coveros/
        │               └── training/
        │                   ├── authentication/
        │                   │   ├── LoginServletTests.java
        │                   │   ├── LoginUtilsTests.java
        │                   │   ├── RegisterServletTests.java
        │                   │   ├── RegistrationUtilsTests.java
        │                   │   └── domainobjects/
        │                   │       ├── PasswordResultTests.java
        │                   │       ├── RegistrationResultTests.java
        │                   │       └── UserTests.java
        │                   ├── helpers/
        │                   │   ├── CheckUtilsTests.java
        │                   │   ├── DateUtils.java
        │                   │   ├── DateUtilsTests.java
        │                   │   └── StringUtilsTests.java
        │                   ├── library/
        │                   │   ├── LendingTests.java
        │                   │   ├── LibraryBookListAvailableServletTests.java
        │                   │   ├── LibraryBookListSearchServletTests.java
        │                   │   ├── LibraryBorrowerListSearchServletTests.java
        │                   │   ├── LibraryLendServletTests.java
        │                   │   ├── LibraryRegisterBookServletTests.java
        │                   │   ├── LibraryRegisterBorrowerServletTests.java
        │                   │   ├── LibraryUtilsTests.java
        │                   │   └── domainobjects/
        │                   │       ├── BookTests.java
        │                   │       ├── BorrowerTests.java
        │                   │       └── LoanTests.java
        │                   ├── mathematics/
        │                   │   ├── AckermannIterativeParameterizedTests.java
        │                   │   ├── AckermannParameterizedTests.java
        │                   │   ├── AckServletTests.java
        │                   │   ├── CalculatorTests.java
        │                   │   ├── FibonacciParameterizedTests.java
        │                   │   ├── FibonacciTests.java
        │                   │   ├── FibServletTests.java
        │                   │   └── MathServletTests.java
        │                   ├── persistence/
        │                   │   ├── DbServletTests.java
        │                   │   ├── EmptyDataSourceTests.java
        │                   │   ├── ParameterObjectTests.java
        │                   │   └── SqlDataTests.java
        │                   └── tomcat/
        │                       └── WebAppListenerTests.java
        └── ui_tests/
            ├── README.txt
            ├── behave/
            │   ├── README.txt
            │   ├── setup.cfg
            │   └── features/
            │       ├── authentication_ui.feature
            │       ├── environment.py
            │       ├── librarian_ui.feature
            │       └── steps/
            │           ├── ackermannStepDefs.py
            │           ├── authenticationStepDefs.py
            │           ├── fibonacciStepDefs.py
            │           └── librarianStepDefs.py
            ├── cs/
            │   ├── README.txt
            │   └── testproject/
            │       ├── testproject.csproj
            │       ├── testproject.sln
            │       └── UiTest.cs
            ├── java/
            │   ├── README.txt
            │   ├── gradle.properties
            │   ├── gradlew
            │   ├── gradlew.bat
            │   ├── gradle/
            │   │   └── wrapper/
            │   │       └── gradle-wrapper.properties
            │   └── src/
            │       ├── main/
            │       │   └── resources/
            │       │       └── log4j2.xml
            │       └── test/
            │           └── java/
            │               └── com/
            │                   └── coveros/
            │                       └── training/
            │                           ├── ApiCalls.java
            │                           ├── HtmlUnitTests.java
            │                           └── SeleniumTests.java
            ├── js/
            │   ├── README.txt
            │   ├── package.json
            │   └── test/
            │       └── test.spec.js
            └── python/
                ├── README.txt
                ├── basic_test.py
                └── Pipfile

================================================
FILE: README.md
================================================
## Demo - demonstrates an application and tests

This is an application by [Coveros](https://www.coveros.com/) to demonstrate good
software practices.  As we say in agile... _Working software over comprehensive 
documentation_ ... but that doesn't mean we can't have pretty good documentation too. 

#### Quick Start:

* Install [Java](https://www.java.com/en/download/) if you don't already have it.
* Clone or [download](https://github.com/7ep/demo/archive/master.zip) this repo.  (if you download, unzip the file to a directory.)
* On the command line in the top directory of this repo, run `gradlew apprun`
* Visit the application with your browser at http://localhost:8080/demo

#### Summary:

Demo consists of a simple web application and tests.  Its goal is to provide 
an environment suitable for demonstration and practice in valuable development
techniques.  Some of the techniques exemplified are:
* [Unit](https://github.com/7ep/demo/blob/master/src/test/java/com/coveros/training/authentication/RegistrationUtilsTests.java) [tests](https://github.com/7ep/demo/blob/master/src/test/java/com/coveros/training/library/LibraryUtilsTests.java) developed by [TDD](https://en.wikipedia.org/wiki/Test-driven_development) using [Junit](https://junit.org/junit5/) as a driver and [Mockito](https://site.mockito.org/) for mocks, with coverage reports.
* [UI tests](https://github.com/7ep/demo/blob/master/src/ui_tests/behave/features/librarian_ui.feature) using [multiple frameworks](https://github.com/7ep/demo/tree/master/src/ui_tests)
* [BDD](https://en.wikipedia.org/wiki/Behavior-driven_development) [tests](https://github.com/7ep/demo/blob/master/src/bdd_test/resources/library/check_out_a_book.feature) using gherkin
  * [Cucumber](https://docs.cucumber.io/) tests, with reports
  * [Behave](https://behave.readthedocs.io/en/latest/) UI tests that use [Selenium](https://www.selenium.dev/) web driver.
* [Integration tests](https://github.com/7ep/demo/blob/master/src/integration_test/java/com/coveros/training/persistence/PersistenceLayerTests.java) that test the [H2 database](https://www.h2database.com/html/main.html)
* [Database versioning](https://github.com/7ep/demo/blob/master/src/main/resources/db/migration/V2__Rest_of_tables_for_auth_and_library.sql), with [Flyway](https://flywaydb.org/)
* Security analysis using [DependencyCheck](https://www.owasp.org/index.php/OWASP_Dependency_Check)
* Hot-swap code with [Gretty](https://github.com/gretty-gradle-plugin/gretty)
* Enhanced type system using [Checker Framework](https://checkerframework.org/)
* See its [architecture](https://github.com/7ep/demo/blob/master/docs/dev_notes/architecture.txt)


Its essential goals:
* Just works, any platform.
* As simple as possible
* Minimal system requirements
* Fast and easy to install and to run
* High test coverage
* Multiple business domains
* Easy to maintain and improve
* Well documented
* High performance
* Illustrates maximum number of techniques
* Easy to get up to speed

#### Table of contents:
1. [Optional dependencies](#optional-dependencies)
1. [Chromedriver installation notes](#chromedriver-installation-notes)
1. [Python installation notes](#python-installation-notes)
1. [To build and run tests](#to-build-and-run-tests)
1. [To run the application](#to-run-the-web-application)
1. [To run API and UI tests](#to-run-api-and-ui-tests)
1. [Summary of relevant Gradle commands](#summary-of-relevant-gradle-commands)
1. [The whole shebang - CI/CD pipeline](#the-whole-shebang---a-cicd-pipeline)

###### Optional Dependencies
If you want API testing and Selenium testing, you will need
to visit these links and download / install the applications found there.
* [Python](https://www.python.org/downloads/)
* [Chromedriver](http://chromedriver.chromium.org/downloads)
* [Chrome internet browser](https://www.google.com/chrome/)

---

#### Chromedriver installation notes
make sure that the [Chromedriver](https://chromedriver.chromium.org/) executable is installed in one of the directories that is 
on your path.  To see your path, type the following in a command line: 

on Windows:

    echo %PATH%  
    
On Mac/Linux:

    echo $PATH
    
If you run the command, `chromedriver` on the command  line, you should get a result similar to this:

    Starting ChromeDriver ...
        
#### Python installation notes
Python can be downloaded [here](https://www.python.org/downloads/)

To run API tests and Selenium tests, an easy way to handle its 
dependencies is to use *pipenv*.  To get this installed, first download
[get-pip.py](https://bootstrap.pypa.io/get-pip.py), and run the following on the command line:

    python get-pip.py
    
Then,

    pip install pipenv
   
And in the demo directory,
    
    pipenv install   
   
#### To build and run tests:
On the command line, run the following:

On Mac/Linux

    ./gradlew check

On Windows

    gradlew check

#### To run the web application:
On the command line, run the following:

On Mac/Linux

    ./gradlew apprun

On Windows

    gradlew apprun
    
Then, head to http://localhost:8080/demo    
    

#### To run API and UI tests:
Note: The app has to be [already running](#to-run-the-web-application) for these tests to pass, and you _need_
to have installed [Python] and [Chromedriver].

In a new terminal, separate from the one where the server is running, run the following:

On Mac/Linux

    ./gradlew runAllTests

On Windows

    gradlew runAllTests    
    
#### Summary of relevant Gradle commands
* gradlew coveros - show a cheat sheet of commands for Demo
* gradlew apprun - runs the application
* gradlew check - runs all tests possible with only dependency being Java 8.  No need for app to be running.
* gradlew runAllTests - runs the whole set of tests**  
* gradlew clean - cleans build products and installs pre-push hook. (see the file in this directory, pre-push)
* gradlew runBehaveTests - runs the UI tests**
* gradlew runApiTests - runs the API tests**
* gradlew generateCucumberReport - runs cucumber and creates a nice-looking HTML report
* gradlew pitest - runs mutation testing (see http://pitest.org/)
* gradlew dependencyCheckAnalyze - analyzes security reports for the dependencies of 
  this project.  See https://www.owasp.org/index.php/OWASP_Dependency_Check
* gradlew sonarqube - runs static analysis using SonarQube.  Sonarqube must be running - check http://localhost:9000
* gradlew integrate - runs the database integration tests
* gradlew startH2Console - Starts a console to examine the H2 database file.  (user and
  password are empty, URL to use is jdbc:h2:./build/db/training)
* gradlew <task 1>...<task N> taskTree - a utility that will show the task tree for a particular task


  ** Requires the app to be running 
     (usually in another terminal) and all optional dependencies installed.
    
#### The whole shebang - a CI/CD pipeline

Details on building out a CI/CD pipeline are found in the "docs/ci_and_cd" directory.
For example, to set it all up on a [local Windows box](https://raw.githubusercontent.com/7ep/demo/master/docs/ci_and_cd/ci_and_cd_for_localhost.txt) 

###### Features of the pipeline:
* A fully functioning and documented demonstration CI/CD pipeline using Jenkins.
* BDD tests run with a report generated
* Static analysis quality-gating using SonarQube
* UI tests running on Chrome
* Performance testing with Jmeter
* Security analysis with OWASP's "DependencyCheck"
* Complex commands wrapped simply using Gradle
* Mutation testing with Pitest
* Javadocs built



---

## Screenshots:
![Jenkins pipeline](https://c2.staticflickr.com/8/7889/33202009658_11422b7f20_b.jpg)

![Zap attach proxy](https://c2.staticflickr.com/8/7905/33202009438_8f367e20ec_o.png)

![SonarQube analysis](https://c2.staticflickr.com/8/7823/33202009548_e678128200_b.jpg)

![Running performance tests](https://c2.staticflickr.com/8/7854/47077017751_7e045f68dd_b.jpg)



================================================
FILE: DIRECTORY_README.txt
================================================
Directories and files at the top level:

Directories
-----------
desktop_app  :   a project to demonstrate testing of desktop apps
docs         :   documents related to this application
gradle       :   necessary wrapper files and some capabilities related to certain tests
jenkins      :   holds the Jenkinsfile for CI/CD
src          :   has the application's source code and all test code

Files
-----
.gitattributes          :    certain configuration settings for Git
.gitignore              :    files and directories we don't want stored in Git
build.gradle            :    the primary Gradle configuration file
gradlew / gradlew.bat   :    runs a "wrapper" version of gradle so that
                             it is not necessary to have gradle installed to run it
LICENSE                 :    the license for the application
Pipfile, Pipefile.lock  :    used by Pipenv to list needed dependencies
DIRECTORY_README.txt    :    this file
README.md               :    a description of the project and how to use it


================================================
FILE: gradle.properties
================================================
projectname=Demo
Description=A demonstration of a web application with CI/CD
version=1.0.0
org.gradle.daemon=true
#
#If you want to specify the path to chromedriver.
#chromedriver.path=C:/Users/foo/Downloads/chromedriver_win32/chromedriver.exe
#chromedriver.path=/home/foo/Downloads/chromedriver_linux/chromedriver

# if you want to debug gradle, this will open a port on 5006 when the
# daemon is running.
#org.gradle.jvmargs=-XX:MaxPermSize=4g -XX:+HeapDumpOnOutOfMemoryError -Xmx4g -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5006

#no need for colorful output and progress bars.  plain will do.
org.gradle.console=plain
org.gradle.workers.max=1

# Setting the memory config explicitly
org.gradle.jvmargs=-Xmx1g -XX:MaxMetaspaceSize=1024m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8



================================================
FILE: gradlew
================================================
#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"



================================================
FILE: gradlew.bat
================================================
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega



================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) 2019 Byron Katz, Coveros Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================
FILE: Pipfile
================================================
[[source]]
name = "pypi"
url = "https://pypi.org/simple"
verify_ssl = true

[dev-packages]

[packages]
requests = "*"
behave = "*"
pyhamcrest = "*"
selenium = "*"
pytest = "*"
behave2cucumber = "*"



================================================
FILE: desktop_app/README.txt
================================================
This is a desktop application to demonstrate testing.

To see the application, run: gradlew startui

To run the tests: gradlew test

Review the reports at build/reports/jacoco


================================================
FILE: desktop_app/gradlew
================================================
#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"



================================================
FILE: desktop_app/gradlew.bat
================================================
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega



================================================
FILE: desktop_app/gradle/wrapper/gradle-wrapper.properties
================================================
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-7.0-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists



================================================
FILE: desktop_app/src/main/java/com/coveros/training/autoinsurance/AutoInsuranceAction.java
================================================
package com.coveros.training.autoinsurance;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;


public final class AutoInsuranceAction {

    final int premiumIncreaseDollars;
    final WarningLetterEnum warningLetterEnum;
    final boolean isPolicyCanceled;
    final boolean isError;

    public AutoInsuranceAction(int premiumIncreaseDollars, WarningLetterEnum warningLetterEnum, boolean isPolicyCanceled, boolean isError) {

        this.premiumIncreaseDollars = premiumIncreaseDollars;
        this.warningLetterEnum = warningLetterEnum;
        this.isPolicyCanceled = isPolicyCanceled;
        this.isError = isError;
    }


    public final boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (obj == this) {
            return true;
        }
        if (obj.getClass() != getClass()) {
            return false;
        }
        AutoInsuranceAction rhs = (AutoInsuranceAction) obj;
        return new EqualsBuilder()
                .append(premiumIncreaseDollars, rhs.premiumIncreaseDollars)
                .append(warningLetterEnum, rhs.warningLetterEnum)
                .append(isPolicyCanceled, rhs.isPolicyCanceled)
                .append(isError, rhs.isError)
                .isEquals();
    }

    public final int hashCode() {
        // you pick a hard-coded, randomly chosen, non-zero, odd number
        // ideally different for each class
        return new HashCodeBuilder(99, 5).
                append(premiumIncreaseDollars).
                append(warningLetterEnum).
                append(isPolicyCanceled).
                append(isError).
                toHashCode();
    }

    public static AutoInsuranceAction createEmpty() {
        return new AutoInsuranceAction(-1, WarningLetterEnum.NONE, false, false);
    }

    public static AutoInsuranceAction createErrorResponse() {
        return new AutoInsuranceAction(-1, WarningLetterEnum.NONE, false, true);
    }

    public boolean isEmpty() {
        return this.equals(createEmpty());
    }

    public final String toString() {
        return ToStringBuilder.reflectionToString(this);
    }
}



================================================
FILE: desktop_app/src/main/java/com/coveros/training/autoinsurance/AutoInsuranceProcessor.java
================================================
package com.coveros.training.autoinsurance;

class AutoInsuranceProcessor {

    private AutoInsuranceProcessor() {
        // private constructor to hide the public one.
    }

    static AutoInsuranceAction process(int claims, int age) {

        if (claims == 0 && age >= 16 && age <= 25) {
            return new AutoInsuranceAction(50, WarningLetterEnum.NONE, false, false);
        }

        if (claims == 0 && age >= 26 && age <= 85) {
            return new AutoInsuranceAction(25, WarningLetterEnum.NONE, false, false);
        }

        if (claims == 1 && age >= 16 && age <= 25) {
            return new AutoInsuranceAction(100, WarningLetterEnum.LTR1, false, false);
        }

        if (claims == 1 && age >= 26 && age <= 85) {
            return new AutoInsuranceAction(50, WarningLetterEnum.NONE, false, false);
        }

        if (claims >= 2 && claims <= 4 && age >= 16 && age <= 25) {
            return new AutoInsuranceAction(400, WarningLetterEnum.LTR2, false, false);
        }

        if (claims >= 2 && claims <= 4 && age >= 26 && age <= 85) {
            return new AutoInsuranceAction(200, WarningLetterEnum.LTR3, false, false);
        }

        if (claims >= 5) {
            return new AutoInsuranceAction(0, WarningLetterEnum.NONE, true, false);
        }

        // for any outside condition
        return AutoInsuranceAction.createErrorResponse();

    }


}



================================================
FILE: desktop_app/src/main/java/com/coveros/training/autoinsurance/AutoInsuranceScriptServer.java
================================================
package com.coveros.training.autoinsurance;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.beans.Transient;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Arrays;

public class AutoInsuranceScriptServer implements Runnable, Transient {

    static Logger logger = LoggerFactory.getLogger(AutoInsuranceScriptServer.class);
    private boolean shouldRepeat = true;
    private AutoInsuranceUI autoInsuranceUI;

    /**
     * Construct this with access to the UI we can control
     * @param autoInsuranceUI the UI we are controlling
     */
    public AutoInsuranceScriptServer(AutoInsuranceUI autoInsuranceUI) {
        this.autoInsuranceUI = autoInsuranceUI;
    }

    public void serverStart() {

        int portNumber = 8000;


        while(shouldRepeat) {
            try (
                    ServerSocket serverSocket = new ServerSocket(portNumber);
                    Socket clientSocket = serverSocket.accept();
            ) {
                PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
                BufferedReader in = new BufferedReader(
                        new InputStreamReader(clientSocket.getInputStream()));
                String inputLine;
                while ((inputLine = in.readLine()) != null) {
                    String result = "OK";

                    final String[] inputTokens =
                            Arrays.stream(inputLine.split(" "))
                                    .map(String::toLowerCase).toArray(String[]::new);

                    try {
                        handleQuit(inputTokens);

                        handleSetCases(inputTokens);

                        result = handleGetCases(result, inputTokens);

                        handleClickActions(inputTokens);
                    } catch (Exception ex) {
                        logger.error(ex.getMessage());
                        result = "FAILURE";
                    }
                    out.println(result);

                }
            } catch (IOException e) {
                logger.error("Exception caught when trying to listen on port "
                        + portNumber + " or listening for a connection");
                logger.error(e.getMessage());
            }
        }
    }

    private void handleClickActions(String[] inputTokens) {
        if (inputTokens[0].equals("click") && inputTokens[1].equals("calculate")) {
            autoInsuranceUI.claimsCalcButton.doClick();
        }
    }

    private String handleGetCases(String result, String[] inputTokens) {
        if (inputTokens[0].equals("get")) {
            if (inputTokens[1].equals("label")) {
                result = autoInsuranceUI.label.getText();
            }
            if (inputTokens[1].equals("age")) {
                result = autoInsuranceUI.ageField.getText();
            }
            if (inputTokens[1].equals("claims")) {
                result = autoInsuranceUI.claimsDropDown.getSelectedItem().toString();
            }
        }
        return result;
    }

    private void handleSetCases(String[] inputTokens) {
        if (inputTokens[0].equals("set")) {
            if (inputTokens[1].equals("label")) {
                autoInsuranceUI.setLabel(inputTokens[2]);
            }
            if (inputTokens[1].equals("age")) {
                autoInsuranceUI.setClaimsAge(inputTokens[2]);
            }
            if (inputTokens[1].equals("claims")) {
                final int i = Integer.parseInt(inputTokens[2]);
                autoInsuranceUI.setPreviousClaims(i);
            }
        }
    }

    private void handleQuit(String[] inputTokens) {
        if (inputTokens[0].equals("quit")) {
            shouldRepeat = false;
        }
    }

    @Override
    public void run() {
        serverStart();
    }

    @Override
    public boolean value() {
        return false;
    }

    @Override
    public Class<? extends Annotation> annotationType() {
        return null;
    }
}



================================================
FILE: desktop_app/src/main/java/com/coveros/training/autoinsurance/AutoInsuranceUI.java
================================================
package com.coveros.training.autoinsurance;

import javax.swing.*;
import javax.swing.border.Border;
import java.awt.*;

import static javax.swing.JFrame.EXIT_ON_CLOSE;
import static javax.swing.SwingConstants.CENTER;

public class AutoInsuranceUI extends JPanel {

    // server used for automating the UI
    AutoInsuranceScriptServer autoInsuranceScriptServer;

    JLabel label;
    JComboBox<String> claimsDropDown;
    JTextField ageField;
    JButton claimsCalcButton;
    JFrame frame;

    /** Creates the GUI shown inside the frame's content pane. */
    public AutoInsuranceUI(JFrame frame) {
        super(new BorderLayout());
        this.frame = frame;

        JPanel autoInsurancePanel = createAutoInsurancePanel();

        //Lay them out.
        Border padding = BorderFactory.createEmptyBorder(20,20,5,20);
        autoInsurancePanel.setBorder(padding);

        add(autoInsurancePanel, BorderLayout.CENTER);
        label = new JLabel("Click the \"Crunch\" button"
                + " to calculate your auto insurance results",
                CENTER);
        add(label, BorderLayout.PAGE_END);
        label.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));

        startSocketServer();
    }

    private JPanel createAutoInsurancePanel() {
        JPanel box = new JPanel();

        box.setLayout(new BoxLayout(box, BoxLayout.PAGE_AXIS));

        addLabel(box, "Previous claims:");
        claimsDropDown = addClaimsDropDown(box);

        addLabel(box, "Driver's age:");
        ageField = addClaimsAgeTextField(box);

        claimsCalcButton = addClaimsCalcButton(box);
        claimsCalcButton.addActionListener(e -> {
            final int intPreviousClaims = getIntPreviousClaims();
            final String customerAge = ageField.getText();
            final int intCustomerAge = Integer.parseInt(customerAge);

            final AutoInsuranceAction result = AutoInsuranceProcessor.process(intPreviousClaims, intCustomerAge);

            setLabel(
                    "Premium increase: $" +  result.premiumIncreaseDollars +
                    " Warning Ltr: " + result.warningLetterEnum +
                    " is canceled: " + result.isPolicyCanceled);
        });

        return box;
    }

    /**
     * This method returns an integer representing the number of previous claims for a customer.
     */
    private int getIntPreviousClaims() {
        final String numberPreviousClaims = (String)claimsDropDown.getSelectedItem();

        assert numberPreviousClaims != null;
        switch (numberPreviousClaims) {
            case "0" : return 0;
            case "1" : return 1;
            case "2-4" : return 2;
            case ">=5" : return 5;
            default:
                throw new InvalidClaimsException("invalid value entered");
        }
    }

    private JTextField addClaimsAgeTextField(JPanel box) {
        JTextField textField = new JTextField();
        textField.setVisible(true);
        box.add(textField);
        return textField;
    }

    private JButton addClaimsCalcButton(JPanel box) {
        JButton crunch = new JButton("Crunch");
        crunch.setVisible(true);
        box.add(crunch);
        return crunch;
    }

    private void addLabel(JPanel box, String msg) {
        JLabel lbl = new JLabel(msg);
        lbl.setVisible(true);
        box.add(lbl);
    }

    private JComboBox<String> addClaimsDropDown(JPanel box) {
        String[] previousClaims = {"0", "1", "2-4", ">=5"};
        final JComboBox<String> cb = new JComboBox<>(previousClaims);
        cb.setVisible(true);
        box.add(cb);
        return cb;
    }

    /**
     * start a socket server that can run commands on this UI.
     * This is to enable automation scripts.
     */
    private void startSocketServer() {
        autoInsuranceScriptServer = new AutoInsuranceScriptServer(this);

        Thread newThread = new Thread(autoInsuranceScriptServer);
        newThread.start();
    }

    /**
     * Sets the text at the bottom of the panel
     * @param newText whatever you want the new text to be
     */
    void setLabel(String newText) {
        label.setText(newText);
    }

    /**
     * Selects one of the drop-down items for previous claims
     * @param claims number of previous claims
     */
    void setPreviousClaims(int claims) {
        if (claims <= 0) {
            claimsDropDown.setSelectedIndex(0);
        }

        if (claims == 1) {
            claimsDropDown.setSelectedIndex(1);
        }

        if (claims >= 2 && claims <= 4) {
            claimsDropDown.setSelectedIndex(2);
        }

        if (claims >= 5) {
            claimsDropDown.setSelectedIndex(3);
        }
    }

    /**
     * Sets the age field per what you enter
     * @param age the text that goes into the age field.
     */
    void setClaimsAge(String age) {
        ageField.setText(age);
    }

    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    private static void createAndShowGUI() {
        //Create and set up the window.
        JFrame frame = new JFrame("AutoInsuranceUI");
        frame.setDefaultCloseOperation(EXIT_ON_CLOSE);

        //Create and set up the content pane.
        AutoInsuranceUI newContentPane = new AutoInsuranceUI(frame);
        newContentPane.setOpaque(true); //content panes must be opaque
        frame.setContentPane(newContentPane);

        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }

    public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(() -> createAndShowGUI());
    }

    // stops and closes the application
    public void close() {
        this.frame.dispose();
        System.exit(0);
    }
}




================================================
FILE: desktop_app/src/main/java/com/coveros/training/autoinsurance/InvalidClaimsException.java
================================================
package com.coveros.training.autoinsurance;

public class InvalidClaimsException extends RuntimeException {
    public InvalidClaimsException(String ex) {
        super(ex);
    }
}



================================================
FILE: desktop_app/src/main/java/com/coveros/training/autoinsurance/WarningLetterEnum.java
================================================
package com.coveros.training.autoinsurance;

/**
 * The identifiers of different letters that get sent out for
 * different numbers of claims and age of the driver.
 */
public enum WarningLetterEnum {
    NONE,
    LTR1,
    LTR2,
    LTR3
}



================================================
FILE: desktop_app/src/main/resources/log4j2.xml
================================================
<?xml version="1.0" encoding="UTF-8"?>
<Configuration monitorinterval="30" status="info" strict="true">

    <Appenders>
        <Appender type="Console" name="Console">
            <Layout type="PatternLayout" pattern="%d %p %m%n"/>
        </Appender>
    </Appenders>

    <Loggers>
        <Root level="INFO">
            <AppenderRef ref="Console"/>
        </Root>
    </Loggers>

</Configuration>



================================================
FILE: desktop_app/src/test/java/com/coveros/training/autoinsurance/AutoInsuranceActionTests.java
================================================
package com.coveros.training.autoinsurance;

import nl.jqno.equalsverifier.EqualsVerifier;
import org.junit.Assert;
import org.junit.Test;

import static com.coveros.training.autoinsurance.WarningLetterEnum.LTR1;

public class AutoInsuranceActionTests {

    @Test
    public void testShouldHaveEqualsAndHashcodeImplementedCorrectly() {
        EqualsVerifier.forClass(AutoInsuranceAction.class).verify();
    }

    @Test
    public void testShouldOutputGoodString() {
        final AutoInsuranceAction action = createTestAutoInsuranceAction();
        Assert.assertTrue("toString was: " + action.toString(), action.toString().contains("premiumIncreaseDollars=50,warningLetterEnum=LTR1,isPolicyCanceled=false"));
    }

    public static AutoInsuranceAction createTestAutoInsuranceAction() {
        return new AutoInsuranceAction(50, LTR1, false, false);
    }

    @Test
    public void testCanCreateEmpty() {
        final AutoInsuranceAction autoInsuranceAction = AutoInsuranceAction.createEmpty();
        Assert.assertTrue(autoInsuranceAction.isEmpty());
    }
}



================================================
FILE: desktop_app/src/test/java/com/coveros/training/autoinsurance/AutoInsuranceProcessorTests.java
================================================
package com.coveros.training.autoinsurance;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.util.Arrays;
import java.util.Collection;

@RunWith(Parameterized.class)
public class AutoInsuranceProcessorTests {

    @Parameters
    public static Collection<Object[]> data() {

        // three-point bounds testing
        return Arrays.asList(new Object[][]{
        // claims,  age,  premiumIncrease,  warningLetter,  cancelPolicy, isError
                {0, 15, -1, WarningLetterEnum.NONE, false, true},
                {0, 16, 50, WarningLetterEnum.NONE, false, false},
                {0, 17, 50, WarningLetterEnum.NONE, false, false},

                {0, 25, 50, WarningLetterEnum.NONE, false, false},
                {0, 26, 25, WarningLetterEnum.NONE, false, false},
                {0, 27, 25, WarningLetterEnum.NONE, false, false},

                {0, 84, 25, WarningLetterEnum.NONE, false, false},
                {0, 85, 25, WarningLetterEnum.NONE, false, false},
                {0, 86, -1, WarningLetterEnum.NONE, false, true},

                {1, 15, -1, WarningLetterEnum.NONE, false, true},
                {1, 16, 100, WarningLetterEnum.LTR1, false, false},
                {1, 17, 100, WarningLetterEnum.LTR1, false, false},

                {1, 25, 100, WarningLetterEnum.LTR1, false, false},
                {1, 26, 50, WarningLetterEnum.NONE, false, false},
                {1, 27, 50, WarningLetterEnum.NONE, false, false},

                {1, 84, 50, WarningLetterEnum.NONE, false, false},
                {1, 85, 50, WarningLetterEnum.NONE, false, false},
                {1, 86, -1, WarningLetterEnum.NONE, false, true},

                {2, 15, -1, WarningLetterEnum.NONE, false, true},
                {2, 16, 400, WarningLetterEnum.LTR2, false, false},
                {2, 17, 400, WarningLetterEnum.LTR2, false, false},

                {2, 25, 400, WarningLetterEnum.LTR2, false, false},
                {2, 26, 200, WarningLetterEnum.LTR3, false, false},
                {2, 27, 200, WarningLetterEnum.LTR3, false, false},

                {2, 84, 200, WarningLetterEnum.LTR3, false, false},
                {2, 85, 200, WarningLetterEnum.LTR3, false, false},
                {2, 86, -1, WarningLetterEnum.NONE, false, true},

                {4, 15, -1, WarningLetterEnum.NONE, false, true},
                {4, 16, 400, WarningLetterEnum.LTR2, false, false},
                {4, 17, 400, WarningLetterEnum.LTR2, false, false},

                {4, 25, 400, WarningLetterEnum.LTR2, false, false},
                {4, 26, 200, WarningLetterEnum.LTR3, false, false},
                {4, 27, 200, WarningLetterEnum.LTR3, false, false},

                {4, 84, 200, WarningLetterEnum.LTR3, false, false},
                {4, 85, 200, WarningLetterEnum.LTR3, false, false},
                {4, 86, -1, WarningLetterEnum.NONE, false, true},

                {5, 26, 0, WarningLetterEnum.NONE, true, false},
                {6, 26, 0, WarningLetterEnum.NONE, true, false},
                {5, 80, 0, WarningLetterEnum.NONE, true, false},

                {-1, 80, -1, WarningLetterEnum.NONE, false, true},
        });
    }

    private int claims;
    private int age;
    private int premiumIncrease;
    private WarningLetterEnum warningLetter;
    private boolean cancelPolicy;
    private boolean isError;

    public AutoInsuranceProcessorTests(int claims, int age, int premiumIncrease, WarningLetterEnum warningLetter, boolean cancelPolicy, boolean isError) {
        this.claims = claims;
        this.age = age;
        this.premiumIncrease = premiumIncrease;
        this.warningLetter = warningLetter;
        this.cancelPolicy = cancelPolicy;
        this.isError = isError;
    }

    @Test
    public void testProcessor() {

        AutoInsuranceAction action = AutoInsuranceProcessor.process(claims, age);

        AutoInsuranceAction expectedAutoInsuranceAction = new AutoInsuranceAction(premiumIncrease, warningLetter, cancelPolicy, isError);

        Assert.assertEquals("claims: " + claims + " age: " + age, expectedAutoInsuranceAction, action);
    }
}



================================================
FILE: desktop_app/src/test/java/com/coveros/training/autoinsurance/AutoInsuranceScriptClient.java
================================================
package com.coveros.training.autoinsurance;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;

public class AutoInsuranceScriptClient {

    public static final String QUIT = "quit";
    static Logger logger = LoggerFactory.getLogger(AutoInsuranceScriptClient.class);

    public String send(String command) {
        String hostName = "localhost";
        String result = "";
        int portNumber = 8000;
        try (Socket echoSocket = new Socket(hostName, portNumber)) {
            PrintWriter out = new PrintWriter(echoSocket.getOutputStream(), true);
            BufferedReader in =
                    new BufferedReader(
                            new InputStreamReader(echoSocket.getInputStream()));
            logger.info("running command: {}", command);
            if (command.equals(QUIT)) {
                result = processCommand(out, in, command);
            }
            result = processCommand(out, in, command);
        } catch (UnknownHostException e) {
            logger.error("Don't know about host {}", hostName);
        } catch (IOException e) {
            logger.error("Couldn't get I/O for the connection to {}", hostName);
        }
        return result;
    }

    private String processCommand(PrintWriter out, BufferedReader in, String command) throws IOException {
        logger.info("sending: {}", command);
        out.println(command);
        final String response = in.readLine();
        logger.info("response: {}", response);
        return response;
    }

}



================================================
FILE: desktop_app/src/test/java/com/coveros/training/autoinsurance/DesktopTester.java
================================================
package com.coveros.training.autoinsurance;

public class DesktopTester {
    private final AutoInsuranceScriptClient scriptClient;

    public DesktopTester(AutoInsuranceScriptClient scriptClient) {
        this.scriptClient = scriptClient;
    }


    public void setAge(int age) {
        scriptClient.send(String.format("set age %d", age));
    }

    public void setClaims(int claims) {
        scriptClient.send(String.format("set claims %d", claims));
    }

    public void clickCalculate() {
        scriptClient.send("click calculate");
    }

    public String getLabel() {
        return scriptClient.send("get label");
    }

    /**
     * kill the desktop UI and the tester client
     */
    public void quit() {
        scriptClient.send(AutoInsuranceScriptClient.QUIT);
    }
}



================================================
FILE: desktop_app/src/test/java/com/coveros/training/autoinsurance/DesktopUiTests.java
================================================
package com.coveros.training.autoinsurance;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class DesktopUiTests {

    @Before
    public void startUI() {
        AutoInsuranceUI.main(new String[]{});
    }

    /**
     * An initial test to make sure the basics work
     */
    @Test
    public void testShouldGetCorrectCalculationHappyPath() {
        DesktopTester dt = new DesktopTester(new AutoInsuranceScriptClient());
        dt.setAge(22);
        dt.setClaims(1);
        dt.clickCalculate();
        final String label = dt.getLabel();
        dt.quit();
        Assert.assertEquals("Premium increase: $100 Warning Ltr: LTR1 is canceled: false", label);
    }


}



================================================
FILE: desktop_app/src/test/java/com/coveros/training/autoinsurance/ExecutionDataClient.java
================================================
package com.coveros.training.autoinsurance;

/*******************************************************************************
 * Copyright (c) 2009, 2020 Mountainminds GmbH & Co. KG and Contributors
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    Marc R. Hoffmann - initial API and implementation
 *
 *******************************************************************************/

import org.jacoco.core.data.ExecutionDataWriter;
import org.jacoco.core.runtime.RemoteControlReader;
import org.jacoco.core.runtime.RemoteControlWriter;

import java.io.FileOutputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;

/**
 * This example connects to a coverage agent that run in output mode
 * <code>tcpserver</code> and requests execution data. The collected data is
 * dumped to a local file.
 */
public class ExecutionDataClient {

    private static final String ADDRESS = "localhost";

    /**
     * Starts the Jacoco execution data request.
     * First argument is the port to connect to, second is the file to write to.
     */
    public static void main(final String[] args) throws IOException {
        int port = Integer.parseInt(args[0]);
        String destfile = args[1];
        final FileOutputStream localFile = new FileOutputStream(destfile);
        final ExecutionDataWriter localWriter = new ExecutionDataWriter(
                localFile);

        // Open a socket to the coverage agent:
        try (Socket socket = new Socket(InetAddress.getByName(ADDRESS), port)) {
            final RemoteControlWriter writer = new RemoteControlWriter(
                    socket.getOutputStream());
            final RemoteControlReader reader = new RemoteControlReader(
                    socket.getInputStream());
            reader.setSessionInfoVisitor(localWriter);
            reader.setExecutionDataVisitor(localWriter);

            // Send a dump command and read the response:
            writer.visitDumpCommand(true, true);
            if (!reader.read()) {
                throw new IOException("Socket closed unexpectedly.");
            }

        }
        localFile.close();
    }

    private ExecutionDataClient() {
    }
}


================================================
FILE: docs/README.txt
================================================
Contents of the docs directory
------------------------------

/api_testing                      : testing web API's
/ci_and_cd                        : Setting up continuous integration and delivery systems
/dev_notes                        : details of the system appropriate for developers
/performance_testing              : testing performance of a system
/security_testing                 : testing security of a system
/ui_testing                       : UI testing, primarily using Selenium
coveros_text.txt                  : help text with a fancy Coveros ascii graphic (also shown with gradlew coveros).
desktop_automation.txt            : A guide on automating non-web-applications
test.py                           : A Python script that shows page object model techniques for web testing.
BDD.md                            : A BDD / TDD walkthrough.




================================================
FILE: docs/coveros_text.txt
================================================
                                 .ccccccccc..                                  Interesting links when the system is up:
                        .cccccccccc                                            ----------------------------------------
                  cCCCCCCCC                                                    http://localhost:8080/demo - the main application
             .CCCCCCCCCCc                                                      http://localhost:8080/demo/console - the database viewer
         .cCCCCCCCCCC/                                                               (use URL of jdbc:h2:mem:training and no user or password)
      /CCCCCCCCCCC/                                                            http://localhost:8080/demo/monitoring - monitoring of the server
    /CCCCCCCCCCCC/
   /CCCCCCCCCCCC/        .dCCCCb. .dOOOOb. dP   .dP .dEEEEb. RRdRRRb. .dOOOOb. .dSSSSb.
  /CCCCCCCCCCCC/         CC'  `"" OO'  `OO VV   dV' EEoooodC RR'  `RR OO'  `OO YSooooo.
 |CCCCCCCCCCCCC|         CC.  ... OO.  .OO VV .VV'  EE.  ... RR       OO.  .OO       SS
 |CCCCCCCCCCCCC|         `CCCCCP' `OOOOOP' VVVVP'   `EEEEEP' dR       `OOOOOP' `SSSSSP
 .CCCCCCCCCCCCC\
  \CCCCCCCCCCCCCC\                           ____  _____ __  __  ___
   \CCCCCCCCCCCCCC\                         |  _ \| ____|  \/  |/ _ \          Summary of relevant Gradle commands
    \CCCCCCCCCCCCCCc\                       | | | |  _| | |\/| | | | |         ------------------------------------
       \CCCCCCCCCCCCCCc                     | |_| | |___| |  | | |_| |
          .CCCCCCCCCCCCCCCc                 |____/|_____|_|  |_|\___/          gradlew apprun         - Runs the application
             *\CCCCCCCCCCCCCCCC\c                                              gradlew check          - Runs all tests solely using Java
                  ^\CCCCCCCCCCCCCCCCccc                                        gradlew runAllTests    - Runs the whole set of tests**
                        ^^^*CCCCCCCCCCCCCCCCCCCCCCCCCCcc..                     gradlew clean          - Cleans build products and installs pre-push hook.
                                   ^^^^^^^^^^^^^^^^^                           gradlew runBehaveTests - Runs the UI tests**
                                                                               gradlew runApiTests    - Runs the API tests**
                                                                               gradlew selenified     - Runs some Selenified tests**
                                                                               gradlew pitest         - Runs mutation testing (see http://pitest.org/)
                                                                               gradlew sonarqube      - Runs static analysis using SonarQube.
                                                                                                        (SonarQube must be running on localhost:9000)

gradlew generateCucumberReport   - Runs cucumber and creates a nice-looking HTML report.
gradlew dependencyCheckAnalyze   - Analyzes security reports for the dependencies of this project.
gradlew integrate                - Runs the database integration tests.
gradlew startH2Console           - Starts a console to examine the H2 database file.
gradlew <task 1>... taskTree     - A utility that will show the task tree for a particular task.

** Requires the app to be running (usually in another terminal) and all optional dependencies installed.



================================================
FILE: docs/api_testing/README.txt
================================================
api_testing_with_curl.txt         : How to call API endpoints with Curl https://curl.haxx.se/
api_testing_with_soapui.txt       : How to test API with SoapUI https://www.soapui.org/
soapui_demo_tests.xml             : A SoapUI file to demonstrate API testing.
tester.postman_collection.json    : Postman tests


================================================
FILE: docs/api_testing/api_testing_with_curl.txt
================================================
#!/bin/sh

#How to do manual API testing
#----------------------------

curl http://localhost:8080/demo/math --data "item_a=9&item_b=7"
curl http://localhost:8080/demo/register --data "username=alice&password=B65S3xNW8vXQHyjYnD72L3mejc"
curl http://localhost:8080/demo/login --data "username=alice&password=B65S3xNW8vXQHyjYnD72L3mejc"
curl http://localhost:8080/demo/registerbook --data "book=alice+in+wonderland"
curl http://localhost:8080/demo/registerborrower --data "borrower=alice"
curl http://localhost:8080/demo/lend --data "book=alice+in+wonderland&borrower=alice"








================================================
FILE: docs/api_testing/api_testing_with_soapui.txt
================================================
Start the demo project by running gradlew apprun

Open SoapUI

Import a project, select "soapui_demo_tests.xml" in the demo/docs directory

Double-click on Math_TestSuite

click the green arrow to run the Test Suite.


================================================
FILE: docs/api_testing/soapui_demo_tests.xml
================================================
<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="111909e8-f8d3-4eac-bef6-a52466912526" activeEnvironment="Default" name="Demo" resourceRoot="" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="Export JUnit Results" value="false"/>
  <con:entry key="Export All" value="false"/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="false"/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="TestSuite" value="Math_TestSuite"/>
  <con:entry key="Endpoint" value=""/>
  <con:entry key="Select Report Type" value=""/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Export JUnit Results with test properties" value="false"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="TestCase" value="TestCase 1 - HappyPath"/>
  <con:entry key="Username" value=""/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="Root Folder" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Save Project" value="false"/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" id="cfce851e-01d5-4402-ae97-963cd5d99225" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:8080" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://localhost:8080</con:endpoint></con:endpoints><con:resource name="Demo_math" path="/demo/math" id="0f6c5e45-be92-4a25-8683-8790bf3646d3"><con:settings/><con:parameters/><con:method name="Math" id="1bf79c97-8151-48dc-a03d-1926b68a3f9e" method="POST"><con:settings/><con:parameters><con:parameter><con:name>item_a</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>item_b</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="two_small_positive_ints" id="e36d3aaf-9d3d-44bd-acfb-a03649893d4b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/demo/math</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="item_b" value="4"/>
  <con:entry key="item_a" value="3"/>
</con:parameters></con:request></con:method></con:resource></con:interface><con:testSuite id="7223e62f-6ee9-4d31-a146-8f6a303f9830" name="Math_TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="53a850ba-07dd-4c1d-96a5-1feaf3595b98" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1 - two small ints" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="REST Request" id="188ec0e8-fdaf-43b3-8fd4-d77159ba5ff4"><con:settings/><con:config service="http://localhost:8080" resourcePath="/demo/math" methodName="Math" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST Request" id="e36d3aaf-9d3d-44bd-acfb-a03649893d4b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/demo/math</con:originalUri><con:assertion type="Simple Contains" id="9aebbc7f-8304-4a32-a46f-9bd7216abf3a" name="Contains"><con:configuration><token>7</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="item_b" value="4"/>
  <con:entry key="item_a" value="3"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d7228d76-69b9-4051-b2d2-b3f7a61e8403" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 2 - two  larger positive ints" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="REST Request" id="868add2e-eac9-4f1d-90eb-7a32c54057c7"><con:settings/><con:config service="http://localhost:8080" methodName="Math" resourcePath="/demo/math" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST Request" id="fb12b576-d937-428e-9766-cd28306cba56" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/demo/math</con:originalUri><con:assertion type="Simple Contains" id="b9d08d6d-9fa6-47cb-a443-b46ee715f605" name="Contains"><con:configuration><token>4000</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="item_b" value="3000"/>
  <con:entry key="item_a" value="1000"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="eaa1c68a-2a77-4fe5-b09e-9c85308af797" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 3 - two  larger negative ints" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="REST Request" id="21f55269-3bd0-4ced-9687-84b516c71083"><con:settings/><con:config service="http://localhost:8080" methodName="Math" resourcePath="/demo/math" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST Request" id="fb12b576-d937-428e-9766-cd28306cba56" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/demo/math</con:originalUri><con:assertion type="Simple Contains" id="b9d08d6d-9fa6-47cb-a443-b46ee715f605" name="Contains"><con:configuration><token>-4000</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="item_b" value="-3000"/>
  <con:entry key="item_a" value="-1000"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="2cb8f07a-cb53-4851-862e-72a27773ac66" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 4 - two small negative ints" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="REST Request" id="6a30f959-f212-463b-a1aa-1cf6680f4373"><con:settings/><con:config service="http://localhost:8080" methodName="Math" resourcePath="/demo/math" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST Request" id="fb12b576-d937-428e-9766-cd28306cba56" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/demo/math</con:originalUri><con:assertion type="Simple Contains" id="b9d08d6d-9fa6-47cb-a443-b46ee715f605" name="Contains"><con:configuration><token>-56</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="item_b" value="-33"/>
  <con:entry key="item_a" value="-23"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="60c91b99-6149-4b05-bbb9-71137af95715" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 5- negative case - decimal" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="REST Request" id="50a89f2b-03ea-4507-b414-58fc5e8b1612"><con:settings/><con:config service="http://localhost:8080" methodName="Math" resourcePath="/demo/math" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST Request" id="fb12b576-d937-428e-9766-cd28306cba56" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/demo/math</con:originalUri><con:assertion type="Simple Contains" id="b9d08d6d-9fa6-47cb-a443-b46ee715f605" name="Contains"><con:configuration><token>Error: only accepts integers</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="d8536417-6a15-44c8-8155-7d45d9d40033"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="item_b" value="-33"/>
  <con:entry key="item_a" value="1.1"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="483d33c3-b4fa-4cf6-91f4-d4b026bed0dd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 6- negative case - too large addend" searchProperties="true"><con:description>If the numbers provided to add are individually larger than 2,147,483,647, or if they 
add to that number or larger, then the result won't be as expected.

In this test we will test with one addend being too large</con:description><con:settings/><con:testStep type="restrequest" name="REST Request" id="a247e72f-7fe5-4c01-ab52-304297670b04"><con:settings/><con:config service="http://localhost:8080" methodName="Math" resourcePath="/demo/math" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST Request" id="fb12b576-d937-428e-9766-cd28306cba56" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/demo/math</con:originalUri><con:assertion type="Simple Contains" id="b9d08d6d-9fa6-47cb-a443-b46ee715f605" name="Contains"><con:configuration><token>Error: addend too large - maximum of 2,147,483,647 in a single addend</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="item_b" value="-33"/>
  <con:entry key="item_a" value="2147483648"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5395395c-0a98-4bfc-b615-0b6b1cc68a00" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 7- negative case - too large sum" searchProperties="true"><con:description>If the numbers provided to add are individually larger than 2,147,483,647, or if they 
add to that number or larger, then the result won't be as expected.

In this test we will test with the sum being above that number</con:description><con:settings/><con:testStep type="restrequest" name="REST Request" id="f30398f3-d98a-46bf-aba1-2974e0f5ec2a"><con:settings/><con:config service="http://localhost:8080" methodName="Math" resourcePath="/demo/math" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="REST Request" id="fb12b576-d937-428e-9766-cd28306cba56" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/demo/math</con:originalUri><con:assertion type="Simple Contains" id="b9d08d6d-9fa6-47cb-a443-b46ee715f605" name="Contains"><con:configuration><token>Error: sum too large - maximum of (absolute) 2,147,483,647</token><ignoreCase>true</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="item_b" value="1"/>
  <con:entry key="item_a" value="2147483647"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>


================================================
FILE: docs/api_testing/tester.postman_collection.json
================================================
{
	"info": {
		"_postman_id": "70251e20-e7d7-4fad-a126-f85753e54fd7",
		"name": "tester",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "basic math happy path",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e9f77377-24dc-448a-813b-5529f090fec8",
						"exec": [
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"8\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/demo/math?item_a=3&item_b=5",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"demo",
						"math"
					],
					"query": [
						{
							"key": "item_a",
							"value": "3"
						},
						{
							"key": "item_b",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "maximum positive number plus 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "74f49090-3e21-4ded-a420-2b944b5cdeb8",
						"exec": [
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"2147483647\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/demo/math?item_a=2147483647&item_b=0",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"demo",
						"math"
					],
					"query": [
						{
							"key": "item_a",
							"value": "2147483647"
						},
						{
							"key": "item_b",
							"value": "0"
						}
					]
				},
				"description": "This should return the maximum positive int in a signed 32-bit integer"
			},
			"response": []
		},
		{
			"name": "maximum negative number plus 0",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "55b23df5-815a-412f-a613-e1e2b7041c9e",
						"exec": [
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"-2147483648\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/demo/math?item_a=-2147483648&item_b=0",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"demo",
						"math"
					],
					"query": [
						{
							"key": "item_a",
							"value": "-2147483648"
						},
						{
							"key": "item_b",
							"value": "0"
						}
					]
				},
				"description": "This should return the maximum positive int in a signed 32-bit integer"
			},
			"response": []
		},
		{
			"name": "maximum positive number plus maximum positive number",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b6fea037-956d-44d5-9b54-3c92397ba997",
						"exec": [
							"// is this a good test?  do we want to accept negative 2 as an answer?",
							"// In my opinion, we should assert that some kind of overflor error message has been returned,",
							"// and change the code to suit that.",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"-2\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/demo/math?item_a=2147483647&item_b=2147483647",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"demo",
						"math"
					],
					"query": [
						{
							"key": "item_a",
							"value": "2147483647"
						},
						{
							"key": "item_b",
							"value": "2147483647"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "maximum negative number plus maximum negative number",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b9973844-ec4c-420d-ad01-5c5bc80f2a95",
						"exec": [
							"// is this a good test?  do we want to accept this as an answer?",
							"// In my opinion, we should assert that some kind of overflor error message has been returned,",
							"// and change the code to suit that.",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"2\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/demo/math?item_a=-2147483648 &item_b=-2147483648 ",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"demo",
						"math"
					],
					"query": [
						{
							"key": "item_a",
							"value": "-2147483648 "
						},
						{
							"key": "item_b",
							"value": "-2147483648 "
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "maximum positive number plus 1 - return error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c89f1166-b079-462f-a1c0-7966aaf6f8fc",
						"exec": [
							"// is this a good test?  do we want to accept this as an answer?",
							"// In my opinion, we should assert that some kind of overflor error message has been returned,",
							"// and change the code to suit that.",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"-2\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/demo/math?item_a=2147483647&item_b=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"demo",
						"math"
					],
					"query": [
						{
							"key": "item_a",
							"value": "2147483647"
						},
						{
							"key": "item_b",
							"value": "1"
						}
					]
				},
				"description": "This should return the maximum negative int in a signed 32-bit integer"
			},
			"response": []
		},
		{
			"name": "maximum negative number minus 1 - return error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a77f3bfe-a528-4cdf-8f9d-908a201c64d7",
						"exec": [
							"// is this a good test?  do we want to accept this as an answer?",
							"// In my opinion, we should assert that some kind of overflor error message has been returned,",
							"// and change the code to suit that.",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"-2\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/demo/math?item_a=-2147483648&item_b=-1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"demo",
						"math"
					],
					"query": [
						{
							"key": "item_a",
							"value": "-2147483648"
						},
						{
							"key": "item_b",
							"value": "-1"
						}
					]
				},
				"description": "This should return the maximum positive int in a signed 32-bit integer"
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}


================================================
FILE: docs/ci_and_cd/README.txt
================================================
ci_and_cd_for_localhost.txt       : instructions for setting up a CI/CD pipeline all-in-one on a Windows box
install_docker_centos.txt         : Instructions for setting up Docker on CentOS.
jenkins_box_guide.txt             : How to set up a CI/CD server on CentOS.
ui_test_box.txt                   : Instructions for setting up a server to run UI testing.
virtualbox_networking.txt         : Details of how networking is configured for the virtual machines.


================================================
FILE: docs/ci_and_cd/ci_and_cd_for_localhost.txt
================================================
installing a ci/cd pipeline on a Windows computer.
-------------------------------------------------

The following assumes you have already installed the necessary components to run "gradlew runalltests" on your computer -
this entails having JDK11, Python, Chromedriver in a directory on your path, etc... see README.md in the top directory of Demo.

The gist of the following is as follows:
we install and run Tomcat, Sonarqube, and Jenkins.
We configure the Jenkins pipeline.
We set up a fake central repository in a local directory so that when we push any code to it, Jenkins starts up.
This should go smoothly, but there are inevitable kinks when configuring real software.
Please contact me with any issues found.


I did this on Windows, other operating systems would require some changes.

Install the latest Git.
Put this on your path: C:\Program Files\Git\usr\bin (so Jenkins has access to unix-style commands while running the pipeline)

Download and install JDK11, put it on your path (Sonarqube 8 requires JDK11)

Install Jmeter, put the path to its bin directory on the path.
Read "Installing Jmeter" in the document "perf_testing_with_jmeter.txt", follow that.

Download Demo somewhere - it's at https://github.com/7ep/demo

Download Sonarqube https://www.sonarqube.org/downloads/
Unzip the file somewhere and drop down into its bin directory and start it up.

Create a fake central repo on your machine.  This is where Jenkins will look
for new code changes.  I put mine at C:\Users\byron\fake_central_repo\demo, you can put yours anywhere.

create the directory, then in that directory, run a git init:
git init --bare

Back in the original Demo directory, create a git remote that points to the fake repo.  I called mine "fakecentralrepo"

# the following will add the remote location
git remote add fakecentralrepo ../fake_central_repo/demo

# the following will set the remote location as the default remote
git push -u fakecentralrepo master

Download Tomcat9 core binary distribution for your machine: https://tomcat.apache.org/download-90.cgi

Modify the server.xml in the Tomcat "conf/" directory, at the bottom of the file there is a <Host> section.  This will allow Tomcat to serve the static content that is generated during a build. Place the following inside, so that you get something like this:

      <Host name="localhost"  appBase="webapps"
            unpackWARs="true" autoDeploy="true">
        <Context docBase="/c:/Users/YOUR_NAME_HERE/.jenkins/workspace" path="/workspace" />

Additionally, create the previously mentioned workspace directory:
	mkdir -p <path_to_your_user_directory>/.jenkins/workspace

In conf/context.xml, add the following inside of the main <Context> element, to avoid a complaint by Tomcat about "nsufficient free space available after evicting expired cache entries - consider increasing the maximum size of the cache"

    <Resources cachingAllowed="true" cacheMaxSize="100000" />

In the Tomcat /bin directory, create a new file, setenv.bat
Give it this content (this is so we can connect with JMX dynamic analysis tools to Tomcat):
set CATALINA_OPTS=%CATALINA_OPTS% -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djava.rmi.server.hostname=localhost

or on MacOs, setenv.sh. Give it this content:
export CATALINA_OPTS="$CATALINA_OPTS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djava.rmi.server.hostname=localhost"

and be sure to set it as executable

Start up Tomcat (look in the bin directory for a "startup" file)

Download the Jenkins war file:

http://mirrors.jenkins.io/war-stable/latest/jenkins.war

Place the war into the webapps directory in Tomcat.  Doing so will boot up Jenkins.

go to localhost:8080/jenkins once it has a few seconds to finish booting.

Choose "Install Suggested Plugins"

I created an admin with the following characteristics:
username: admin
password: admin
email: admin@test.com

(save and continue)

To install the Sidebar-Link plugin, go to:

http://localhost:8080/jenkins/pluginManager/available

and search for "sidebar".  Choose Sidebar Link and "Install without restart"



CONFIGURE PIPELINE TO RUN AT GIT RECEIVE
----------------------------------------

We want to have the ability to notify Jenkins whenever we push
to our new repo.  Jenkins has a capability of running builds whenever
a certain endpoint is hit. 

Download the command-line-interface (CLI) tool from Jenkins:

http://localhost:8080/jenkins/jnlpJars/jenkins-cli.jar

Place it in the user's home directory (mine is C:\Users\byron)

Now, create the following file, at /fakecentralrepo/demo/hooks/post-receive

------------------------ FILE START
#!/bin/sh

# the following runs the jenkins-cli command located in the user's home directory
# it uses admin as a username and admin as a password for Jenkins
# this will kick off a build on the "demo" pipeline
exec java -jar ~/jenkins-cli.jar -s http://localhost:8080/jenkins -auth admin:admin build demo
------------------------ FILE END


Now let's create a pipeline so it does some actual work.


- In Jenkins, create a pipeline, name it:  Demo      (capitalization matters here!!)
- Check the box for "discard old builds",
    Strategy: log rotation
    Max # of builds to keep: 5
- Check the box labeled "Do not allow concurrent builds".  (We don't want race conditions in our pipeline, and we don't want excessive memory usage on this demo machine)
- Check the box for "Sidebar links". Add a link.  Enter this:

  Link URL: http://localhost:8080/workspace/Demo/build/reports/bdd/cucumber-html-reports/overview-features.html
  Link Text: Cucumber report.

  Click Add Link.

  Link URL: http://localhost:9000/
  Link Text: SonarQube

  Click Add Link.

  Link URL: http://localhost:8080/workspace/Demo/build/reports/dependency-check-report.html
  Link Text: Dependency check report

  Click Add Link.

  Link URL: http://localhost:8080/demo
  Link Text: Demo

  Click Add Link

  Link URL: http://localhost:8080/workspace/Demo/build/reports/jacoco/index.html
  Link Text: Jacoco coverage report

  Click Add Link

  Link URL: http://localhost:8080/workspace/Demo/build/reports/pitest/index.html
  Link Text: Pitest Mutation Testing

  Click Add Link

  Link URL: http://localhost:8080/workspace/Demo/build/docs/javadoc/index.html
  Link Text: Javadoc

  Click Add Link

  Link URL: http://training:8080/workspace/Demo/perf_report/index.html
  Link Text: Performance report

  Click Add Link

  Link URL: http://training:8080/workspace/Demo/build/reports/zap/zap-report.html
  Link Text: Zap report

- Under Pipeline, click on the dropdown and select "Pipeline script from SCM"
- on the dropdown next to SCM, select Git.
- fill in these values:
     In Repositories:
     Repository URL: C:\Users\byron\fake_central_repo\demo  (Yours may be a different place)
     In Branches to Build:
     Branch specifier: refs/heads/master
     In Script Path: jenkins/Jenkinsfile

     Click save

Congratulations!  You should now be able to run a full pipeline.

Summary:
Jenkins is at http://localhost:8080/jenkins/
Demo is at http://localhost:8080/demo/
Sonarqube is at http://localhost:9000/



================================================
FILE: docs/ci_and_cd/install_docker_centos.txt
================================================

#######
####### Step 1 — Install Docker

#install needed packages
sudo yum install -y yum-utils device-mapper-persistent-data lvm2

#Configure the docker-ce repo:
sudo yum-config-manager -y --add-repo https://download.docker.com/linux/centos/docker-ce.repo


#Install docker-ce:
sudo yum install -y docker-ce

#Add your user to the docker group with the following command.
sudo usermod -aG docker $(whoami)

#Set Docker to start automatically at boot time:
sudo systemctl enable docker.service


#Finally, start the Docker service:
sudo systemctl start docker.service


##########
########## Step 2 - install Docker Compose

#Install Extra Packages for Enterprise Linux
sudo yum install -y epel-release


#Install python-pip

sudo yum install -y python-pip

#Then install Docker Compose:

sudo pip install docker-compose

#You will also need to upgrade your Python packages on CentOS 7 to get docker-compose to run successfully:

sudo yum upgrade -y python*

#To verify a successful Docker Compose installation, run:

docker-compose version


================================================
FILE: docs/ci_and_cd/jenkins_box_guide.txt
================================================
Console-only Jenkins, SonarQube, Git repo
-----------------------------------------

You need a few things to get started.

Download the Centos install DVD iso:
http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1810.iso

Download the VirtualBox software:
https://www.virtualbox.org/wiki/Downloads

Go ahead and install VirtualBox using its installer.  The default
settings will suffice.

These instructions were tested using VirtualBox 6.

Prerequisite: Modify the networking configuration.
Follow ON THE HOST BOX in virtualbox_networking.txt

1. Open VirtualBox.  Click on New.  Name it "jenkinsbox".

Make sure to choose Mac osX 64 bit for the operating system.  It's not a Mac, but for
some reason this makes mouse integration work beautifully.

Click Next.

2. Give it 4096 megabytes of ram.  Click Next.

3. Keep clicking next until it gives you a choice for hard-drive size.  Set it
   to 12 gigabytes.  Click Next.

Click "settings" for the new Centos_Jenkins_machine box, do the following:
  Click on Storage and on the icon for the empty disc drive, and
  on the icon on the right, click and you should see an option to:
  "Choose Virtual Optical Disk File...".  Click that and choose the iso file
  for Centos you downloaded previously.
  
in the network tab, for adapter 1 choose Host-only adapter, and for
adapter 2 choose NAT.

  Click Ok.

Start it up.

Choose "install Centos 7" instead of "test this media and
install centos7".

Choose English for the languages.

Under system, click on "installation destination" and then click Done
on the page it opens up.  (it defaults properly)

Click on the network & Host name icon.

This is an ***important*** section.  Take it slow.

First, change the Host name to jenkinsbox.

Then, toggle the enp0s8 network adapter to ON.  That's the NAT network, so it
should just automatically work.

But let's make sure it's configured properly.  Click on Configure for it,
and Under the General tab, check the box next to "Automatically connect
to this network when it is available".  Then save it.

Select the enp0s17 network adapter.  This one we have to manually configure.  Click the
[Configure...] button in the bottom right.

Under the General tab, check the box next to "Automatically connect to this network when it is available"

Click on the IPV4 Settings tab, and change the method from automatic to manual.

Click the [Add] button.  Enter the following data:
Address:          Netmask:           Gateway:
192.168.56.101    255.255.255.0      192.168.56.1

DNS Servers: 192.168.56.1

Click on the checkbox next to "Require IPV4 addressing for this connection to complete"

Click Save.

toggle this adapter from off to on.  If done correctly, it should very quickly indicate "Connected"
with some data similar to this:
Hardware address: 08:00:27:09:16:BC
Speed 1000 Mb/s
IP Address 192.168.56.101
Subnet Mask 255.255.255.0
Default Route 192.168.56.1
DNS 192.168.56.1


Phew, done!  Click Done in the top left.

Leave the software selection at "minimal install"

Click on the "Begin Installation" button in the bottom right.

While it is installing, you will see options to set the root password
and create a user.  We're not too concerned about security, since this
box is just for educational purposes.  However, it won't let you
complete installation until you create a user.  Make a user for
yourself.  See the following...

CREATE USER DURING INSTALL
--------------------------
Click on "User Creation"

Full Name: Coveros User
User name: cuser

Enable it as an administrator user (check the
box) and make it not require a password (uncheck that box).

Click Done.

Wait for the install to finish...

Finally, it finishes, and you can click the button labeled "reboot".  Do so.

Once it finishes rebooting, you will see a console window waiting for
you to enter your username.  It should look similar to this:

---------------------------------------------------

CentOS Linux 7 (Core)
Kernel 3.10.0-957.el7.x86_64 on an x86_64

jenkinsbox login: _

---------------------------------------------------

First, log in as cuser.  You didn't set a password, so
you shouldn't need to enter a password for it.  It's an admin user, so
you can just run sudo <whatever> to act as root.

DISABLE FIREWALL
----------------

First, let's turn off the firewall and SELinux (its security system).
It's a pain in the rear, and remember, this is for educational
purposes, so security is *not* a concern.  Ease of use is.  

$ #turn off the firewall and disable it
$ sudo systemctl stop firewalld
$ sudo systemctl disable firewalld

DISABLE SELINUX
---------------

To disable SELinux, open /etc/selinux/config and set SELINUX mode to
disabled.  You can do that with an editor, or you can run this
command:

sudo sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config

ENABLE SSH WITH NO PASSWORD
---------------------------

Let's also change the settings on sshd (the ssh daemon) so it will
allow us to log in without a password.

sudo sed -i 's/#PermitEmptyPasswords no/PermitEmptyPasswords yes/' /etc/ssh/sshd_config

DISABLE STRICT HOST KEY CHECKING
--------------------------------

change the setting in ssh_config to not ask about host keys.  This needs to be done
because many of the conversations between our boxes will use ssh, and will halt
and ask the user if the host isn't current trusted.  Problem with that is
everything is automated, there isn't anyone to answer yes.  This should fix that.

sudo sed -i 's/#   StrictHostKeyChecking ask/StrictHostKeyChecking no/' /etc/ssh/ssh_config


now, reboot.

$ sudo reboot

You should be able to ssh into your centos box by running ssh against the url "jenkinsbox".

(if not, there may have been a mistake made when configuring the network settings.  Networking
is a real pain.)

I am using Putty, because I am on a Windows machine, but you can
use any ssh client.

Putty can be downloaded from: https://the.earth.li/~sgtatham/putty/latest/w32/putty.exe

From here on out, all commands should be run from ssh.

INSTALL JAVA
------------

$ sudo yum install java-11-openjdk-devel

INSTALL GIT
-----------

$ sudo yum -y install git

INSTALLING JENKINS
------------------

Jenkins is our tool for running continuous integration.

$ curl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo
$ sudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key
$ sudo yum install -y jenkins
$ sudo systemctl start jenkins
$ sudo systemctl enable jenkins

(after this is done, when you are notified to update the Jenkins program, just run:

$ sudo yum update jenkins

then restart the server:

$ sudo systemctl restart jenkins

In your browser, go to Jenkins at this URL: http://jenkinsbox:8080/

Once Jenkins boots up, you will need the password for the new Jenkins, here:

$ sudo cat /var/lib/jenkins/secrets/initialAdminPassword

Copy that password and use it when prompted.  Follow the prompts, install Jenkins.
Choose "Install Suggested Plugins"

I created an admin with the following characteristics:
username: admin
password: admin
email: admin@test.com

Click Save and Continue.

Click Save and Finish.
Click Start using Jenkins

Install the Sidebar-Link plugin.  Go to:

http://jenkinsbox:8080/pluginManager/available

and search for "sidebar".  Choose Sidebar Link and Install without restart.

MAKE A GIT REPO
---------------

Now that Jenkins is up and running, let's make this same box
our Git repo, so that Git can easily notify Jenkins when it
receives a push.

Back on the ssh command line...

First, go to your home directory:

$ cd

Create a directory to store the repo:

$ mkdir demo
$ cd demo

Make a "bare" git repo:

$ git init --bare

Back in the directory where you have been working with Demo, (on the other
machine) run these commands:

the following will remove the Github origin
$ git remote remove origin

this will add your new repository location as "origin":
$ git remote add origin ssh://cuser@jenkinsbox/home/cuser/demo

this will push all your branches to that repo
$ git push --set-upstream --all origin

Now, back on the jenkinsbox command line...

make our home directory accessible by the Jenkins user:
$ chmod 775 /home/cuser

Now, we want to have the ability to notify Jenkins whenever we push
to our new repo.  Jenkins has a capability of running builds whenever
a certain endpoint is hit.  But, like all things, it's not that easy because
of security considerations.  Here's the breakdown:

CONFIGURE PIPELINE TO RUN AT GIT RECEIVE
----------------------------------------

Download the command-line-interface (CLI) tool from Jenkins:

curl http://localhost:8080/jnlpJars/jenkins-cli.jar > ~/jenkins-cli.jar

Now, create the following file, at ~/demo/hooks/post-receive

------------------------ FILE START
#!/bin/sh

exec java -jar ~/jenkins-cli.jar -s http://localhost:8080/ -auth admin:admin build demo
------------------------ FILE END

make that file executable:

$ chmod 775 ~/demo/hooks/post-receive

And now we'll try running it.  Back in the browser, in Jenkins, create a new job.  Give it
the name "Demo" and make it a "pipeline" job and click OK.

Then scroll down and click save.

You should find yourself on the Pipeline page for the "demo" project.  Back in the command
line, run this to kick off a build in Jenkins:

$ ~/demo/hooks/post-receive

You should observe a new build appear in the webpage in Jenkins.  If so, you have configured
it properly.  Whenever you push a branch, it will now run Jenkins.  That's pretty close to perfect.

Now let's modify our pipeline so it does some actual work.

- In Jenkins, on the pipeline page for Demo, click on Configure.
- Check the box for "discard old builds",
    Strategy: log rotation
    Max # of builds to keep: 5
- Check the box labeled "Do not allow concurrent builds".  (We don't want race conditions
    in our pipeline, and we don't want excessive memory usage on this demo machine)
- Check the box for "Sidebar links". Add a link.  Enter this:

  Link URL: http://jenkinsbox/reports/bdd/cucumber-html-reports/overview-features.html
  Link Text: Cucumber report.

  Click Add Link.

  Link URL: http://jenkinsbox:9000/
  Link Text: SonarQube

  Click Add Link.

  Link URL: http://jenkinsbox/reports/dependency-check-report.html
  Link Text: Dependency check report

  Click Add Link.

  Link URL: http://jenkinsbox/reports/zap_report.html
  Link Text: Zap security report

- Under Pipeline, click on the dropdown and select Pipeline script from SCM.
- on the dropdown next to SCM, select Git.
- fill in these values:
     In Repositories:
     Repository URL: /home/cuser/demo
     In Branches to Build:
     Branch specifier: refs/heads/master
     In Script Path: jenkins/Jenkinsfile

     Click save

We're not quite done yet, we need to install some other parts of our system
before this will all work.  Now that our Jenkins pipeline is running, and
we have a Git repo, and we have a database running, let's throw in another application - SonarQube!

INSTALL SONARQUBE
-----------------

download it to your home directory:

$ curl https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-8.0.zip > ~/sonarqube-8.0.zip

install the unzip command:

$ sudo yum install -y unzip

make a new directory and unzip it to there
(importantly, don't do this as root.  It will fail):

$ mkdir ~/sonarqube
$ sudo unzip ~/sonarqube-8.0.zip -d ~/sonarqube/

move the directory to opt:

$ sudo mv ~/sonarqube/sonarqube-8.0 /opt/sonarqube

create a sonarqube user:

$ sudo adduser sonarqube

change the ownership of the sonarqube directory to sonarqube's user:

$ sudo chown -R sonarqube:sonarqube /opt/sonarqube

Create the file /etc/systemd/system/sonar.service with this content:

------------------------------- FILE START
[Unit]
Description=SonarQube service
After=syslog.target network.target

[Service]
Type=simple
User=sonarqube
Group=sonarqube
PermissionsStartOnly=true
ExecStart=/bin/nohup /bin/java -Xms32m -Xmx32m -Djava.net.preferIPv4Stack=true -jar /opt/sonarqube/lib/sonar-application-8.0.jar
StandardOutput=syslog
LimitNOFILE=65536
LimitNPROC=8192
TimeoutStartSec=5
Restart=always

[Install]
WantedBy=multi-user.target

------------------------------- FILE END

Start Sonarqube and register it to start at boot:

$ sudo systemctl start sonar
$ sudo systemctl enable sonar

You can view the logs for Sonarqube running at /var/log/messages.  It will take
a few minutes, but watch to see if Sonarqube is up and running.

(wait... and.. )

go to http://jenkinsbox:9000/about and check if you see the Sonarqube dashboard.

If that is up and running, let's go back to Jenkins and install a
plugin so we can run SonarQube on our code from there.  Go to:

http://jenkinsbox:8080/pluginManager/available

and search for Sonarqube in the top right.  You should see "SonarQube scanner"
as an option.  Check that on, then Install without restart.


INSTALL WEB SERVER
------------------

create and edit a new file at /etc/yum.repos.d/bintray-tatsushid-h2o-rpm.repo

-------------------- FILE START
#bintray-tatsushid-h2o-rpm - packages by tatsushid from Bintray
[bintray-tatsushid-h2o-rpm]
name=bintray-tatsushid-h2o-rpm
baseurl=https://dl.bintray.com/tatsushid/h2o-rpm/centos/$releasever/$basearch/
gpgcheck=0
repo_gpgcheck=0
enabled=1
--------------------- FILE ENDS

install it:
$ sudo yum install -y h2o

Once the installation finishes successfully, you can see a
configuration file at /etc/h2o/h2o.conf

Edit that file, make it as follows.

("file.dirlisting: ON" means that if you go to the URL
without specifying a page, it will show you the contents of the directory.)

-------------------------------------- FILE START
user: cuser
file.dirlisting: ON
hosts:
  "localhost:80":
    listen:
      port: 80
      host: 0.0.0.0
    paths:
   paths:
      "/reports":
        file.dir: /var/lib/jenkins/workspace/demo/build/reports/
access-log: /var/log/h2o/access.log
error-log: /var/log/h2o/error.log
pid-file: /var/run/h2o/h2o.pid
-------------------------------------- FILE END

The value in file.dir is meant to point to the place where we are storing the
output of our Cucumber report generation.  This way, you can view the status of
your BDD tests.

To start h2o:

$ sudo systemctl enable h2o.service
$ sudo systemctl start h2o.service

CUSTOMIZE HOSTS FILE
--------------------

Edit /etc/hosts and add a new entry to point to uitestbox:

192.168.56.102 uitestbox


CONGRATULATIONS!!!!  You're done with building the Jenkins box.  Now go over to the
document to build the ui_test_box.



================================================
FILE: docs/ci_and_cd/ssl.txt
================================================
Setting up Tomcat to use certificates

https://stackoverflow.com/a/41366949/713809
openssl req -x509 -newkey rsa:4096 -sha256 -days 8000 -nodes -keyout training.key -out training.crt -subj "/CN=training" -addext "subjectAltName=DNS:training,IP:10.0.0.1"

(Note that 8000 in the command above means 8000 days, which should keep us in business for a while)

https://tomcat.apache.org/tomcat-9.0-doc/ssl-howto.html#Configuration
openssl pkcs12 -export -in training.crt -inkey training.key -out training.p12 -name tomcat -CAfile training.crt -caname root -chain

when running this command, it will ask you for a password:
"Enter Export Password:"

(I used 3Qzyge7H31QavDANTUL3hY0d)

Whatever you enter there, you will include as the passowrd in server.xml:
    <Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"
               maxThreads="200" SSLEnabled="true"
			   scheme="https" secure="true"
			   keystoreFile="${user.home}/training.p12" keystorePass="3Qzyge7H31QavDANTUL3hY0d"
			   clientAuth="false" sslProtocol="TLS"
			   >

Once that is done, go to https://localhost:8443 in Chrome and it will complain about insecurity.  Click advanced
and go to the "unsafe" site.  When you get there, it is possible to click on the icon to the left of the URL to
get details about the cert.  On the second tab there, click on copy to file, use the default .der configuration
and save it to the desktop as cert.der

Double-click on that file on the desktop and click on Install Certificate.  Choose local machine, place all certificates
in the following store, browse, and choose Trusted Root Certification Authorities.

Restart Chrome, and try to connect to https://localhost:8443, it should work fine now.


================================================
FILE: docs/ci_and_cd/ui_test_box.txt
================================================
making a box for UI-level testing

(First create the Jenkins box.  See jenkins_box_guide.txt, then come back)

In VirtualBox, click on New.

Create a new system "uitestbox"

Make sure to choose Mac osX 64 bit for the operating system.  It's not a Mac, but for
some reason this makes mouse integration work beautifully.

Set it to use 6144 megabytes of ram and 12 gigs hard drive.

Alter its settings:
  in the network tab, for adapter 1 choose Host-only adapter, and for
  adapter 2 choose NAT.
  Put the CentOS7 disc in the virtual drive.

Start the server.

Choose to install Centos7.  (No need to check the media first)

Choose English as the language
Click Installation Destination and click Done on the followup screen to return

Click on the network & Host name icon.

This is an ***important*** section.  Take it slow.

First, change the Host name to uitestbox.

Then, toggle the enp0s8 network adapter to ON.  That's the NAT network, so it
should just automatically work.

But let's make sure it's configured properly.  Click on Configure for it,
and Under the General tab, check the box next to "Automatically connect
to this network when it is available".  Then save it.

Select the enp0s17 network adapter.  This one we have to manually configure.  Click the
[Configure...] button in the bottom right.

Under the General tab, check the box next to "Automatically connect to this network when it is available"

Click on the IPV4 Settings tab, and change the method from automatic to manual.

Click the [Add] button.  Enter the following data:
Address:          Netmask:           Gateway:
192.168.56.102    255.255.255.0      192.168.56.1

DNS Servers: 192.168.56.1

Click on the checkbox next to "Require IPV4 addressing for this connection to complete"

Click Save.

toggle this adapter from off to on.  If done correctly, it should very quickly indicate "Connected"
with some data similar to this:
Hardware address: 08:00:27:09:16:BC
Speed 1000 Mb/s
IP Address 192.168.56.102
Subnet Mask 255.255.255.0
Default Route 192.168.56.1
DNS 192.168.56.1

Phew, done!  Click Done in the top left.

Click Software selection and choose KDE Plasma Workspaces, then click Done.  After
doing that, it can take a while for the system to be done processing.  Wait.

Click Begin Installation

While it is installing, you will see options to set the root password
and create a user.  We're not too concerned about security, since this
box is just for educational purposes.  However, it won't let you
complete installation until you create a user.  Make a user for
yourself.  See the following...

CREATE USER DURING INSTALL
--------------------------
Click on "User Creation"

Full Name: Coveros User
User name: cuser

Enable it as an administrator user (check the
box) and make it not require a password (uncheck that box).

Click Done.

Wait for the install to finish...

... wait for the install to complete...

... keep waiting...

click on reboot.

Click on Licensing.  Accept.  Click Done.  Click Finish Installation.

Login.

Turn off the power saving feature (which would blank our screen).  Click the icon on
the bottom left and search for "energy", then click on Energy Saving.  Uncheck the box
for Screen Energy Saving on all tabs - AC Power, Batter, Low Battery.  In Battery and Low
Battery, uncheck "Suspend Session"

Right-click the screen and click on Konsole to get a command-line terminal.

DISABLE FIREWALL
----------------

First, let's turn off the firewall and SELinux (its security system).
It's a pain in the rear, and remember, this is for educational
purposes, so security is *not* a concern.  Ease of use is.

$ #turn off the firewall and disable it
$ sudo systemctl stop firewalld
$ sudo systemctl disable firewalld

DISABLE SELINUX
---------------

To disable SELinux, open /etc/selinux/config and set SELINUX mode to
disabled.  You can do that with an editor, or you can run this
command:

sudo sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config

ENABLE SSH WITH NO PASSWORD
---------------------------

Let's also change the settings on sshd (the ssh daemon) so it will
allow us to log in without a password.

sudo sed -i 's/#PermitEmptyPasswords no/PermitEmptyPasswords yes/' /etc/ssh/sshd_config

DISABLE STRICT HOST KEY CHECKING
--------------------------------

change the setting in ssh_config to not ask about host keys.  This needs to be done
because many of the conversations between our boxes will use ssh, and will halt
and ask the user if the host isn't current trusted.  Problem with that is
everything is automated, there isn't anyone to answer yes.  This should fix that.

sudo sed -i 's/#   StrictHostKeyChecking ask/StrictHostKeyChecking no/' /etc/ssh/ssh_config

now, reboot.

Now you can connect to your uitestbox by SSH.
Do the rest of this in ssh by connecting to "uitestbox"

Install Chrome:

 $ sudo yum install -y wget
 $ wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
 $ sudo yum localinstall -y google-chrome-stable_current_x86_64.rpm

Start Chrome by selecting it from the bottom left-hand button and entering
the text "Chrome", then click on the icon.  Choose a means of securing information,
(I used Classic, blowfish encrypted file because it was easier to set up.  Remember,
you aren't doing anything on this box but UI testing)
and get through until you see the chrome://welcome page.  Test it by going to Google.com

INSTALL JAVA
------------

$ sudo yum -y install java-11-openjdk-devel

INSTALL GIT
-----------

$ sudo yum -y install git


INSTALL PYTHON 3
----------------

$ sudo yum install -y gcc openssl-devel bzip2-devel libffi-devel
$ wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz
$ tar xzf Python-3.7.0.tgz
$ cd Python-3.7.0
$ ./configure --enable-optimizations
$ sudo make altinstall

INSTALL PIP
-----------

$ curl https://bootstrap.pypa.io/get-pip.py -o ~/get-pip.py

INSTALL PYTHON ENVIRONMENT
---------------------------

$ sudo /usr/local/bin/python3.7 ~/get-pip.py
$ sudo /usr/local/bin/pip3.7 install pipenv

Download Chromedriver from here: http://chromedriver.chromium.org/downloads.  At the
time of writing this, the URL went as follows:

$ curl https://chromedriver.storage.googleapis.com/2.45/chromedriver_linux64.zip > ~/chromedriver_linux64.zip

Download and unzip it on your path.  I recommend a place that is
already on your path, /usr/local/sbin

$ sudo unzip ~/chromedriver_linux64.zip -d /usr/local/sbin


install Tomcat 9:

$TOMCAT_URL = figure out where to download tomcat from: https://tomcat.apache.org/download-90.cgi
$TOMCAT_FILE_NAME = the name of the tomcat file

for example:
$ wget http://www.gtlib.gatech.edu/pub/apache/tomcat/tomcat-9/v9.0.14/bin/apache-tomcat-9.0.14.tar.gz
$ tar zxf apache-tomcat-9.0.14.tar.gz
$ sudo mv apache-tomcat-9.0.14 /opt/tomcat
$ sudo useradd -r tomcat --shell /bin/false
$ sudo chown -R tomcat:tomcat /opt/tomcat/

at /etc/init.d/tomcat9 create this file:


---------------------------------- FILE START
#!/bin/sh
#
### BEGIN INIT INFO
# Provides:          tomcat9
# Required-Start:    $local_fs $remote_fs $network
# Required-Stop:     $local_fs $remote_fs $network
# Should-Start:      $named
# Should-Stop:       $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start Tomcat.
# Description:       Start the Tomcat servlet engine.
### END INIT INFO

PATH=/bin:/usr/bin:/sbin:/usr/sbin
NAME=tomcat9
DESC="Tomcat servlet engine"
CATALINA_HOME=/opt/tomcat

if [ `id -u` -ne 0 ]; then
  echo "You need root privileges to run this script"
  exit 1
fi


case "$1" in
  start)
    sudo -utomcat $CATALINA_HOME/bin/startup.sh
    sleep 5
    ;;
  stop)
    sudo -utomcat $CATALINA_HOME/bin/shutdown.sh
    ;;
esac

---------------------------------- FILE END

Change its permissions
$ sudo chmod 755 /etc/init.d/tomcat9

Add it to chkconfig

$ sudo chkconfig tomcat9 on

Now you can start the Apache Tomcat 9 server and enable it to start on boot time

$ sudo systemctl start tomcat9
$ sudo systemctl enable tomcat9

Tomcat will start serving on port 8080 on the machine.

INSTALLING OWASP-ZAP
--------------------
$ wget https://download.opensuse.org/repositories/home:cabelo/CentOS_7/home:cabelo.repo
$ sudo mv home:cabelo.repo /etc/yum.repos.d/home_cabelo.repo
$ sudo yum install -y owasp-zap

Start zap like Chrome - go to the icon in the bottom left of the screen and search
for Zap.  When it appears, click it.  You'll need to accept the agreement to continue.

Choose *not* to persist the ZAP session, and check the box to remember the choice.  Then
Click on Start.

On the menu bar, under Help, click on "Check for updates..." and update as suggested.

Change the port number so it doesn't interfere with our demo application:

Open ZAP, Tools--> Options --> local proxies
Change the default 8080 port to 8888 and click Ok.

Configure Zap to run as a proxy at boot:

edit /etc/systemd/system/zap.service:

-------------- FILE START ------------------------
[Unit]
Description=Zap security proxy
After=network.target
StartLimitIntervalSec=0

[Service]
Type=simple
Restart=always
RestartSec=1
User=cuser
ExecStart=/usr/share/owasp-zap/zap.sh -daemon -config api.disablekey=true

[Install]
WantedBy=multi-user.target
-------------- FILE END ------------------------

By the way, details on creating your own systemd script can be found here: https://medium.com/@benmorel/creating-a-linux-service-with-systemd-611b5c8b91d6

In order to test out Zap, in the Quick Start tab, enter the following URL

URL to attack: http://localhost:8080/demo

Then, click Attack.

To do the same thing from the command line, run this:

/usr/share/owasp-zap/zap.sh -cmd -quickurl http://localhost:8080/demo


CUSTOMIZE HOSTS FILE
--------------------

edit the /etc/hosts and add a new entry to point to jenkinsbox:

192.168.56.101 jenkinsbox



================================================
FILE: docs/ci_and_cd/virtualbox_networking.txt
================================================
Networking on the virtual machines and the host.
------------------------------------------------

The boxes will use NAT (for regular internet) as interface 1,
and Host-Only as 2 (so we can have a conversation between the host and guests)

ON THE HOST BOX
---------------

Configure the Host-only network (on Windows, it is
named VirtualBox Host-Only Network #2, by default).

Edit the ipv4 settings and configure them as follows:

IP address: 192.168.56.2
Subnet mask: 255.255.255.0
Default gateway: 192.168.56.1

Use the following DNS server addresses:
Preferred DNS server: 192.168.56.1

edit hosts (on Windows, it's at C:\Windows\System32\drivers\etc\hosts ) and add:

192.168.56.101 jenkinsbox
192.168.56.102 uitestbox

ON THE GUEST MACHINE
------------------------------------

(the following may be helpful information if there is
an issue with the network after install is complete.  Otherwise,
this is all optional)


On the console in the jenkinsbox, I used nmtui:

$ nmtui

Edit a connection.
(It may have been necessary to create one.  If so, here are the details.
The only thing to note is that you should change the value of the "Addresses"
field - make jenkinsbox 192.168.56.101 and make uitestbox 192.168.56.102:

Profile name: host-only network
Device: 08:00:27:22:04:D9 (enp0s8)

Ethernet
IPv4 configuration <Manual>
Addresses: 192.168.56.101/24
Gateway: 192.168.56.1
DNS Server: 192.168.56.1

At the bottom, select [X] Automatically connect

Then click ok.



================================================
FILE: docs/dev_notes/README.txt
================================================
architecture.txt                  : Architectural notes of the application
monitoring_tomcat.txt             : How to monitor Tomcat with JConsole.
pre-push                          : a Git hook to run tests before pushing to a remote repo.
README_db.txt                     : Some details about the database we're using in Demo.


================================================
FILE: docs/dev_notes/architecture.txt
================================================
Architecture summary
--------------------

This is a web application with server-side rendering, used as an educational tool to discuss aspects of quality.
Database:  H2
Server: Tomcat.

Endpoints
---------

For endpoints (access to the functionality from the outside world, aka its web API), look for files
ending in the word "Servlet".

In those files, the class has annotation which includes text like this:

    urlPatterns = {"/ackermann"}

The value of the urlPattern, in this case "ackermann", designates the url that is exposed to the
outside world.  In this case, the URL for the endpoint would be:

    demo/ackermann


Persistence
-----------

The database is solely accessed from the file PersistenceLayer.java

This project uses FlywayDB https://flywaydb.org/
FlywayDB is a database migration tool - an application that runs scripts against our database
to set it into a clean and organized state.  This allows us certain benefits when working with
our database, such as:

 - It provides a more organized approach to changing the schema of the database
 - Allows for better testing of the database
 - Allows for carefully vetted changes to the database


Business functionality
----------------------

Most of the business functionality is stored in files ending with "Utils".


Avoidance of null
-----------------

Throughout this application, it was attempted to avoid null.  Null is fine and all,
but it has a problem: null is too vague a description, and it's too easy to forget to
handle the situation when something comes back null.

1) if I request a "user" from the database, and I get null ... what does that mean? Does
it mean there was no user?  That there was an error? Who knows.

2) In Java, a lot of methods return an object, and oftentimes it returns null, and it's
just so painfully easy to forget to handle what happens when it's null.


Immutability
------------

Immutable data structures are easier to track.  The basic problem with immutability
is that when it is possible for a certain data structure to be changed after creation,
it's just too easy to do so.  When a structure's state can easily change, and the code
has any parallelization or event-driven code, trying to be certain of the code's behavior
becomes quite a bit more difficult.

When we create a data structure, we favor doing so immutably - that is, once created, it cannot
be changed.  To make a change, we have to recreate the data structure.


Packages
--------

The packages are divided up by domain.  For example, the majority of code for the library is
in com.coveros.training.library.


Testing
-------

Good testing from a sincere quality perspective is crucial for high-quality applications.
There are all kinds of testing, for all kinds of quality considerations.  For example, do
you care about internal quality?  There are a number of frameworks you can apply to keep
you honest about that.  Do you care about correct functioning at the granular level? Unit
tests (especially following TDD) help out there.  What about making sure that business
requirements are carefully met?  We include BDD for that purpose - see the files in
src/bdd_test.  We also include a Jenkinsfile (called "Jenkinsfile")  for use with
Jenkins (https://www.jenkins.io/) which is a CI/CD tool.  Jenkins runs a huge slew of
tests which examine many aspects of the program, including non-functionals like
security and performance testing.


================================================
FILE: docs/dev_notes/monitoring_tomcat.txt
================================================
To monitor Tomcat with JConsole:
--------------------------------

First, in the /opt/tomcat/bin directory, add a file "setenv.sh"

Here are the contents:

export CATALINA_OPTS="$CATALINA_OPTS -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Djava.rmi.server.hostname=uitestbox";

make sure it has the proper ownership and permissions:

$ sudo chown tomcat:tomcat setenv.sh
$ sudo chmod 750 setenv.sh

restart Tomcat, and you will be able to access it from JConsole on port 9999

$ sudo systemctl restart tomcat9





================================================
FILE: docs/dev_notes/pre-push
================================================
#!/bin/sh

# This is a file meant to be run just before we push our work to
# a remote repository.  It runs the basic set of tests, just to make
# sure that things are generally valid before sending.

# To install this, put it into the git directory under hooks

# this program is expected to be run just before pushing the application to
# a remote repository.  Since that action is rare compared to commits, and because
# we want to be doubly sure of our work before sending it out, we will run
# the gradlew check command.  If that fails, we want to correct things first.

# stash all changes, including what is in the index (the staging area between
# the working directory and the repository).  This is so that when we run our
# tests, we are only testing the stuff that's fully committed to the repo
# and that is going to be sent to the central repo, since this is pre-push

git stash push -q

# run the tests with the gradle wrapper
./gradlew check

# store the last exit code in a variable
RESULT=$?

# unstash the stashed changes
git stash pop -q

# return the './gradlew check' exit code
exit $RESULT



================================================
FILE: docs/dev_notes/README_db.txt
================================================
The database we are using in the project is H2.  It's perfect for our
purposes for the following reasons:

* Stable and widely used
* Small - no install needed, can be pulled in as a dependency
* Can use Postgresql SQL syntax, so switching to Postgresql wouldn't be too hard
* Comes with all the tools you need, including a web-based db viewer

Nevertheless, there are subtleties to using H2. For example, we use it
in both in-memory and file-based modes.  

We use file-based when we need something persistent between processes.
When Tomcat is running, its process keeps going and we can access its
data through a web app on that same Tomcat.  However if we run unit
tests, the JUnit runner will wrap up and all the data is lost.  If we
want to manipulate data related to a particular test, or to create
backups of new test data, this is the easiest way.

The issue with file-based database is simple - where do we store the
database?  Users will be using this application on multiple
architectures and in multiple scenarios.  If we are running on Tomcat
and use in-memory, we simply don't have to worry about where the
database file is located.

If we are running unit tests, the database file is located in
build/db/training.mv.db



================================================
FILE: docs/performance_testing/README.txt
================================================
50_users_at_once.jmx              : A Jmeter file simulating 50 simultaneous users.
demo.jmx                          : A JMeter file to demonstrate performance testing.
perf_testing_with_jmeter.txt      : Some notes to help testing performance with JMeter.




================================================
FILE: docs/performance_testing/perf_testing_with_jmeter.txt
================================================
Demonstrating Performance testing with JMeter
---------------------------------------------

Installing Jmeter
-----------------
First and foremost, have Jmeter installed: https://jmeter.apache.org/download_jmeter.cgi
Then, install plugin manager: https://jmeter-plugins.org/wiki/PluginsManager/
  Installing plugin manager is described on the plugin's page:
  Download the Plugins Manager JAR file and put it into JMeter's lib/ext directory.
  Then start JMeter and go to "Options" menu to access the Plugins Manager.

Open up JMeter.

Open docs/demo.jmx

Open Java Mission Control (jmc) and connect to uitestbox:9999

Open putty to uitestbox and tail -f the logs/catalina.out in Tomcat

Run the test.
You should see quite a lot of action in the Tomcat logs.  While the test is running, take a look at the graphs.

One interesting thing to note is that at a certain point, close to about 80 users, the CPU starts to
max out.  At that point the response time starts going through the roof.



Alternative:
-----------

Window 1:
Prepare command line: java -jar PATH/TO/ApacheJMeter.jar -n --testfile demo.jmx

Window 2:
Open Oracle Java Mission Control (JMC)

Window 3:
Open the log file for Tomcat

Window 4:
Prepare to open the jmeter.log log file to tail it.



In JMC, show the views that show memory and cpu.  Make that clear on
the screen.

Make the logging clearly visible - move the window around to suit.

Show the Jmeter listener graph of thoroughput.


Configuring JMeter for reports
------------------------------
There's great information on the built-in report generator, at:

https://www.ubik-ingenierie.com/blog/reporting-feature-in-jmeter/

I changed a couple settings in the bin/user.properties file:

The granularity of graphs in millis (defaults to one minute):

jmeter.reportgenerator.overall_granularity=1000

The transactions you want in report:

jmeter.reportgenerator.exporter.html.series_filter=^(Search|Order)(-success|-failure)?$

You can use a helper menu to generate this last property from your plan,
Help > Export transactions for report


================================================
FILE: docs/security_testing/README.txt
================================================
zap_proxy_security_scanning.txt   : Setting up Zap to run as a proxy on the UI test server


================================================
FILE: docs/security_testing/zap_proxy_security_scanning.txt
================================================
Zap proxy for UI tests
----------------------

It's an excellent idea to have a security scanning proxy to run your UI and API tests through.  What will
happen is that the scanner will inspect everything about each request and response, and will then
be able to notify you of any issues it sees during the run.

(This assumed you have configured Zap to listen on port 9888)

In environment.py, add this import:

from selenium.webdriver.common.proxy import Proxy, ProxyType

and replace __open_browser with this:

def __open_browser(context):
    PROXY = "localhost:9888"

    proxy = Proxy()
    proxy.proxy_type = ProxyType.MANUAL
    proxy.http_proxy = PROXY
    proxy.socks_proxy = PROXY
    proxy.ssl_proxy = PROXY

    capabilities = webdriver.DesiredCapabilities.CHROME
    proxy.add_to_capabilities(capabilities)

    context.driver = webdriver.Chrome(desired_capabilities=capabilities)

Now, run Zap.

Finally, run the tests.  It will run them through that proxy and you will get a report of what it sees.


================================================
FILE: docs/ui_testing/README.txt
================================================
README_python.txt                 : Necessary instructions for getting Demo set up to run Python.
chromedriver_log.zip              : A compressed log file from Chromedriver when running our Behave UI tests
python_selenium_cheat_sheet.txt   : A cheat-sheet for driving Selenium with Python.
python_selenium_walkthrough.txt   : A walkthrough of using Selenium with Python.


================================================
FILE: docs/ui_testing/desktop_automation.txt
================================================
How to create robust application automation
-------------------------------------------

In web applications, it is possible to test using locators of our elements - locating
a particular text field or a button, then interacting with it.

Sometimes our software isn't a web application.  How do you test that?

Some of the automation frameworks for applications attempt to mimic the behavior of a
human - moving the mouse to a known position on the screen and clicking, sending
characters like a human would have done on a keyboard, and so on.

The problem with that: it results in incredibly fragile tests that require tremendous
maintenance.

Just imagine that the screen size changed.  Suddenly all the tests would be invalid,
with mouse clicks going who-knows-where.  What if the styling of the user interface
changed at all?  What a pain it would be to figure out why things weren't working
perfectly.

A much better way is to plan for automation from the start.  Yes, the developers would
have to spend extra time to develop some kind of system to enable automated testing,
but if they are on-board with the idea that testable systems lead to more tests
which leads to higher quality, then they have to understand it is an investment
worth making.

A current project with Demo is to provide this kind of robust automation for a
desktop UI application.

To start the application:
   gradlew startui

To start the scripting client:
   gradlew startscriptclient

Once they have both started, you can run commands in the script client as follows:

commands possible:
    set label <TEXT>
    set age <AGE>
    set claims <CLAIMS>

    get label
    get age
    get claims

    click calculate

    quit - quits the test script client
    close - closes down the claims application


Note: this is all still at a very rudimentary stage.


================================================
FILE: docs/ui_testing/python_selenium_cheat_sheet.txt
================================================
UI automation cheatsheet with Python and Selenium

start with these:
	from selenium import webdriver
	from selenium.webdriver.common.keys import Keys
	from hamcrest import *

to open the browser:
	driver = webdriver.Chrome()

to open a page:
	driver.get("http://localhost:8888/demo")

to select by id:
	driver.find_element_by_id("login_username")

to select using CSS:
	driver.find_element_by_css_selector("#foo")

to close the browser:
	driver.close()



actions 
-------

In all the following actions, it's assumed we have assigned
some element on the page to the "element" variable.  For example:
element = driver.find_element_by_id("login_submit")

check
	assert_that(title, contains_string('Registered Page'))

clear contents of input:
	element.clear()

click
	element.click()
	
type
	element.send_keys("somepass")
	
doubleclick
	element.double_click()
	
hover
	hover = ActionChains(firefox).move_to_element(element_to_hover_over)
	hover.perform()

keydown
	(to press ctrl+c)
	ActionChains(driver).key_down(Keys.CONTROL).send_keys('c').key_up(Keys.CONTROL).perform()
	
goback
	driver.back()
	
delete all visible cookies
	driver.delete_all_cookies()


================================================
FILE: docs/ui_testing/python_selenium_walkthrough.txt
================================================
See README.txt for preliminaries


Let's start by running our application locally, as something to test.

In a terminal window, start up the application.  In the home directory for this application, run this:
on Windows:
	gradlew apprun
on Mac/Linux:
	./gradlew apprun
	
It should return a message like this:
	$ gradlew apprun
  17:10:53 INFO  Tomcat 8.0.53 started and listening on port 8080
  17:10:53 INFO  demo runs at:
  17:10:53 INFO    http://localhost:8080/demo


Open another terminal.  Run the pipenv shell:

  pipenv shell

Then, run python:

  python

You should see something like this:
	Python 3.7.0 (v3.7.0:1bf9cc5093, Jun 27 2018, 04:06:47) [MSC v.1914 32 bit (Intel)] on win32
	Type "help", "copyright", "credits" or "license" for more information.
	>>>

Now, let's start typing some commands.
First, the boilerplate stuff so we have access to the commands we'll need:
	from selenium import webdriver
	from selenium.webdriver.common.keys import Keys
	from hamcrest import *
	
Those shouldn't return any response.  If there are errors indicated, take another look and make sure
you typed it correctly and that dependencies are resolved (you need Selenium installed for these commands to work).

Now, let's open up Chrome.
	driver = webdriver.Chrome()
	
If this went well, you should see a Chrome browser open up, and a message in your terminal
about devtools listening.  Otherwise you should see an error message in your terminal.  Make sure you
have installed Chromedriver in your path before running these commands.

Let's tell Selenium to go to our application:

	driver.get("localhost:8080/demo/library.html")
	
You should see that page show up in the browser, if you did that right.

Let's get some information about the page, like it's title.  Easy:

	>>> driver.title
	'Library'
	
Let's assert that:

	assert_that(driver.title, contains_string('Library'))

This should return nothing, indicating success.  Let's try it with something that's not there:

	>>> assert_that(driver.title, contains_string('foo'))
	...
  AssertionError:
  Expected: a string containing 'foo'
       but: was 'Web Demo'

Ah!  an error returned.
	
Let's try out adding some text to a field.  The first thing we have to do is
select the field.  There are various ways to do this, but just to jump ahead,
here's the way to select the input for the login username, and assign it to a
variable called "login_username_field"

	login_username_field = driver.find_element_by_id("login_username")
	
If that worked correctly, you shouldn't see any message returned.  We can see if we caught the element by simply typing the variable name:

	login_username_field

Which should return something like this:
<selenium.webdriver.remote.webelement.WebElement (session="5a75e46839b143d536a462131339ebcc", element="0.5216071359417056-1")>	

Let's add some text to that field:

	login_username_field.send_keys("someuser")
	
You should see the text "someuser" appear in the login username field.

Let's repeat these commands for the password field in the login form.

select the input for the login form password, and assign it to a variable called "login_password_field"

	login_password_field = driver.find_element_by_id("login_password")

Let's add some text to that field:

	login_password_field.send_keys("somepass")
	
You should see the text "********" appear in the login password field.

Now we've simulated the actions of a user typing in their username and password on a
page.  Let's try the final step, clicking on the login button.

Several of the following steps are going to seem familiar at this point.  But let's
step through them slowly and carefully.

login_button = driver.find_element_by_id("login_submit")

Now, we're going to send a click to that button:

login_button.click()

This should cause your browser to jump to another page.  In all likelihood you will
see "access denied" on the page.

Now explore around.  See python_selenium_cheat_sheet.txt for a breakdown of
common commands.


================================================
FILE: docs/ui_testing/README_python.txt
================================================
We need a few things installed before continuing here.

First, you will need Python 3.7 for your system.
Next you will need pipenv, a tool that makes it easy to get the dependencies you need.

To get pipenv:

first download get-pip.py from https://bootstrap.pypa.io/get-pip.py, and run

    python get-pip.py

Then,

    pip install pipenv

And in the demo directory,

    pipenv install

In order to run the Selenium tests with these instructions, you need Chrome and a driver for the browser.
Download Chromedriver (check http://chromedriver.chromium.org/) and make sure it's in your path or in the ui_tests directory.



================================================
FILE: docs/ui_testing/running selenium_grid.txt
================================================
To get Selenium grid: https://www.seleniumhq.org/download/


To run the hub:
---------------
java -jar selenium-server-standalone-<VERSION>.jar -role hub

To run the Chrome node:
-----------------------
java -jar selenium-server-standalone-<VERSION>.jar -role node -hub http://localhost:4444/grid/register -browser browserName=chrome,maxInstances=5

To run the Firefox node:
------------------------
java -jar selenium-server-standalone-<VERSION>.jar -port 5556 -role node -hub http://localhost:4444/grid/register -browser browserName=firefox,maxInstances=3

To run the Edge node:
---------------------
java -jar selenium-server-standalone-<VERSION>.jar -port 5557 -role node -hub http://localhost:4444/grid/register -browser browserName=edge,maxInstances=1


In order for Selenified to pay attention to the grid running locally, it is necessary to change its configuration.

In selenified.properties:
  hub=http://localhost:4444
  browser=Firefox,Chrome,Edge

Also, make sure that the webdrivers are available on the path:
  Chromedriver
  Geckodriver
  Webdriver for Edge

run:  gradlew selenified





================================================
FILE: gradle/wrapper/gradle-wrapper.properties
================================================
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-7.0-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists



================================================
FILE: jenkins/Jenkinsfile
================================================
// This jenkinsfile is used to run CI/CD on my local (Windows) box, no VM's needed.

pipeline {

  agent any

   environment {
        // This is set so that the Python API tests will recognize it
        // and go through the Zap proxy waiting at 9888
        HTTP_PROXY = 'http://127.0.0.1:9888'
   }

  stages {

    // build the war file (the binary).  This is the only
    // place that happens.
    stage('Build') {
      steps {
        sh './gradlew clean assemble'
      }
    }

    // run all the unit tests - these do not require anything else
    // to be running and most run very quickly.
    stage('Unit Tests') {
      steps {
        sh './gradlew test'
      }
      post {
        always {
          junit 'build/test-results/test/*.xml'
        }
      }
    }

    // run the tests which require connection to a
    // running database.
    stage('Database Tests') {
      steps {
        sh './gradlew integrate'
      }
      post {
        always {
          junit 'build/test-results/integrate/*.xml'
        }
      }
    }

    // These are the Behavior Driven Development (BDD) tests
    // See the files in src/bdd_test
    // These tests do not require a running system.
    stage('BDD Tests') {
      steps {
        sh './gradlew generateCucumberReports'
        // generate the code coverage report for jacoco
        sh './gradlew jacocoTestReport'
      }
      post {
          always {
            junit 'build/test-results/bdd/*.xml'
          }
        }
    }

    // Runs an analysis of the code, looking for any
    // patterns that suggest potential bugs.
    stage('Static Analysis') {
      steps {
        sh './gradlew sonarqube'
        // wait for sonarqube to finish its analysis
        sleep 5
        sh './gradlew checkQualityGate'
      }
    }


    // Move the binary over to the test environment and
    // get it running, in preparation for tests that
    // require a whole system to be running.
    stage('Deploy to Test') {
      steps {
      sh './gradlew deployToTestWindowsLocal'
      // pipenv needs to be installed and on the path for this to work.
      sh 'PIPENV_IGNORE_VIRTUALENVS=1 pipenv install'

      // Wait here until the server tells us it's up and listening
      sh './gradlew waitForHeartBeat'

      // clear Zap's memory for the incoming tests
      sh 'curl http://zap/JSON/core/action/newSession -s --proxy localhost:9888'
      }
    }


    // Run the tests which investigate the functioning of the API.
    stage('API Tests') {
      steps {
        sh './gradlew runApiTests'
      }
      post {
        always {
          junit 'build/test-results/api_tests/*.xml'
        }
      }
    }

    // We use a BDD framework for some UI tests, Behave, because Python rules
    // when it comes to experimentation with UI tests.  You can try things and see how they work out.
    // this set of BDD tests does require a running system.
    // BDD at the UI level is just to ensure that basic capabilities work,
    // not that every little detail of UI functionality is correct.  For
    // that purpose, see the following stage, "UI Tests"
    stage('UI BDD Tests') {
      steps {
        sh './gradlew runBehaveTests'
        sh './gradlew generateCucumberReport'
      }
      post {
        always {
          junit 'build/test-results/bdd_ui/*.xml'
        }
      }
    }

    // This set of tests investigates the functionality of the UI.
    // Note that this is separate fom the UI BDD Tests, which
    // only focuses on essential capability and therefore only
    // covers a small subset of the possibilities of UI behavior.
    stage('UI Tests') {
        steps {
            sh 'cd src/ui_tests/java && ./gradlew clean test'
        }
        post {
            always {
                junit 'src/ui_tests/java/build/test-results/test/*.xml'
            }
        }
    }

    // Run OWASP's "DependencyCheck". https://owasp.org/www-project-dependency-check/
    // You are what you eat - and so it is with software.  This
    // software consists of a number of software by other authors.
    // For example, for this project we use language tools by Apache,
    // password complexity analysis, and several others.  Each one of
    // these might have security bugs - and if they have a security
    // bug, so do we!
    //
    // DependencyCheck looks at the list of known
    // security vulnerabilities from the United States National Institute of
    // Standards and Technology (NIST), and checks if the software
    // we are importing has any major known vulnerabilities. If so,
    // the build will halt at this point.
    stage('Security: Dependency Analysis') {
      steps {
         sh './gradlew dependencyCheckAnalyze'
      }
    }

    // Run Jmeter performance testing https://jmeter.apache.org/
    // This test simulates 50 users concurrently using our software
    // for a set of common tasks.
    stage('Performance Tests') {
      steps {
         sh './gradlew runPerfTests'
      }
    }

    // Runs mutation testing against some subset of our software
    // as a spot test.  Mutation testing is where bugs are seeded
    // into the software and the tests are run, and we see which
    // tests fail and which pass, as a result.
    //
    // what *should* happen is that where code or tests are altered,
    // the test should fail, shouldn't it? However, it sometimes
    // happens that no matter how code is changed, the tests
    // continue to pass, which implies that the test wasn't really
    // providing any value for those lines.
    stage('Mutation Tests') {
      steps {
         sh './gradlew pitest'
      }
    }

    stage('Build Documentation') {
      steps {
         sh './gradlew javadoc'
      }
    }

    stage('Collect Zap Security Report') {
      steps {
        sh 'mkdir -p build/reports/zap'
        sh 'curl http://zap/OTHER/core/other/htmlreport --proxy localhost:9888 > build/reports/zap/zap_report.html'
      }
    }


    // This is the stage where we deploy to production.  If any test
    // fails, we won't get here.  Note that we aren't really doing anything - this
    // is a token step, to indicate whether we would have deployed or not.  Nothing actually
    // happens, since this is a demo project.
    stage('Deploy to Prod') {
      steps {
        // just a token operation while we pretend to deploy
        sh 'sleep 5'
      }
    }

  }

}



================================================
FILE: src/README.txt
================================================
Contents of the src directory
-----------------------------

application code directory
--------------------------
main             : Code for the application

test code directories
---------------------
bdd_test         : Tests that use Cucumber to test at the feature level
integration_test : Primarily tests that hit the database, but really any integration test
selenified_tests : Tests that use Selenified
test             : Unit tests
api_tests        : tests that target the API's
ui_tests         : tests that target the UI




For your information:

  Why do we split up the test directories this way?

  A few reasons.  I'll borrow some words from Petri Kainulainen
  (slightly modified from https://www.petrikainulainen.net/programming/maven/integration-testing-with-maven/)

    Adding integration tests to a build has traditionally been a bit painful. I suspect that the reason for
    this is that the standard directory layout has only one test directory (src/test).

    If we want to use the standard directory layout and add integration tests to our build, we have two options:

    First, we can add our integration tests to the same directory as our unit tests. This is an awful idea because
    integration tests and unit tests are totally different beasts and this approach forces us to mix them. Also, if
    we follow this approach, running unit tests from our IDE becomes a pain in the ass. When we run tests, our IDE
    runs all tests found from the test directory. This means that both unit and integration tests are run. If we
    are “lucky”, this means that our test suite is slower than it could be, but often this means that our integration
    tests fail every time. Not nice, huh?

    Second, we can add our integration tests to a new module. This is overkill because it forces us to transform our
    project into a multi-module project only because we want to separate our integration tests from our unit tests.
    Also, if our project is already a multi-module project, and we want to write integration tests for more than one
    module, we are screwed. Of course we can always create a separate integration test module for each tested module,
    but it would be less painful to shoot ourselves in the foot.

    It is pretty clear that both of these solutions suck.

    The requirements of our build are:

    - Integration and unit tests must have separate source directories. The src/integration-test/java directory
    must contain the source code of our integration tests and the src/test/java directory must contain the
    source code of our unit tests.

    - Integration and unit tests must have different resource directories. The src/integration-test/resources
    directory must contain the resources of our integration tests and the src/test/resources directory must
    contain the resources of our unit tests.

    - Only unit tests are run by default.

    - It must be possible to run only integration tests.

    - If an integration test fails, it must fail our build.

  We continue with this pattern for the BDD tests and the Selenified tests.


================================================
FILE: src/api_tests/README.txt
================================================
These files are used to drive the design of the Demo API through tests
written in Python.


================================================
FILE: src/api_tests/pytest.ini
================================================
# from https://docs.pytest.org/en/stable/deprecations.html#junit-family-default-value-change-to-xunit2

[pytest]
junit_family=xunit2

# If you discover that your tooling does not support the new format, and want to keep using the legacy version, set the option to legacy instead:

# [pytest]
# junit_family=legacy


================================================
FILE: src/api_tests/test_api.py
================================================
import requests

SERVER = "localhost"
URL = "http://%s:8080" % SERVER


# hitting this endpoint will reset the database.
def __reset_database():
    requests.get("%s/demo/flyway" % URL)


# adding a couple integers
def test_math_api_happy_path():
    r = requests.post("%s/demo/math" % URL, data={'item_a': '9', 'item_b': '7'})
    assert "16" in r.text


# does it handle negatives well?
def test_math_api_negative_numbers_integer():
    r = requests.post("%s/demo/math" % URL, data={'item_a': '-9', 'item_b': '-7'})
    assert "-16" in r.text


# Only handles integers.  Will fail with decimals.
def test_math_api_negative_numbers_float():
    r = requests.post("%s/demo/math" % URL, data={'item_a': '-9.1', 'item_b': '-7.1'})
    assert "Error: only accepts integers" in r.text


# does it handle zero well?
def test_math_api_with_zero():
    r = requests.post("%s/demo/math" % URL, data={'item_a': '9', 'item_b': '0'})
    assert "9" in r.text


# provide non-digits as input, should return an error message in the response.
def test_math_api_with_non_numeric():
    r = requests.post("%s/demo/math" % URL, data={'item_a': 'nine', 'item_b': 'seven'})
    assert "Error: only accepts integers" in r.text


# register with a good password
def test_register_api():
    __reset_database()
    r = requests.post("%s/demo/register" % URL, data={'username': 'alice', 'password': 'B65S3xNW8vXQHyjYnD72L3mejc'})
    assert "successfully registered: true" in r.text

# register with an empty password
def test_register_api_empty_password():
    __reset_database()
    r = requests.post("%s/demo/register" % URL, data={'username': 'alice', 'password': ''})
    assert "no password provided" in r.text

# register with an empty username
def test_register_api_empty_username():
    __reset_database()
    r = requests.post("%s/demo/register" % URL, data={'username': '', 'password': 'B65S3xNW8vXQHyjYnD72L3mejc'})
    assert "no username provided" in r.text


# register, then login
def test_login_api():
    __reset_database()
    requests.post("%s/demo/register" % URL, data={'username': 'alice', 'password': 'B65S3xNW8vXQHyjYnD72L3mejc'})
    r = requests.post("%s/demo/login" % URL, data={'username': 'alice', 'password': 'B65S3xNW8vXQHyjYnD72L3mejc'})
    assert "access granted" in r.text

# register, then login with empty username
def test_login_api_empty_username():
    __reset_database()
    requests.post("%s/demo/register" % URL, data={'username': 'alice', 'password': 'B65S3xNW8vXQHyjYnD72L3mejc'})
    r = requests.post("%s/demo/login" % URL, data={'username': '', 'password': 'B65S3xNW8vXQHyjYnD72L3mejc'})
    assert "no username provided" in r.text

# register, then login with empty password
def test_login_api_empty_password():
    __reset_database()
    requests.post("%s/demo/register" % URL, data={'username': 'alice', 'password': 'B65S3xNW8vXQHyjYnD72L3mejc'})
    r = requests.post("%s/demo/login" % URL, data={'username': 'alice', 'password': ''})
    assert "no password provided" in r.text


# test that we get the correct result if we try to register a book
def test_register_book():
    __reset_database()
    r = requests.post("%s/demo/registerbook" % URL, data={'book': 'alice in wonderland'})
    assert "SUCCESS" in r.text


# test that we get the correct result if we try to register a book that's already registered
def test_register_book_already_registered():
    __reset_database()
    requests.post("%s/demo/registerbook" % URL, data={'book': 'alice in wonderland'})
    r = requests.post("%s/demo/registerbook" % URL, data={'book': 'alice in wonderland'})
    assert "ALREADY_REGISTERED_BOOK" in r.text


# test that we get the correct result if we try to register a borrower
def test_register_borrower():
    __reset_database()
    r = requests.post("%s/demo/registerborrower" % URL, data={'borrower': 'alice'})
    assert "SUCCESS" in r.text


# test that we get the correct result if we try to register a borrower that's already registered
def test_register_borrower_already_registered():
    __reset_database()
    requests.post("%s/demo/registerborrower" % URL, data={'borrower': 'alice'})
    r = requests.post("%s/demo/registerborrower" % URL, data={'borrower': 'alice'})
    assert "ALREADY_REGISTERED_BORROWER" in r.text


# test that we can lend a book
def test_create_book_loan():
    __reset_database()
    requests.post("%s/demo/registerborrower" % URL, data={'borrower': 'alice'})
    requests.post("%s/demo/registerbook" % URL, data={'book': 'alice in wonderland'})
    r = requests.post("%s/demo/lend" % URL, data={'borrower': 'alice', 'book': 'alice in wonderland'})
    assert "SUCCESS" in r.text


# test that we get the correct result if we try to lend a book already lent.
def test_create_book_loan_already_lent():
    __reset_database()
    requests.post("%s/demo/registerborrower" % URL, data={'borrower': 'alice'})
    requests.post("%s/demo/registerbook" % URL, data={'book': 'alice in wonderland'})
    requests.post("%s/demo/lend" % URL, data={'borrower': 'alice', 'book': 'alice in wonderland'})
    r = requests.post("%s/demo/lend" % URL, data={'borrower': 'alice', 'book': 'alice in wonderland'})
    assert "BOOK_CHECKED_OUT" in r.text



================================================
FILE: src/bdd_test/README.txt
================================================
The contents of this folder provide code and documents to support a style of testing called Behavior-Driven Development (BDD).

The core aspects of this technique are:
- to use collaboration between at least the developers, testers, and business to build shared understanding
- to develop clear scenarios that help clarify user stories and better articulate the definition of done
- where possible, to consider automation for the scenarios
- builds on top of Test-Driven Development (TDD), emphasizes the essential capabilities

There are two folders here: java and resources.

Within the _resources_ directory, you will find the feature files.

In the _java_ directory, the step definitions - that is, the glue code that connects the prose in the feature
files to the actual code of the system.

Note that the different domains are separated into different directories - for example, all feature files and
step definitions related to the "library" functional domain are within the _library_ directory.


================================================
FILE: src/bdd_test/java/com/coveros/training/authentication/LoginStepDefs.java
================================================
package com.coveros.training.authentication;

import com.coveros.training.persistence.IPersistenceLayer;
import com.coveros.training.persistence.PersistenceLayer;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.Assert;

public class LoginStepDefs {

    private boolean isRegisteredUser;
    private RegistrationUtils registrationUtils = RegistrationUtils.createEmpty();
    private LoginUtils loginUtils = LoginUtils.createEmpty();
    private final IPersistenceLayer pl = new PersistenceLayer();

    /**
     * create objects for registration and login, and clear the database.
     */
    private void initializeDatabaseAccess() {
        pl.cleanAndMigrateDatabase();
        registrationUtils = new RegistrationUtils();
        loginUtils = new LoginUtils();
    }

    @Given("^\"([^\"]*)\" is registered in the system with the password \"([^\"]*)\"$")
    public void isRegisteredInSystemWithPassword(String username, String password) {
        initializeDatabaseAccess();

        registrationUtils.processRegistration(username, password);
    }

    @Then("^The system decides that they are authenticated.$")
    public void theSystemDecidesThatTheyAreAuthenticated() {
        Assert.assertTrue(isRegisteredUser);
    }

    @Then("^The system decides that they are not authenticated, because .*$")
    public void theSystemDecidesThatTheyAreNotAuthenticated() {
        Assert.assertFalse(isRegisteredUser);
    }


    @When("^when a user authenticates with \"([^\"]*)\" and \"([^\"]*)\"$")
    public void whenAUserAuthenticatesWithAnd(String username, String password) {
        isRegisteredUser = loginUtils.isUserRegistered(username, password);
    }

}



================================================
FILE: src/bdd_test/java/com/coveros/training/authentication/RegistrationStepDefs.java
================================================
package com.coveros.training.authentication;

import com.coveros.training.authentication.domainobjects.PasswordResult;
import com.coveros.training.authentication.domainobjects.RegistrationResult;
import com.coveros.training.authentication.domainobjects.RegistrationStatusEnums;
import com.coveros.training.persistence.IPersistenceLayer;
import com.coveros.training.persistence.PersistenceLayer;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.Assert;

import static com.coveros.training.authentication.domainobjects.PasswordResultEnums.INSUFFICIENT_ENTROPY;

public class RegistrationStepDefs {

    private static final RegistrationResult ALREADY_REGISTERED = new RegistrationResult(false, RegistrationStatusEnums.ALREADY_REGISTERED);
    private String myUsername = "";
    private RegistrationResult myRegistrationResult = RegistrationResult.createEmpty();
    private RegistrationUtils registrationUtils = RegistrationUtils.createEmpty();
    private PasswordResult passwordResult = PasswordResult.createEmpty();
    private final IPersistenceLayer pl = new PersistenceLayer();

    /**
     * create objects for registration and login, and clear the database.
     */
    private void initializeDatabaseAccess() {
        pl.cleanAndMigrateDatabase();
        registrationUtils = new RegistrationUtils();
    }

    // a password used that will suffice as a typical password
    private final static String TYPICAL_PASSWORD = "LpcVWwRkWSNVH";

    @Given("^a user \"([^\"]*)\" is not currently registered in the system$")
    public void aUserIsNotCurrentlyRegisteredInTheSystem(String username) {
        initializeDatabaseAccess();
        Assert.assertFalse(userIsRegistered(username));
        myUsername = username;
    }

    @When("^they register with that username and use the password \"([^\"]*)\"$")
    public void theyRegisterWithThatUsernameAndUseThePassword(String pw) {
        registrationUtils.processRegistration(myUsername, pw);
    }

    @Then("they become registered")
    public void they_become_registered() {
        registrationUtils.isUserInDatabase(myUsername);
    }

    private boolean userIsRegistered(String username) {
        return registrationUtils.isUserInDatabase(username);
    }

    @Given("^a username of \"([^\"]*)\" is registered$")
    public void aUsernameOfIsRegistered(String username) {
        initializeDatabaseAccess();
        registrationUtils.processRegistration(username, TYPICAL_PASSWORD);
        Assert.assertTrue(userIsRegistered(username));
        myUsername = username;
    }

    @When("a user tries to register with that same name")
    public void a_user_tries_to_register_with_that_same_name() {
        myRegistrationResult = registrationUtils.processRegistration(myUsername, TYPICAL_PASSWORD);
    }


    @Then("the system indicates a failure to register")
    public void the_system_indicates_a_failure_to_register() {
        Assert.assertEquals(ALREADY_REGISTERED, myRegistrationResult);
    }

    @When("^they enter their username and provide a poor password of (.*)$")
    public void theyEnterTheirUsernameAndProvideAPoorPassword(String password) {
        myRegistrationResult = registrationUtils.processRegistration(myUsername, password);
    }

    @Then("^they fail to register and the system indicates a response: (.*)$")
    public void theyFailToRegisterAndTheSystemIndicatesAResponse(String response) {
        Assert.assertTrue(myRegistrationResult.toString()
                .toLowerCase()
                .replace("_", " ")
                .contains(response));
    }

    @Given("^a user is in the midst of registering for an account$")
    public void aUserIsInTheMidstOfRegisteringForAnAccount() {
        // just a comment.  No state needs to be set up.
    }

    @When("^they try registering with the password (.*)$")
    public void theyTryRegisteringWithThePasswordPassword(String password) {
        passwordResult = RegistrationUtils.isPasswordGood(password);
    }

    @Then("the system returns that the password has insufficient entropy")
    public void theSystemReturnsThatThePasswordHasInsufficientEntropyTakingThisLongToCrackTime_to_crack() {
        Assert.assertEquals(INSUFFICIENT_ENTROPY, passwordResult.status);
    }
}



================================================
FILE: src/bdd_test/java/com/coveros/training/cartesianproduct/CartesianProductStepDefs.java
================================================
package com.coveros.training.cartesianproduct;

import io.cucumber.datatable.DataTable;
import io.cucumber.java.PendingException;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.Assert;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.StringTokenizer;

public class CartesianProductStepDefs {

    Set<Set<String>> setOfSets;
    String result;

    @Given("lists as follows:")
    public void listsAsFollows(DataTable randomLists) {
        final List<String> oldLists = randomLists.asList();
        setOfSets = new HashSet<>();

        for (int i = 0; i < oldLists.size(); i++) {
            StringTokenizer defaultTokenizer = new StringTokenizer(oldLists.get(i));
            final Set<String> tempSet = new HashSet<>();
            while (defaultTokenizer.hasMoreTokens())
            {
                tempSet.add(defaultTokenizer.nextToken());
            }
            setOfSets.add(tempSet);
        }

    }

    @When("we calculate the combinations")
    public void weCalculateTheCombinations() {
        result = CartesianProduct.calculate(setOfSets);
        throw new PendingException();
    }

    @Then("the resulting combinations should be as follows:")
    public void theResultingCombinationsShouldBeAsFollows(String expectedResults) {
        Assert.assertEquals(expectedResults, result);
    }
}



================================================
FILE: src/bdd_test/java/com/coveros/training/expenses/AlcoholStepDefs.java
================================================
package com.coveros.training.expenses;

import io.cucumber.datatable.DataTable;
import io.cucumber.java.PendingException;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.Assert;

import java.util.Map;

public class AlcoholStepDefs {

    private AlcoholResult alcoholResult;
    private DinnerPrices dinnerPrices;

    @Given("a dinner with the following prices in dollars:")
    public void aDinnerWithTheFollowingPricesInDollars(DataTable prices) {
        final Map<String, String> data = prices.asMaps().get(0);
        dinnerPrices = new DinnerPrices(
                Double.parseDouble(data.get("subtotal")),
                Double.parseDouble(data.get("food total")),
                Double.parseDouble(data.get("tip")),
                Double.parseDouble(data.get("tax")));

    }

    @When("I calculate the alcohol-related portion")
    public void iCalculateTheAlcoholRelatedPortion() {
        alcoholResult = AlcoholCalculator.calculate(dinnerPrices);
        throw new PendingException();
    }

    @Then("I get the following results:")
    public void iGetTheFollowingResults(DataTable expectedData) {
        final Map<String, String> data = expectedData.asMaps().get(0);
        AlcoholResult expectedResult = new AlcoholResult(
                Double.parseDouble(data.get("total food price")),
                Double.parseDouble(data.get("total alcohol price")),
                Double.parseDouble(data.get("food ratio")));
        Assert.assertEquals(alcoholResult, expectedResult);
    }
}



================================================
FILE: src/bdd_test/java/com/coveros/training/library/AddDeleteListSearchBooksAndBorrowersStepDefs.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.Book;
import com.coveros.training.library.domainobjects.Borrower;
import com.coveros.training.library.domainobjects.LibraryActionResults;
import com.coveros.training.library.domainobjects.Loan;
import com.coveros.training.persistence.IPersistenceLayer;
import com.coveros.training.persistence.PersistenceLayer;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.Assert;

import java.sql.Date;
import java.time.LocalDate;
import java.time.Month;
import java.util.ArrayList;
import java.util.List;

import static com.coveros.training.library.LibraryUtilsTests.generateListOfBooks;
import static com.coveros.training.library.LibraryUtilsTests.generateListOfBorrowers;
import static org.junit.Assert.assertEquals;

public class AddDeleteListSearchBooksAndBorrowersStepDefs {

    public static final String ALICE = "alice";
    public static final String DEVOPS_HANDBOOK = "devops handbook";
    private Book myBook = Book.createEmpty();
    private String myBookTitle = "";
    private Borrower myBorrower = Borrower.createEmpty();
    private String myBorrowerName = "";
    private final Date JAN_1ST = Date.valueOf(LocalDate.of(2018, Month.JANUARY, 1));
    private LibraryUtils libraryUtils = LibraryUtils.createEmpty();
    private final Date JAN_2ND = Date.valueOf(LocalDate.of(2018, Month.JANUARY, 2));
    private LibraryActionResults libraryActionResults = LibraryActionResults.NULL;
    private final IPersistenceLayer pl = new PersistenceLayer();
    private List<Book> allBooks = new ArrayList<>();
    private List<Borrower> allBorrowers = new ArrayList<>();

    /**
     * Set up the databases, clear them, initialize the Library Utility with them.
     */
    private void initializeEmptyDatabaseAndUtility() {
        pl.cleanAndMigrateDatabase();
        libraryUtils = new LibraryUtils();
    }

    @Given("a book, {string}, is not currently registered in the system")
    public void a_book_is_not_currently_registered_in_the_system(String bookTitle) {
        myBookTitle = bookTitle;
        initializeEmptyDatabaseAndUtility();
    }

    @When("a librarian registers that book")
    public void a_librarian_registers_that_book() {
        libraryActionResults = libraryUtils.registerBook(myBookTitle);
        myBook = libraryUtils.searchForBookByTitle(myBookTitle);
    }

    @Then("the system has the book registered")
    public void the_system_has_the_book_registered() {
        assertEquals(LibraryActionResults.SUCCESS, libraryActionResults);
        Assert.assertTrue(myBook.id > 0);
    }

    @Given("a book, {string}, is currently registered in the system")
    public void a_book_is_currently_registered_in_the_system(String bookTitle) {
        initializeEmptyDatabaseAndUtility();
        myBookTitle = bookTitle;
        libraryUtils.registerBook(bookTitle);
        myBook = libraryUtils.searchForBookByTitle(bookTitle);
    }

    @When("a librarian deletes that book")
    public void a_librarian_deletes_that_book() {
        myBook = new Book(1, myBookTitle);
        libraryActionResults = libraryUtils.deleteBook(myBook);
    }

    @Then("the system does not have the book registered")
    public void the_system_does_not_have_the_book_registered() {
        myBook = libraryUtils.searchForBookByTitle(myBook.title);
        Assert.assertTrue(myBook.isEmpty());
    }

    @Then("the system reports an error indicating that the book is already registered")
    public void the_system_reports_an_error_indicating_that_TheBookIsAlreadyRegistered() {
        assertEquals(LibraryActionResults.ALREADY_REGISTERED_BOOK, libraryActionResults);
    }


    @Then("the system reports an error indicating that the book cannot be deleted because it was never registered")
    public void theSystemReportsAnErrorIndicatingThatTheBookCannotBeDeletedBecauseItWasNeverRegistered() {
        assertEquals(LibraryActionResults.NON_REGISTERED_BOOK_CANNOT_BE_DELETED, libraryActionResults);
    }

    @Given("a borrower, {string}, is not currently registered in the system")
    public void a_borrower_is_not_currently_registered_in_the_system(String borrower) {
        myBorrowerName = borrower;
        initializeEmptyDatabaseAndUtility();
    }

    @When("a librarian registers that borrower")
    public void a_librarian_registers_that_borrower() {
        libraryActionResults = libraryUtils.registerBorrower(myBorrowerName);
    }

    @Then("the system has the borrower registered")
    public void the_system_has_the_borrower_registered() {
        final Borrower borrower = libraryUtils.searchForBorrowerByName(myBorrowerName);
        assertEquals(borrower.name, myBorrowerName);
        Assert.assertTrue(borrower.id > 0);
        assertEquals(LibraryActionResults.SUCCESS, libraryActionResults);
    }

    @Given("a borrower, {string}, is currently registered in the system")
    public void a_borrower_is_currently_registered_in_the_system(String borrowerName) {
        initializeEmptyDatabaseAndUtility();
        myBorrowerName = borrowerName;
        libraryActionResults = libraryUtils.registerBorrower(borrowerName);
    }

    @When("a librarian deletes that borrower")
    public void a_librarian_deletes_that_borrower() {
        final Borrower borrower = new Borrower(1, myBorrowerName);
        libraryActionResults = libraryUtils.deleteBorrower(borrower);
    }

    @Then("the system does not have the borrower registered")
    public void the_system_does_not_have_the_borrower_registered() {
        final Borrower borrower = libraryUtils.searchForBorrowerByName(myBorrowerName);
        Assert.assertTrue(borrower.isEmpty());
    }

    @Given("a library with the following books registered: a, b, c")
    public void a_library_with_the_following_books_registered() {
        initializeEmptyDatabaseAndUtility();
        libraryUtils.registerBook("a");
        libraryUtils.registerBook("b");
        libraryUtils.registerBook("c");
    }

    @When("a librarian lists all the registered books")
    public void a_librarian_lists_all_the_registered_books() {
        allBooks = libraryUtils.listAllBooks();
    }

    @Then("the whole list of books is returned")
    public void the_whole_list_of_books_is_returned() {
        final List<Book> expectedBooks = generateListOfBooks(new String[]{"a", "b", "c"});
        assertEquals(expectedBooks, allBooks);
    }

    @Then("the whole list of borrowers is returned")
    public void the_whole_list_of_borrowers_is_returned() {
        final List<Borrower> expectedBorrowers = generateListOfBorrowers(new String[]{"a", "b", "c"});
        assertEquals(expectedBorrowers, allBorrowers);
    }

    @When("a librarian searches by that title")
    public void a_librarian_searches_by_that_title() {
        myBook = libraryUtils.searchForBookByTitle(myBookTitle);
    }

    @Then("the system returns the book's full data")
    public void the_system_returns_the_books_full_data() {
        assertEquals(myBookTitle, myBook.title);
        Assert.assertTrue(myBook.id > 0);
    }

    @Then("the system returns the borrower's full data")
    public void the_system_returns_the_borrowers_full_data() {
        assertEquals(myBorrowerName, myBorrower.name);
        Assert.assertTrue(myBorrower.id > 0);
    }

    @When("a librarian searches by its id")
    public void a_librarian_searches_by_its_id() {
        myBook = libraryUtils.searchForBookById(myBook.id);
    }

    @Given("no books are registered in the system")
    public void no_books_are_registered_in_the_system() {
        initializeEmptyDatabaseAndUtility();
    }

    @When("a librarian searches for a book by id {int}")
    public void a_librarian_searches_for_a_book_by_id(Integer bookId) {
        myBook = libraryUtils.searchForBookById(bookId);
    }

    @Then("the system returns an empty result for the book")
    public void the_system_returns_an_empty_result_for_the_book() {
        Assert.assertTrue(myBook.isEmpty());
    }

    @Then("the system returns an empty result for the borrower")
    public void the_system_returns_an_empty_result_for_the_borrower() {
        Assert.assertTrue(myBorrower.isEmpty());
    }

    @When("a librarian searches for a book by title of {string}")
    public void a_librarian_searches_for_a_book_by_title_of(String bookTitle) {
        myBook = libraryUtils.searchForBookByTitle(bookTitle);
    }

    @Then("the system reports that there are no books in the system")
    public void the_system_reports_that_there_are_no_books_in_the_system() {
        Assert.assertTrue(allBooks.isEmpty());
    }

    @Given("a library with the following borrowers registered: a, b, c")
    public void a_library_with_the_following_borrowers_registered() {
        initializeEmptyDatabaseAndUtility();
        libraryUtils.registerBorrower("a");
        libraryUtils.registerBorrower("b");
        libraryUtils.registerBorrower("c");
    }

    @When("a librarian lists all the registered borrowers")
    public void a_librarian_lists_all_the_registered_borrowers() {
        allBorrowers = libraryUtils.listAllBorrowers();
    }

    @When("a librarian searches by that name")
    public void a_librarian_searches_by_that_name() {
        myBorrower = libraryUtils.searchForBorrowerByName(myBorrowerName);
    }

    @Given("no borrowers are registered in the system")
    public void no_borrowers_are_registered_in_the_system() {
        initializeEmptyDatabaseAndUtility();
    }

    @When("a librarian searches for a borrower by id {int}")
    public void a_librarian_searches_for_a_borrower_by_id(Integer id) {
        myBorrower = libraryUtils.searchForBorrowerById(id);
    }

    @Then("the system reports that there are no borrowers with that id")
    public void the_system_reports_that_there_are_no_borrowers_with_that_id() {
        Assert.assertTrue(myBorrower.isEmpty());
    }

    @When("a librarian searches for a borrower by name of {string}")
    public void a_librarian_searches_for_a_borrower_by_name_of(String name) {
        myBorrower = libraryUtils.searchForBorrowerByName(name);
    }

    @Then("the system reports that there are no borrowers found with that name")
    public void the_system_reports_that_there_are_no_borrowers_found_with_that_name() {
        Assert.assertTrue(myBorrower.isEmpty());
    }

    @When("a librarian lists all the borrowers")
    public void a_librarian_lists_all_the_borrowers() {
        allBorrowers = libraryUtils.listAllBorrowers();
    }

    @Then("the system returns an empty list of borrowers")
    public void the_system_returns_an_empty_list_of_borrowers() {
        Assert.assertTrue(allBorrowers.isEmpty());
    }

    @Then("the system reports an error indicating that the borrower is already registered")
    public void the_system_reports_an_error_indicating_that_the_borrower_is_already_registered() {
        assertEquals(LibraryActionResults.ALREADY_REGISTERED_BORROWER, libraryActionResults);
    }

    @Then("the system reports an error indicating that the borrower cannot be deleted because he or she was never registered")
    public void the_system_reports_an_error_indicating_that_the_borrower_cannot_be_deleted_because_he_or_she_was_never_registered() {
        assertEquals(LibraryActionResults.NON_REGISTERED_BORROWER_CANNOT_BE_DELETED, libraryActionResults);
    }

    @When("a librarian searches by that id")
    public void a_librarian_searches_by_that_id() {
        final Borrower tempBorrower = libraryUtils.searchForBorrowerByName(myBorrowerName);
        myBorrower = libraryUtils.searchForBorrowerById(tempBorrower.id);
    }

    @Given("a book, {string}, is currently loaned out")
    public void aBookIsCurrentlyLoanedOut(String bookTitle) {
        initializeEmptyDatabaseAndUtility();
        libraryUtils.registerBorrower(ALICE);
        libraryUtils.registerBook(bookTitle);
        myBookTitle = bookTitle;
        libraryUtils.lendBook(bookTitle, ALICE, JAN_1ST);
    }

    @Given("a book is currently loaned out to {string}")
    public void aBookIsCurrentlyLoanedOutTo(String borrowerName) {
        initializeEmptyDatabaseAndUtility();
        libraryUtils.registerBorrower(borrowerName);
        myBorrowerName = borrowerName;
        libraryUtils.registerBook(DEVOPS_HANDBOOK);
        libraryUtils.lendBook(DEVOPS_HANDBOOK, borrowerName, JAN_1ST);
    }

    @Given("a book is loaned to {string}")
    public void aBookIsLoanedTo(String borrowerName) {
        myBorrowerName = borrowerName;
        initializeEmptyDatabaseAndUtility();
        libraryUtils.registerBook(DEVOPS_HANDBOOK);
        libraryUtils.registerBorrower(borrowerName);
        libraryUtils.lendBook(DEVOPS_HANDBOOK, borrowerName, JAN_2ND);
        myBook = libraryUtils.searchForBookByTitle(DEVOPS_HANDBOOK);
    }

    @Then("the loan is deleted as well")
    public void theLoanIsDeletedAsWell() {
        final Loan loan = libraryUtils.searchForLoanByBook(myBook);
        Assert.assertTrue(loan.isEmpty());
    }

    @Given("a book, {string}, is loaned out")
    public void aBookIsLoanedOut(String bookTitle) {
        initializeEmptyDatabaseAndUtility();
        myBookTitle = bookTitle;
        libraryUtils.registerBook(myBookTitle);
        libraryUtils.registerBorrower(ALICE);
        libraryUtils.lendBook(bookTitle, ALICE, JAN_1ST);
    }

    @Given("some books are checked out")
    public void some_books_are_checked_out() {
        initializeEmptyDatabaseAndUtility();
        // register a, b, and c
        libraryUtils.registerBook("a");
        libraryUtils.registerBook("b");
        libraryUtils.registerBook("c");
        libraryUtils.registerBorrower("someone");

        // loan out b
        libraryUtils.lendBook("b", "someone", JAN_1ST);
    }

    @When("a librarian lists the available books")
    public void a_librarian_lists_the_available_books() {
        allBooks = libraryUtils.listAvailableBooks();
    }

    @Then("the system responds with only the available books")
    public void the_system_responds_with_only_the_available_books() {
        List<Book> expectedBooks = new ArrayList<>();
        expectedBooks.add(new Book(1, "a"));
        expectedBooks.add(new Book(3, "c"));
        assertEquals(expectedBooks, allBooks);
    }
}



================================================
FILE: src/bdd_test/java/com/coveros/training/library/BookCheckOutStepDefs.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.Book;
import com.coveros.training.library.domainobjects.Borrower;
import com.coveros.training.library.domainobjects.LibraryActionResults;
import com.coveros.training.library.domainobjects.Loan;
import com.coveros.training.persistence.IPersistenceLayer;
import com.coveros.training.persistence.PersistenceLayer;
import io.cucumber.java.en.And;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.Assert;

import java.sql.Date;
import java.time.LocalDate;
import java.time.Month;
import java.time.format.DateTimeFormatter;
import java.util.List;

public class BookCheckOutStepDefs {

    public static final String ANOTHER_BOOK = "another book";
    private Book myBook = Book.createEmpty();
    private String myBookTitle = "";
    private String myBorrowerName = "";
    private Borrower myBorrower = Borrower.createEmpty();
    private final Date JAN_1ST = Date.valueOf(LocalDate.of(2018, Month.JANUARY, 1));
    private LibraryUtils libraryUtils = LibraryUtils.createEmpty();
    private final Date JAN_2ND = Date.valueOf(LocalDate.of(2018, Month.JANUARY, 2));
    private LibraryActionResults libraryActionResults = LibraryActionResults.NULL;
    private final IPersistenceLayer pl = new PersistenceLayer();

    /**
     * Set up the databases, clear them, initialize the Library Utility with them.
     */
    private void initializeEmptyDatabaseAndUtility() {
        pl.cleanAndMigrateDatabase();
        libraryUtils = new LibraryUtils();
    }

    @Given("^a borrower, \"([^\"]*)\", is registered$")
    public void aBorrowerIsRegistered(String borrowerName) {
        initializeEmptyDatabaseAndUtility();

        libraryUtils.registerBorrower(borrowerName);
        myBorrower = libraryUtils.searchForBorrowerByName(borrowerName);
    }

    @And("^a book, \"([^\"]*)\" is available for borrowing$")
    public void aBookIsAvailableForBorrowing(String title) {
        libraryUtils.registerBook(title);
        myBook = libraryUtils.searchForBookByTitle(title);
    }

    @When("^they try to check out the book on \"([^\"]*)\"$")
    public void theyTryToCheckOutTheBookOn(String date) {
        Date borrowTime = Date.valueOf(LocalDate.parse(date, DateTimeFormatter.ofPattern("MMMM dd, yyyy")));
        libraryUtils.lendBook(myBook, myBorrower, borrowTime);
    }

    @Then("^the system indicates the book is loaned to them on that date$")
    public void theSystemIndicatesTheBookIsLoanedToThemOnThatDate() {
        final Loan loan = libraryUtils.searchForLoanByBook(myBook);
        Assert.assertEquals(Date.valueOf("2018-01-31"), loan.checkoutDate);
    }

    @When("^they try to check out the book$")
    public void theyCheckOutTheBook() {
        libraryUtils.lendBook(myBook, myBorrower, JAN_2ND);
    }

    @Then("^the system indicates the book is loaned to them on some date$")
    public void theSystemIndicatesTheBookIsLoanedToThemOnSomeDate() {
        final Loan loan = libraryUtils.searchForLoanByBook(myBook);
        Assert.assertEquals(Date.valueOf("2018-01-31"), loan.checkoutDate);
    }

    @Given("^an individual, \"([^\"]*)\", is not registered$")
    public void anIndividualIsNotRegistered(String borrower) {
        initializeEmptyDatabaseAndUtility();
    }

    @When("^they try to check out a book, \"([^\"]*)\" that is available$")
    public void theyTryToCheckOutABookThatIsAvailable(String title) {
        libraryUtils.registerBook(title);
        myBook = libraryUtils.searchForBookByTitle(title);

        libraryActionResults = libraryUtils.lendBook(myBook, myBorrower, JAN_2ND);
    }

    @Then("^the system indicates that they are not registered$")
    public void theSystemIndicatesThatHeIsNotRegistered() {
        Assert.assertEquals(LibraryActionResults.BORROWER_NOT_REGISTERED, libraryActionResults);
    }

    @Given("^and a book, \"([^\"]*)\" is already checked out to \"([^\"]*)\"$")
    public void andABookIsAlreadyCheckedOutTo(String title, String borrower_b) {
        libraryUtils.registerBorrower(borrower_b);
        libraryUtils.registerBook(title);
        final Book book = libraryUtils.searchForBookByTitle(title);
        final Borrower borrower = libraryUtils.searchForBorrowerByName(borrower_b);

        // a previous person already checked it out.
        libraryUtils.lendBook(book, borrower, JAN_1ST);

        // now we try to check it out.  It should indicate BOOK_CHECKED_OUT.
        libraryActionResults = libraryUtils.lendBook(book, myBorrower, JAN_2ND);
    }

    @Then("^the system indicates that the book is not available$")
    public void theSystemIndicatesThatTheBookIsNotAvailable() {
        Assert.assertEquals(LibraryActionResults.BOOK_CHECKED_OUT, libraryActionResults);
    }

    @Given("a borrower, {string}, has one book, {string}, already borrowed")
    public void a_borrower_has_one_book_already_borrowed(String borrowerName, String bookTitle) {
        initializeEmptyDatabaseAndUtility();
        myBookTitle = bookTitle;
        myBorrowerName = borrowerName;
        libraryUtils.registerBook(myBookTitle);
        libraryUtils.registerBorrower(borrowerName);
        libraryUtils.lendBook(bookTitle, borrowerName, JAN_1ST);
    }

    @When("they borrow another book")
    public void they_borrow_another_book() {
        libraryUtils.registerBook(ANOTHER_BOOK);
        libraryUtils.lendBook(ANOTHER_BOOK, myBorrowerName, JAN_1ST);
    }

    @Then("they have two books currently borrowed")
    public void they_have_two_books_currently_borrowed() {
        final Borrower borrower = libraryUtils.searchForBorrowerByName(myBorrowerName);
        final List<Loan> loans = libraryUtils.searchForLoanByBorrower(borrower);
        Assert.assertEquals(2, loans.size());
    }

    @When("another borrower, {string} tries to borrow that book")
    public void another_borrower_tries_to_borrow_that_book(String string) {
        libraryUtils.registerBorrower("someone else");
        libraryActionResults = libraryUtils.lendBook(myBookTitle, "someone else", JAN_1ST);
    }

    @Then("they cannot borrow it because it is already checked out")
    public void they_cannot_borrow_it_because_it_is_already_checked_out() {
        Assert.assertEquals(LibraryActionResults.BOOK_CHECKED_OUT, libraryActionResults);
    }


}



================================================
FILE: src/bdd_test/java/com/coveros/training/math/AckermannStepDefs.java
================================================
package com.coveros.training.math;

import com.coveros.training.mathematics.Ackermann;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.Assert;

import java.math.BigInteger;

public class AckermannStepDefs {

    private BigInteger result;

    @When("I calculate Ackermann's formula using {int} and {int}")
    public void i_calculate_ackermann_s_formula_using_and(int m, int n) {
        result = Ackermann.calculate(m, n);
    }

    @Then("the Ackermann result is {int}")
    public void i_get(int expected) {
        final BigInteger bigExpected = BigInteger.valueOf(expected);
        Assert.assertEquals(bigExpected, result);
    }

}



================================================
FILE: src/bdd_test/java/com/coveros/training/math/FibonacciStepDefs.java
================================================
package com.coveros.training.math;

import com.coveros.training.mathematics.Fibonacci;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.Assert;

public class FibonacciStepDefs {

    private long result;

    @When("I calculate the {int} Fibonacci number")
    public void i_calculate_the(Integer nth_fibonacci_number) {
        result = Fibonacci.calculate(nth_fibonacci_number);
    }

    @Then("the Fibonacci result is {long}")
    public void iGetResult(long expected_result) {
        Assert.assertEquals(expected_result, result);
    }
}



================================================
FILE: src/bdd_test/java/com/coveros/training/math/MathStepDefs.java
================================================
package com.coveros.training.math;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import org.junit.Assert;

public class MathStepDefs {

    private int calculated_total;

    @Given("^my website is running and can do math$")
    public void myWebsiteIsRunningAndCanDoMath() {
        // just a comment.  No state to set up.
    }

    @When("I add {int} to {int}")
    public void i_add_to(int num1, int num2) {
        calculated_total = num1 + num2;
    }

    @Then("the result should be {int}")
    public void the_result_should_be(int total) {
        Assert.assertEquals(total, calculated_total);
    }

}



================================================
FILE: src/bdd_test/resources/authentication/login_user.feature
================================================
Feature: A user may login to the system.

    As a registered user of the system,
    I want to be able to login,
    so I can access the system's capabilities.

    # See register_user.feature for the registration portion of authentication

    Scenario: Entering proper credentials authenticates a user to the system.
        Given "adam" is registered in the system with the password "LpcVWwRkWSNVH"
        When when a user authenticates with "adam" and "LpcVWwRkWSNVH"
        Then The system decides that they are authenticated.

    Scenario Outline: Entering invalid credentials fails to authenticate a user to the system.
        Given "adam" is registered in the system with the password "LpcVWwRkWSNVH"
        When when a user authenticates with "<username>" and "<password>"
        Then The system decides that they are not authenticated, because <note>
        Examples:
            | username | password      | note                                        |
            | adam     | lpcvwwrkwsnvh | the password is correct, but all lower-case |
            | adamee   | LpcVWwRkWSNVH | we used an incorrect username               |
            | adam     | LpcVWwR       | we used a shortened version of the password |
            | ALICE    | LpcVWwRkWSNVH | the username was made all upper-case        |


================================================
FILE: src/bdd_test/resources/authentication/register_user.feature
================================================
Feature: A user may register themselves to the system.

    As a potential user of the system,
    I want to be able to register myself,
    so that I can subsequently login to the system

#    Narrative: A user wants to access the system, but they can only do it if they have
#    an account on it.  To register an account, they simply provide
#    a username and a password.  The password should be sufficiently complex, and the
#    username must not have already been registered.  Later, when they want to
#    authenticate themselves, they must enter that same username and password.

    Scenario: A user registers themselves to the system with a good password
        Given a user "adam" is not currently registered in the system
        When they register with that username and use the password "lpcvwwrkwsnvh"
        Then they become registered

    Scenario Outline: A user might try different passwords, but we are making sure they are excellent before we allow it.
        Given a user is in the midst of registering for an account
        When they try registering with the password <password>
        Then the system returns that the password has insufficient entropy
        Examples:
            | password                |
            | typical_password_123    |
            | aaaaaaaaaa              |
            | password123             |
            | really_totally_long     |

    Scenario Outline: A user is unable to register due to blatantly bad password
        Given a user "adam" is not currently registered in the system
        When they enter their username and provide a poor password of <password>
        Then they fail to register and the system indicates a response: <response>
        Examples:
            | password | response       |
            | a        | too short      |
            | 123      | too short      |
            | aaaaa    | too short      |

    Scenario: A user is unable to register due to the username already existing
        Given a username of "adam" is registered
        When a user tries to register with that same name
        Then the system indicates a failure to register



================================================
FILE: src/bdd_test/resources/cartesianproduct/cartesianproduct.feature
================================================
Feature: Allow a user to generate a cartesian product from lists

    As a tester
    I want to calculate all combinations of items from multiple lists
    so that I can create a decision table to test all inputs

#    Narrative: a testing technique is to come up with all combinations of inputs
#    to a system in order to verify that all possibilities are accounted for.  Once
#    you have more than a couple inputs to consider, calculating all the combinations
#    is a tedious practice, which could easily lead to missing certain combinations.
#    This calculator will produce the correct result.

    Scenario: happy path - a typical set of lists
        Given lists as follows:
            | list    |
            | a,b     |
            | 1,2,3,4 |
            | e,f     |
        When we calculate the combinations
        Then the resulting combinations should be as follows:
            """
            (a, 1, e), (a, 1, f), (a, 2, e), (a, 2, f),
            (a, 3, e), (a, 3, f), (a, 4, e), (a, 4, f),
            (b, 1, e), (b, 1, f), (b, 2, e), (b, 2, f),
            (b, 3, e), (b, 3, f), (b, 4, e), (b, 4, f)
            """


================================================
FILE: src/bdd_test/resources/expenses/alcohol.feature
================================================
Feature: calculating the portion of a restaurant check that is alcohol-related

    As someone entering an expense at a restaurant
    I want to be able to precisely calculate the amount of the check for the alcohol
    So that I can divide up the check as required when entering expenses

#    Narrative: When entering an expense at a restaurant, government guidelines require
#    that the expense is split up precisely between food and alcohol.  This is not
#    as straightforward as you might immediately think.  For example if the bill is
#    for $50 and you spent $7 on a beer, the expense isn't just $7 for the beer, it
#    also has to consider the alcohol portion of the tip and tax.

    Scenario: Ordering a beer with dinner
        Given a dinner with the following prices in dollars:
            | subtotal | food total | tip | tax  |
            | 33.47    | 24.48      | 7   | 3.99 |
        When I calculate the alcohol-related portion
        Then I get the following results:
            | total food price | total alcohol price | food ratio |
            | 32.52            | 11.94               | 0.7314     |



================================================
FILE: src/bdd_test/resources/library/add_and_delete_books.feature
================================================
Feature: Librarians may add and delete books

    As a librarian,
    I want to be able to add and delete books,
    So that I have control over the inventory of my library

    Scenario: Can successfully add a book
        Given a book, "The DevOps Handbook", is not currently registered in the system
        When a librarian registers that book
        Then the system has the book registered

    Scenario: Can successfully remove a book
        Given a book, "The DevOps Handbook", is currently registered in the system
        When a librarian deletes that book
        Then the system does not have the book registered

    Scenario: Cannot add a book that already exists
        Given a book, "The DevOps Handbook", is currently registered in the system
        When a librarian registers that book
        Then the system reports an error indicating that the book is already registered

    Scenario: Cannot remove a book that doesn't exist
        Given a book, "The DevOps Handbook", is not currently registered in the system
        When a librarian deletes that book
        Then the system reports an error indicating that the book cannot be deleted because it was never registered

    Scenario: Can delete a book that is loaned out
        Given a book, "The DevOps Handbook", is currently loaned out
        When a librarian deletes that book
        Then the system does not have the book registered

    Scenario: If a book is deleted, then related loans are as well
        Given a book, "The DevOps Handbook", is loaned out
        When a librarian deletes that book
        Then the loan is deleted as well






================================================
FILE: src/bdd_test/resources/library/add_and_delete_borrowers.feature
================================================
Feature: Librarians may add and delete borrowers

    As a librarian,
    I want to be able to add and delete borrowers,
    So that I have control over who is allowed to borrow from the library

    Scenario: Can successfully add a borrower
        Given a borrower, "alice", is not currently registered in the system
        When a librarian registers that borrower
        Then the system has the borrower registered

    Scenario: Can successfully remove a borrower
        Given a borrower, "alice", is currently registered in the system
        When a librarian deletes that borrower
        Then the system does not have the borrower registered

    Scenario: Cannot add a borrower that already exists
        Given a borrower, "alice", is currently registered in the system
        When a librarian registers that borrower
        Then the system reports an error indicating that the borrower is already registered

    Scenario: Cannot remove a borrower that doesn't exist
        Given a borrower, "alice", is not currently registered in the system
        When a librarian deletes that borrower
        Then the system reports an error indicating that the borrower cannot be deleted because he or she was never registered

    Scenario: Can delete a borrower that has a loan
        Given a book is currently loaned out to "alice"
        When a librarian deletes that borrower
        Then the system does not have the borrower registered

     Scenario: If a borrower is deleted, then their loan is too
         Given a book is loaned to "alice"
         When a librarian deletes that borrower
         Then the loan is deleted as well





================================================
FILE: src/bdd_test/resources/library/check_out_a_book.feature
================================================
Feature: A librarian may lend a book from the library

    As a librarian,
    I would like to lend a book
    so that patrons may enjoy it outside the library.

#    Narrative: A county library system has many books available for borrowing.  If you
#    live in that county, and you have registered for a library card, you are able
#    to borrow books.  The system shall provide the capability to lend out books.
#    The librarians are in control of lending out books.

    Scenario: A registered patron checks out a book
        Given a borrower, "alice", is registered
        And a book, "Specification By Example" is available for borrowing
        When they try to check out the book on "January 31, 2018"
        Then the system indicates the book is loaned to them on that date

    Scenario: A non-registered person should not be able to borrow a book
        Given an individual, "bob", is not registered
        When they try to check out a book, "BDD in Action" that is available
        Then the system indicates that they are not registered

    Scenario: A registered borrower cannot borrow a non-available book
        Given a borrower, "alice", is registered
        And and a book, "Specification By Example" is already checked out to "bob"
        When they try to check out the book
        Then the system indicates that the book is not available

    Scenario: a borrower can borrow more than one book
        Given a borrower, "alice", has one book, "The DevOps Handbook", already borrowed
        When they borrow another book
        Then they have two books currently borrowed

    Scenario: a book can only be loaned to one person
        Given a borrower, "alice", has one book, "The DevOps Handbook", already borrowed
        When another borrower, "bob" tries to borrow that book
        Then they cannot borrow it because it is already checked out




================================================
FILE: src/bdd_test/resources/library/list_and_search_books.feature
================================================
Feature: Librarians may list and search books

    As a librarian,
    I want to be able to list and search books,
    So that I can review the inventory of my library

    Scenario: Can list all the books
        Given a library with the following books registered: a, b, c
        When a librarian lists all the registered books
        Then the whole list of books is returned

    Scenario: Can search a book by title
        Given a book, "The DevOps Handbook", is currently registered in the system
        When a librarian searches by that title
        Then the system returns the book's full data

    Scenario: Can search a book by id
        Given a book, "The DevOps Handbook", is currently registered in the system
        When a librarian searches by its id
        Then the system returns the book's full data

    Scenario: Should return an empty result if search by id finds nothing
        Given no books are registered in the system
        When a librarian searches for a book by id 1
        Then the system returns an empty result for the book

    Scenario: Should return an empty result if search by title finds nothing
        Given no books are registered in the system
        When a librarian searches for a book by title of "The DevOps Handbook"
        Then the system returns an empty result for the book

    Scenario: Receive an appropriate message if listing all books, but no books in library
        Given no books are registered in the system
        When a librarian lists all the registered books
        Then the system reports that there are no books in the system

    Scenario: Can obtain a list of available books
        Given some books are checked out
        When a librarian lists the available books
        Then the system responds with only the available books






================================================
FILE: src/bdd_test/resources/library/list_and_search_borrowers.feature
================================================
Feature: Librarians may list and search borrowers

    As a librarian,
    I want to be able to list and search borrowers,
    So that I can review the borrowers of my library

    Scenario: Can list all the borrowers
        Given a library with the following borrowers registered: a, b, c
        When a librarian lists all the registered borrowers
        Then the whole list of borrowers is returned

    Scenario: Can search a borrower by name
        Given a borrower, "alice", is currently registered in the system
        When a librarian searches by that name
        Then the system returns the borrower's full data

    Scenario: Can search a borrower by id
        Given a borrower, "alice", is currently registered in the system
        When a librarian searches by that id
        Then the system returns the borrower's full data

    Scenario: Should return an empty result if search by id finds nothing
        Given no borrowers are registered in the system
        When a librarian searches for a borrower by id 1
        Then the system returns an empty result for the borrower

    Scenario: Should return an empty result if search by title finds nothing
        Given no borrowers are registered in the system
        When a librarian searches for a borrower by name of "alice"
        Then the system returns an empty result for the borrower

    Scenario: Receive an appropriate message if listing all borrowers, but no borrowers in library
        Given no borrowers are registered in the system
        When a librarian lists all the borrowers
        Then the system returns an empty list of borrowers




================================================
FILE: src/bdd_test/resources/math/ackerman.feature
================================================
Feature: Calculation of Ackermann's function

    As a cool computer kid
    I want to calculate the result of Ackermann's function for various values
    So that I can see an early example of a total computable function

    Narrative:
        from Wikipedia (https://en.wikipedia.org/wiki/Ackermann_function)
        In computability theory, the Ackermann function, named after Wilhelm Ackermann, is one of the simplest
        and earliest-discovered examples of a total computable function that is not primitive recursive. All primitive
        recursive functions are total and computable, but the Ackermann function illustrates that not all total
        computable functions are primitive recursive.

        After Ackermann's publication[2] of his function (which had three nonnegative integer arguments), many
        authors modified it to suit various purposes, so that today "the Ackermann function" may refer to any
        of numerous variants of the original function.

        from Rosetta Code (https://rosettacode.org/wiki/Ackermann_function)
        The Ackermann function is a classic example of a recursive function, notable especially because it
        is not a primitive recursive function. It grows very quickly in value, as does the size of its call tree.

    Scenario Outline: I should be able to calculate a few results per Ackermann's formula
        When I calculate Ackermann's formula using <m> and <n>
        Then the Ackermann result is <result>
        Examples:
          |  m    |    n        |     result    |
          |  0    |    0        |       1       |
          |  1    |    1        |       3       |
          |  1    |    2        |       4       |


================================================
FILE: src/bdd_test/resources/math/Fibonacci.feature
================================================
Feature: Calculation of Fibonacci numbers

    As an aspiring mathematically-oriented beekeeper
    I want to be able to calculate Fibonacci numbers
    So that I can count the idealized number of honeybees in my hive

    Narrative:
        from Wikipedia (https://en.wikipedia.org/wiki/Fibonacci_number)
        Fibonacci numbers are strongly related to the golden ratio: Binet's formula expresses the nth Fibonacci
        number in terms of n and the golden ratio, and implies that the ratio of two consecutive Fibonacci numbers
        tends to the golden ratio as n increases.

        Fibonacci numbers are named after Italian mathematician Leonardo of Pisa, later known as Fibonacci. They appear
        to have first arisen as early as 200 BC in work by Pingala on enumerating possible patterns of poetry formed
        from syllables of two lengths. In his 1202 book Liber Abaci, Fibonacci introduced the sequence to Western
        European mathematics,[6] although the sequence had been described earlier in Indian mathematics.[7][8][9]

        Fibonacci numbers appear unexpectedly often in mathematics, so much so that there is an entire journal
        dedicated to their study, the Fibonacci Quarterly. Applications of Fibonacci numbers include computer
        algorithms such as the Fibonacci search technique and the Fibonacci heap data structure, and graphs called
        Fibonacci cubes used for interconnecting parallel and distributed systems.

        They also appear in biological settings, such as branching in trees, the arrangement of leaves on a stem,
        the fruit sprouts of a pineapple, the flowering of an artichoke, an uncurling fern and the arrangement
        of a pine cone's bracts.

    Scenario Outline: Calculating some Fibonacci numbers
        When I calculate the <nth> Fibonacci number
        Then the Fibonacci result is <result>
        Examples:
        |   nth                    |    result       |
        |           0              |      0          |
        |           1              |      1          |
        |           2              |      1          |
        |           3              |      2          |
        |           20             |      6765       |


================================================
FILE: src/bdd_test/resources/math/math.feature
================================================
Feature: Adding of numbers

    As a user who has trouble with doing math in their head,
    I want to add some numbers
    so I know the sums

    Scenario Outline: Add two numbers <num1> and <num2>
        Given my website is running and can do math
        When I add <num1> to <num2>
        Then the result should be <total>
        Examples:
            | num1 | num2 | total |
            | 2    | 3    | 5     |
            | 9    | 6    | 15    |
            | 2    | -3   | -1    |




================================================
FILE: src/integration_test/java/com/coveros/training/persistence/PersistenceLayerTests.java
================================================
package com.coveros.training.persistence;

import com.coveros.training.library.domainobjects.Book;
import com.coveros.training.library.domainobjects.Borrower;
import com.coveros.training.library.domainobjects.Loan;
import com.coveros.training.authentication.domainobjects.User;
import org.h2.jdbcx.JdbcConnectionPool;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.sql.DataSource;
import java.sql.*;
import java.time.LocalDate;
import java.time.Month;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.when;

/**
 * Test that we have a persistence layer that we can easily mock out.
 * This exists so we can have more control over the persistence process,
 * whether we want to mock those sections, and so on.
 */
public class PersistenceLayerTests {

    private final static String DEFAULT_NAME = "alice";
    private final static Date BORROW_DATE = Date.valueOf(LocalDate.of(2018, Month.JANUARY, 1));
    private static final Book DEFAULT_BOOK = new Book(1, "The DevOps Handbook");
    private static final Borrower DEFAULT_BORROWER = new Borrower(1, DEFAULT_NAME);
    private static final Loan DEFAULT_LOAN = new Loan(DEFAULT_BOOK, DEFAULT_BORROWER, 1, BORROW_DATE);
    private static final User DEFAULT_USER = new User(DEFAULT_NAME, 1);
    IPersistenceLayer pl;

    @Before
    public void initDatabase() {
        pl = new PersistenceLayer(getFileBasedDatabaseConnectionPool());
    }

    /**
     * assert that there is a way to store a borrower
     * in a database.  We don't actually care how this happens,
     * we just care that it exists.  Here we're adding a
     * brand-spanking-new borrower.
     */
    @Test
    public void testShouldSaveBorrowerToDatabase() {
        pl.cleanAndMigrateDatabase();

        long id = pl.saveNewBorrower(DEFAULT_BORROWER.name);

        assertEquals("The first row in a database gets an index of 1", 1, id);
    }

    /**
     * We ought to be able to update a borrower's details,
     * if we know that borrower's id and we have a detail we
     * want to change.
     */
    @Test
    public void testShouldUpdateBorrowerToDatabase() {
        // the borrower with id of 1 is "alice"
        runRestoreOneBookOneBorrower();
        final String newName = "bob";

        // change the borrower's name
        pl.updateBorrower(1, newName);

        String name = pl.getBorrowerName(1).orElseThrow();
        assertEquals(newName, name);
    }

    /**
     * If a borrower is in the database, we should be able
     * to find that person by their name
     */
    @Test
    public void testShouldBeAbleToSearchBorrowerByName() {
        runRestoreOneBookOneBorrower();

        Borrower borrower = pl.searchBorrowerDataByName(DEFAULT_BORROWER.name).orElseThrow();

        assertEquals(DEFAULT_BORROWER, borrower);
    }

    /**
     * If a book is in the database, we should be able to find it by title.
     */
    @Test
    public void testShouldBeAbleToSearchForBooksByTitle() {
        runRestoreOneBookOneBorrower();
        final Book expectedBook = new Book(1, DEFAULT_BOOK.title);

        Book book = pl.searchBooksByTitle(DEFAULT_BOOK.title).orElseThrow();

        assertEquals(expectedBook, book);
    }

    /**
     * If a book is in the database, we should be able to find it by id.
     */
    @Test
    public void testShouldBeAbleToSearchForBooksById() {
        // this will set the default book into the database
        runRestoreOneBookOneBorrower();
        final Book expectedBook = new Book(1, DEFAULT_BOOK.title);

        // search for it by id
        Book book = pl.searchBooksById(DEFAULT_BOOK.id).orElseThrow();

        assertEquals(expectedBook, book);
    }

    /**
     * If a borrower is in the database, we should be able to find it by id.
     */
    @Test
    public void testShouldBeAbleToSearchForBorrowersById() {
        runRestoreOneBookOneBorrower();

        Borrower borrower = pl.searchBorrowersById(DEFAULT_BORROWER.id).orElseThrow();

        assertEquals(DEFAULT_BORROWER, borrower);
    }

    @Test
    public void testShouldBeAbleToSearchAUserByName() {
        runRestoreOneUser();

        User user = pl.searchForUserByName(DEFAULT_USER.name).orElseThrow();

        assertEquals(DEFAULT_USER, user);
    }

    @Test
    public void testThatWeCanUpdateAUsersPassword() {
        runRestoreOneUser();
        final String newPassword = "abc123";

        pl.updateUserWithPassword(1, newPassword);
        final boolean result = pl.areCredentialsValid(DEFAULT_BORROWER.name, newPassword).orElseThrow();

        assertTrue(result);
    }

    @Test
    public void testWeCanCreateLoan() {
        runRestoreOneBookOneBorrower();

        final long loanId = pl.createLoan(DEFAULT_BOOK, DEFAULT_BORROWER, BORROW_DATE);

        assertEquals(1, loanId);
    }


    @Test
    public void testWeCanSearchForALoanByABook() {
        runRestoreOneLoan();

        Loan loan = pl.searchForLoanByBook(DEFAULT_BOOK).orElseThrow();

        assertEquals(DEFAULT_LOAN, loan);
    }

    @Test
    public void testWeCanSearchForALoanByABorrower() {
        runRestoreOneLoan();

        Loan loan = pl.searchForLoanByBorrower(DEFAULT_BORROWER).get().get(0);

        assertEquals(DEFAULT_LOAN, loan);
    }

    @Test
    public void testWeCanSaveANewUser() {
        pl.cleanAndMigrateDatabase();

        long id = pl.saveNewUser(DEFAULT_USER.name);

        assertEquals(DEFAULT_USER.id, id);
    }

    @Test
    public void testWeCanSaveABook() {
        pl.cleanAndMigrateDatabase();

        long id = pl.saveNewBook(DEFAULT_BOOK.title);

        assertEquals(DEFAULT_BOOK.id, id);
    }

    @Test
    public void testWeCanCreateALoan() {
        runRestoreOneBookOneBorrower();

        long id = pl.createLoan(DEFAULT_BOOK, DEFAULT_BORROWER, BORROW_DATE);

        assertEquals(DEFAULT_LOAN.id, id);
    }

    @Test
    public void testShouldBeAbleToDeleteBook() {
        runRestoreOneBookOneBorrower();

        pl.deleteBook(DEFAULT_BOOK.id);
        final Optional<Book> book = pl.searchBooksByTitle(DEFAULT_BOOK.title);

        assertTrue(book.isEmpty());
    }

    @Test
    public void testShouldBeAbleToDeleteBorrower() {
        runRestoreOneBookOneBorrower();

        pl.deleteBorrower(DEFAULT_BORROWER.id);
        final Optional<Borrower> borrower = pl.searchBorrowerDataByName(DEFAULT_BORROWER.name);

        assertTrue(borrower.isEmpty());
    }

    @Test
    public void testShouldListAllBooks() {
        runRestoreOneBookOneBorrower();
        List<Book> expectedList = Arrays.asList(DEFAULT_BOOK);

        final List<Book> books = pl.listAllBooks().orElseThrow();

        assertEquals(expectedList, books);
    }

    @Test
    public void testShouldListAvailableBooks() {
        runRestoreThreeBooksThreeBorrowers();
        // loan out a book
        pl.createLoan(pl.searchBooksByTitle("b").orElseThrow(), pl.searchBorrowerDataByName("alice").orElseThrow(), BORROW_DATE);

        // create expected book list
        final List<Book> expectedBooks = new ArrayList<>();
        expectedBooks.add(new Book(1, "a"));
        expectedBooks.add(new Book(3, "c"));

        // act
        final List<Book> books = pl.listAvailableBooks().orElseThrow();

        // assert
        assertEquals(expectedBooks, books);
    }


    /**
     * If you check them all out - you'll get nothing in the available list.
     */
    @Test
    public void testShouldListNoAvailableBooksIfAllCheckedOut() {
        runRestoreThreeBooksThreeBorrowers();
        // loan out a book
        pl.createLoan(pl.searchBooksByTitle("a").orElseThrow(), pl.searchBorrowerDataByName("alice").orElseThrow(), BORROW_DATE);
        pl.createLoan(pl.searchBooksByTitle("b").orElseThrow(), pl.searchBorrowerDataByName("alice").orElseThrow(), BORROW_DATE);
        pl.createLoan(pl.searchBooksByTitle("c").orElseThrow(), pl.searchBorrowerDataByName("alice").orElseThrow(), BORROW_DATE);

        // act
        final Optional<List<Book>> books = pl.listAvailableBooks();

        // assert
        assertTrue(books.isEmpty());
    }

    /**
     * If none are checked out - you'll get everything in the available list.
     */
    @Test
    public void testShouldListAllBooksIfNoneCheckedOut() {
        runRestoreThreeBooksThreeBorrowers();
        // create expected book list
        final List<Book> expectedBooks = new ArrayList<>();
        expectedBooks.add(new Book(1, "a"));
        expectedBooks.add(new Book(2, "b"));
        expectedBooks.add(new Book(3, "c"));

        // act
        final List<Book> books = pl.listAvailableBooks().orElseThrow();

        // assert
        assertEquals(expectedBooks, books);
    }

    @Test
    public void testShouldListAllBorrowers() {
        runRestoreOneBookOneBorrower();
        List<Borrower> expectedList = Arrays.asList(DEFAULT_BORROWER);

        final List<Borrower> borrowers = pl.listAllBorrowers().orElseThrow();

        assertEquals(expectedList, borrowers);
    }

    @Test(expected = SqlRuntimeException.class)
    public void testThatExecuteInsertOnPreparedStatementHandlesExceptions() throws SQLException {
        final PersistenceLayer persistenceLayer = new PersistenceLayer();
        final PreparedStatement preparedStatement = Mockito.mock(PreparedStatement.class);
        final ResultSet resultSet = Mockito.mock(ResultSet.class);
        when(resultSet.next()).thenReturn(false);
        when(preparedStatement.getGeneratedKeys()).thenReturn(resultSet);

        persistenceLayer.executeInsertOnPreparedStatement(SqlData.createEmpty(), preparedStatement);
    }

    /**
     * Test what happens if no value is returned when we provide an
     * id to a particular user.
     */
    @Test
    public void testGetBorrowerName_WhenNoValueReturned() throws SQLException {
        final DataSource dataSource = Mockito.mock(DataSource.class);
        final PersistenceLayer persistenceLayer = new PersistenceLayer(dataSource);
        final Connection connection = Mockito.mock(Connection.class);
        final PreparedStatement preparedStatement = Mockito.mock(PreparedStatement.class);
        when(connection.prepareStatement(Mockito.anyString())).thenReturn(preparedStatement);
        when(dataSource.getConnection()).thenReturn(connection);
        final ResultSet resultSet = Mockito.mock(ResultSet.class);
        when(resultSet.next()).thenReturn(false);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);

        final Optional<String> borrowerName = persistenceLayer.getBorrowerName(1);

        assertTrue(borrowerName.isEmpty());
    }

    /**
     * Test what happens when an exception occurs in getBorrowerName
     */
    @Test(expected = SqlRuntimeException.class)
    public void testGetBorrowerName_WhenExceptionThrown() throws SQLException {
        final DataSource dataSource = Mockito.mock(DataSource.class);
        when(dataSource.getConnection()).thenThrow(new SQLException());
        final PersistenceLayer persistenceLayer = new PersistenceLayer(dataSource);

        persistenceLayer.getBorrowerName(1);
    }

    /**
     * An exception of the right type should be thrown
     * when an error occurs in the {@link PersistenceLayer#executeUpdateTemplate} method.
     */
    @Test(expected = SqlRuntimeException.class)
    public void testExecuteUpdateTemplate_ExceptionThrown() throws SQLException {
        final DataSource dataSource = Mockito.mock(DataSource.class);
        when(dataSource.getConnection()).thenThrow(new SQLException());
        final PersistenceLayer persistenceLayer = new PersistenceLayer(dataSource);

        persistenceLayer.executeUpdateTemplate("","");
    }

    /**
     * This can be run here, simply put @Test on top.
     */
    public void runBackup() {
        pl.runBackup("v2_three_books_three_borrowers.sql");
    }

    /**
     * This can be run here, simply put @Test on top.
     */
    public void setState() {
        runRestoreOneBookOneBorrower();
    }

    /**
     * this will set "alice" with id of 1 into the database as a borrower
     * and "The DevOps Handbook" with id of 1 as a book.
     */
    private void runRestoreOneBookOneBorrower() {
        runRestore("v2_one_book_one_borrower.sql");
    }

    private void runRestoreOneUser() {
        runRestore("v2_one_user.sql");
    }

    private void runRestoreOneLoan() {
        runRestore("v2_one_loan.sql");
    }

    /**
     * This backup has books: a, b, and c.  The borrowers are alice, bob, and carol
     */
    private void runRestoreThreeBooksThreeBorrowers() {
        runRestore("v2_three_books_three_borrowers.sql");
    }

    private void runRestore(String scriptName) {
        pl.runRestore(scriptName);
    }

    /**
     * Get a file-based {@link JdbcConnectionPool}, which makes it easier
     * to debug database tests when they are running.
     * <p>
     * Because we set AUTO_SERVER to true, we can access this database
     * from multiple places when it starts.
     * <p>
     * This method is solely meant to be used by database tests.
     */
    private static JdbcConnectionPool getFileBasedDatabaseConnectionPool() {
        return JdbcConnectionPool.create(
                "jdbc:h2:./build/db/training;AUTO_SERVER=TRUE;MODE=PostgreSQL", "", "");
    }


}



================================================
FILE: src/integration_test/resources/db_sample_files/README.txt
================================================
These are the backups of the library database, used during integration
testing.  Notice the naming scheme - each starts with the version of the
database, which originates from the Flyway scripts - see that folder.

We would always want to keep the version of our backups the same as the
version of the database migration scripts because our integration tests
assume a correct and current schema. That is, unless, however, we are specifically
testing that a database script successfully transitions the schema without
corrupting data, which is a valid and common concern during development.


================================================
FILE: src/integration_test/resources/db_sample_files/v2_empty_schema.sql
================================================
;             
CREATE USER IF NOT EXISTS SA SALT '7ab557eb69745223' HASH '8a3855f1eb198976108dae4d0d5cdf5eb907e73321db99c043737af0124852f6' ADMIN;           
CREATE SCHEMA IF NOT EXISTS ADMINISTRATIVE AUTHORIZATION SA;  
CREATE SCHEMA IF NOT EXISTS AUTH AUTHORIZATION SA;            
CREATE SCHEMA IF NOT EXISTS LIBRARY AUTHORIZATION SA;         
CREATE SEQUENCE AUTH.SYSTEM_SEQUENCE_EBB7E93A_A8A2_4BE4_9D42_F602FF467722 START WITH 1 BELONGS_TO_TABLE;      
CREATE SEQUENCE LIBRARY.SYSTEM_SEQUENCE_5EFEED8B_6D6F_4F38_B7F2_220445FE4B5B START WITH 1 BELONGS_TO_TABLE;   
CREATE SEQUENCE LIBRARY.SYSTEM_SEQUENCE_77FCB39D_27DD_4D20_81B0_DB61CDF1A6B0 START WITH 1 BELONGS_TO_TABLE;   
CREATE SEQUENCE LIBRARY.SYSTEM_SEQUENCE_4DC22436_9D2A_4365_80D1_96EAA7B0932E START WITH 1 BELONGS_TO_TABLE;   
CREATE CACHED TABLE ADMINISTRATIVE."flyway_schema_history"(
    "installed_rank" INT NOT NULL,
    "version" VARCHAR(50),
    "description" VARCHAR(200) NOT NULL,
    "type" VARCHAR(20) NOT NULL,
    "script" VARCHAR(1000) NOT NULL,
    "checksum" INT,
    "installed_by" VARCHAR(100) NOT NULL,
    "installed_on" TIMESTAMP DEFAULT CURRENT_TIMESTAMP() NOT NULL,
    "execution_time" INT NOT NULL,
    "success" BOOLEAN NOT NULL
);     
ALTER TABLE ADMINISTRATIVE."flyway_schema_history" ADD CONSTRAINT ADMINISTRATIVE."flyway_schema_history_pk" PRIMARY KEY("installed_rank");    
-- 3 +/- SELECT COUNT(*) FROM ADMINISTRATIVE."flyway_schema_history";         
INSERT INTO ADMINISTRATIVE."flyway_schema_history"("installed_rank", "version", "description", "type", "script", "checksum", "installed_by", "installed_on", "execution_time", "success") VALUES
(0, NULL, '<< Flyway Schema Creation >>', 'SCHEMA', '"ADMINISTRATIVE","LIBRARY","AUTH"', NULL, 'SA', TIMESTAMP '2019-01-31 17:35:59.667', 0, TRUE),
(1, '1', 'Create person table', 'SQL', 'V1__Create_person_table.sql', 2000967190, 'SA', TIMESTAMP '2019-01-31 17:35:59.691', 3, TRUE),
(2, '2', 'Rest of tables for auth and library', 'SQL', 'V2__Rest_of_tables_for_auth_and_library.sql', 1767572289, 'SA', TIMESTAMP '2019-01-31 17:35:59.706', 9, TRUE);         
CREATE INDEX ADMINISTRATIVE."flyway_schema_history_s_idx" ON ADMINISTRATIVE."flyway_schema_history"("success");               
CREATE CACHED TABLE LIBRARY.BORROWER(
    ID INT DEFAULT (NEXT VALUE FOR LIBRARY.SYSTEM_SEQUENCE_5EFEED8B_6D6F_4F38_B7F2_220445FE4B5B) NOT NULL NULL_TO_DEFAULT SEQUENCE LIBRARY.SYSTEM_SEQUENCE_5EFEED8B_6D6F_4F38_B7F2_220445FE4B5B,
    NAME VARCHAR(100) NOT NULL
);   
ALTER TABLE LIBRARY.BORROWER ADD CONSTRAINT LIBRARY.CONSTRAINT_A PRIMARY KEY(ID);             
-- 0 +/- SELECT COUNT(*) FROM LIBRARY.BORROWER;               
CREATE CACHED TABLE LIBRARY.BOOK(
    ID INT DEFAULT (NEXT VALUE FOR LIBRARY.SYSTEM_SEQUENCE_77FCB39D_27DD_4D20_81B0_DB61CDF1A6B0) NOT NULL NULL_TO_DEFAULT SEQUENCE LIBRARY.SYSTEM_SEQUENCE_77FCB39D_27DD_4D20_81B0_DB61CDF1A6B0,
    TITLE VARCHAR(100) NOT NULL
);      
ALTER TABLE LIBRARY.BOOK ADD CONSTRAINT LIBRARY.CONSTRAINT_1 PRIMARY KEY(ID); 
-- 0 +/- SELECT COUNT(*) FROM LIBRARY.BOOK;   
CREATE CACHED TABLE LIBRARY.LOAN(
    ID INT DEFAULT (NEXT VALUE FOR LIBRARY.SYSTEM_SEQUENCE_4DC22436_9D2A_4365_80D1_96EAA7B0932E) NOT NULL NULL_TO_DEFAULT SEQUENCE LIBRARY.SYSTEM_SEQUENCE_4DC22436_9D2A_4365_80D1_96EAA7B0932E,
    BOOK INT NOT NULL,
    BORROWER INT NOT NULL,
    BORROW_DATE DATE NOT NULL
);    
ALTER TABLE LIBRARY.LOAN ADD CONSTRAINT LIBRARY.CONSTRAINT_2 PRIMARY KEY(ID); 
-- 0 +/- SELECT COUNT(*) FROM LIBRARY.LOAN;   
CREATE CACHED TABLE AUTH.USER(
    ID INT DEFAULT (NEXT VALUE FOR AUTH.SYSTEM_SEQUENCE_EBB7E93A_A8A2_4BE4_9D42_F602FF467722) NOT NULL NULL_TO_DEFAULT SEQUENCE AUTH.SYSTEM_SEQUENCE_EBB7E93A_A8A2_4BE4_9D42_F602FF467722,
    NAME VARCHAR(100) NOT NULL,
    PASSWORD_HASH VARCHAR(100)
);               
ALTER TABLE AUTH.USER ADD CONSTRAINT AUTH.CONSTRAINT_2 PRIMARY KEY(ID);       
-- 0 +/- SELECT COUNT(*) FROM AUTH.USER;      
ALTER TABLE LIBRARY.LOAN ADD CONSTRAINT LIBRARY.CONSTRAINT_23B FOREIGN KEY(BORROWER) REFERENCES LIBRARY.BORROWER(ID) NOCHECK; 
ALTER TABLE LIBRARY.LOAN ADD CONSTRAINT LIBRARY.CONSTRAINT_23 FOREIGN KEY(BOOK) REFERENCES LIBRARY.BOOK(ID) NOCHECK;          



================================================
FILE: src/integration_test/resources/db_sample_files/v2_one_book_one_borrower.sql
================================================
;             
CREATE USER IF NOT EXISTS SA SALT '7ab557eb69745223' HASH '8a3855f1eb198976108dae4d0d5cdf5eb907e73321db99c043737af0124852f6' ADMIN;           
CREATE SCHEMA IF NOT EXISTS ADMINISTRATIVE AUTHORIZATION SA;  
CREATE SCHEMA IF NOT EXISTS AUTH AUTHORIZATION SA;            
CREATE SCHEMA IF NOT EXISTS LIBRARY AUTHORIZATION SA;         
CREATE SEQUENCE AUTH.SYSTEM_SEQUENCE_EBB7E93A_A8A2_4BE4_9D42_F602FF467722 START WITH 1 BELONGS_TO_TABLE;      
CREATE SEQUENCE LIBRARY.SYSTEM_SEQUENCE_5EFEED8B_6D6F_4F38_B7F2_220445FE4B5B START WITH 2 BELONGS_TO_TABLE;   
CREATE SEQUENCE LIBRARY.SYSTEM_SEQUENCE_77FCB39D_27DD_4D20_81B0_DB61CDF1A6B0 START WITH 2 BELONGS_TO_TABLE;   
CREATE SEQUENCE LIBRARY.SYSTEM_SEQUENCE_4DC22436_9D2A_4365_80D1_96EAA7B0932E START WITH 1 BELONGS_TO_TABLE;   
CREATE CACHED TABLE ADMINISTRATIVE."flyway_schema_history"(
    "installed_rank" INT NOT NULL,
    "version" VARCHAR(50),
    "description" VARCHAR(200) NOT NULL,
    "type" VARCHAR(20) NOT NULL,
    "script" VARCHAR(1000) NOT NULL,
    "checksum" INT,
    "installed_by" VARCHAR(100) NOT NULL,
    "installed_on" TIMESTAMP DEFAULT CURRENT_TIMESTAMP() NOT NULL,
    "execution_time" INT NOT NULL,
    "success" BOOLEAN NOT NULL
);     
ALTER TABLE ADMINISTRATIVE."flyway_schema_history" ADD CONSTRAINT ADMINISTRATIVE."flyway_schema_history_pk" PRIMARY KEY("installed_rank");    
-- 3 +/- SELECT COUNT(*) FROM ADMINISTRATIVE."flyway_schema_history";         
INSERT INTO ADMINISTRATIVE."flyway_schema_history"("installed_rank", "version", "description", "type", "script", "checksum", "installed_by", "installed_on", "execution_time", "success") VALUES
(0, NULL, '<< Flyway Schema Creation >>', 'SCHEMA', '"ADMINISTRATIVE","LIBRARY","AUTH"', NULL, 'SA', TIMESTAMP '2019-01-31 17:35:59.667', 0, TRUE),
(1, '1', 'Create person table', 'SQL', 'V1__Create_person_table.sql', 2000967190, 'SA', TIMESTAMP '2019-01-31 17:35:59.691', 3, TRUE),
(2, '2', 'Rest of tables for auth and library', 'SQL', 'V2__Rest_of_tables_for_auth_and_library.sql', 1767572289, 'SA', TIMESTAMP '2019-01-31 17:35:59.706', 9, TRUE);         
CREATE INDEX ADMINISTRATIVE."flyway_schema_history_s_idx" ON ADMINISTRATIVE."flyway_schema_history"("success");               
CREATE CACHED TABLE LIBRARY.BORROWER(
    ID INT DEFAULT (NEXT VALUE FOR LIBRARY.SYSTEM_SEQUENCE_5EFEED8B_6D6F_4F38_B7F2_220445FE4B5B) NOT NULL NULL_TO_DEFAULT SEQUENCE LIBRARY.SYSTEM_SEQUENCE_5EFEED8B_6D6F_4F38_B7F2_220445FE4B5B,
    NAME VARCHAR(100) NOT NULL
);   
ALTER TABLE LIBRARY.BORROWER ADD CONSTRAINT LIBRARY.CONSTRAINT_A PRIMARY KEY(ID);             
-- 1 +/- SELECT COUNT(*) FROM LIBRARY.BORROWER;               
INSERT INTO LIBRARY.BORROWER(ID, NAME) VALUES
(1, 'alice');  
CREATE CACHED TABLE LIBRARY.BOOK(
    ID INT DEFAULT (NEXT VALUE FOR LIBRARY.SYSTEM_SEQUENCE_77FCB39D_27DD_4D20_81B0_DB61CDF1A6B0) NOT NULL NULL_TO_DEFAULT SEQUENCE LIBRARY.SYSTEM_SEQUENCE_77FCB39D_27DD_4D20_81B0_DB61CDF1A6B0,
    TITLE VARCHAR(100) NOT NULL
);      
ALTER TABLE LIBRARY.BOOK ADD CONSTRAINT LIBRARY.CONSTRAINT_1 PRIMARY KEY(ID); 
-- 1 +/- SELECT COUNT(*) FROM LIBRARY.BOOK;   
INSERT INTO LIBRARY.BOOK(ID, TITLE) VALUES
(1, 'The DevOps Handbook');       
CREATE CACHED TABLE LIBRARY.LOAN(
    ID INT DEFAULT (NEXT VALUE FOR LIBRARY.SYSTEM_SEQUENCE_4DC22436_9D2A_4365_80D1_96EAA7B0932E) NOT NULL NULL_TO_DEFAULT SEQUENCE LIBRARY.SYSTEM_SEQUENCE_4DC22436_9D2A_4365_80D1_96EAA7B0932E,
    BOOK INT NOT NULL,
    BORROWER INT NOT NULL,
    BORROW_DATE DATE NOT NULL
);    
ALTER TABLE LIBRARY.LOAN ADD CONSTRAINT LIBRARY.CONSTRAINT_2 PRIMARY KEY(ID); 
-- 0 +/- SELECT COUNT(*) FROM LIBRARY.LOAN;   
CREATE CACHED TABLE AUTH.USER(
    ID INT DEFAULT (NEXT VALUE FOR AUTH.SYSTEM_SEQUENCE_EBB7E93A_A8A2_4BE4_9D42_F602FF467722) NOT NULL NULL_TO_DEFAULT SEQUENCE AUTH.SYSTEM_SEQUENCE_EBB7E93A_A8A2_4BE4_9D42_F602FF467722,
    NAME VARCHAR(100) NOT NULL,
    PASSWORD_HASH VARCHAR(100)
);               
ALTER TABLE AUTH.USER ADD CONSTRAINT AUTH.CONSTRAINT_2 PRIMARY KEY(ID);       
-- 0 +/- SELECT COUNT(*) FROM AUTH.USER;      
ALTER TABLE LIBRARY.LOAN ADD CONSTRAINT LIBRARY.CONSTRAINT_23B FOREIGN KEY(BORROWER) REFERENCES LIBRARY.BORROWER(ID) NOCHECK; 
ALTER TABLE LIBRARY.LOAN ADD CONSTRAINT LIBRARY.CONSTRAINT_23 FOREIGN KEY(BOOK) REFERENCES LIBRARY.BOOK(ID) NOCHECK;          



================================================
FILE: src/integration_test/resources/db_sample_files/v2_one_loan.sql
================================================
;             
CREATE USER IF NOT EXISTS SA SALT '7ab557eb69745223' HASH '8a3855f1eb198976108dae4d0d5cdf5eb907e73321db99c043737af0124852f6' ADMIN;           
CREATE SCHEMA IF NOT EXISTS ADMINISTRATIVE AUTHORIZATION SA;  
CREATE SCHEMA IF NOT EXISTS AUTH AUTHORIZATION SA;            
CREATE SCHEMA IF NOT EXISTS LIBRARY AUTHORIZATION SA;         
CREATE SEQUENCE AUTH.SYSTEM_SEQUENCE_EBB7E93A_A8A2_4BE4_9D42_F602FF467722 START WITH 1 BELONGS_TO_TABLE;      
CREATE SEQUENCE LIBRARY.SYSTEM_SEQUENCE_5EFEED8B_6D6F_4F38_B7F2_220445FE4B5B START WITH 2 BELONGS_TO_TABLE;   
CREATE SEQUENCE LIBRARY.SYSTEM_SEQUENCE_77FCB39D_27DD_4D20_81B0_DB61CDF1A6B0 START WITH 2 BELONGS_TO_TABLE;   
CREATE SEQUENCE LIBRARY.SYSTEM_SEQUENCE_4DC22436_9D2A_4365_80D1_96EAA7B0932E START WITH 2 BELONGS_TO_TABLE;   
CREATE CACHED TABLE ADMINISTRATIVE."flyway_schema_history"(
    "installed_rank" INT NOT NULL,
    "version" VARCHAR(50),
    "description" VARCHAR(200) NOT NULL,
    "type" VARCHAR(20) NOT NULL,
    "script" VARCHAR(1000) NOT NULL,
    "checksum" INT,
    "installed_by" VARCHAR(100) NOT NULL,
    "installed_on" TIMESTAMP DEFAULT CURRENT_TIMESTAMP() NOT NULL,
    "execution_time" INT NOT NULL,
    "success" BOOLEAN NOT NULL
);     
ALTER TABLE ADMINISTRATIVE."flyway_schema_history" ADD CONSTRAINT ADMINISTRATIVE."flyway_schema_history_pk" PRIMARY KEY("installed_rank");    
-- 3 +/- SELECT COUNT(*) FROM ADMINISTRATIVE."flyway_schema_history";         
INSERT INTO ADMINISTRATIVE."flyway_schema_history"("installed_rank", "version", "description", "type", "script", "checksum", "installed_by", "installed_on", "execution_time", "success") VALUES
(0, NULL, '<< Flyway Schema Creation >>', 'SCHEMA', '"ADMINISTRATIVE","LIBRARY","AUTH"', NULL, 'SA', TIMESTAMP '2019-01-31 17:35:59.667', 0, TRUE),
(1, '1', 'Create person table', 'SQL', 'V1__Create_person_table.sql', 2000967190, 'SA', TIMESTAMP '2019-01-31 17:35:59.691', 3, TRUE),
(2, '2', 'Rest of tables for auth and library', 'SQL', 'V2__Rest_of_tables_for_auth_and_library.sql', 1767572289, 'SA', TIMESTAMP '2019-01-31 17:35:59.706', 9, TRUE);         
CREATE INDEX ADMINISTRATIVE."flyway_schema_history_s_idx" ON ADMINISTRATIVE."flyway_schema_history"("success");               
CREATE CACHED TABLE LIBRARY.BORROWER(
    ID INT DEFAULT (NEXT VALUE FOR LIBRARY.SYSTEM_SEQUENCE_5EFEED8B_6D6F_4F38_B7F2_220445FE4B5B) NOT NULL NULL_TO_DEFAULT SEQUENCE LIBRARY.SYSTEM_SEQUENCE_5EFEED8B_6D6F_4F38_B7F2_220445FE4B5B,
    NAME VARCHAR(100) NOT NULL
);   
ALTER TABLE LIBRARY.BORROWER ADD CONSTRAINT LIBRARY.CONSTRAINT_A PRIMARY KEY(ID);             
-- 1 +/- SELECT COUNT(*) FROM LIBRARY.BORROWER;               
INSERT INTO LIBRARY.BORROWER(ID, NAME) VALUES
(1, 'alice');  
CREATE CACHED TABLE LIBRARY.BOOK(
    ID INT DEFAULT (NEXT VALUE FOR LIBRARY.SYSTEM_SEQUENCE_77FCB39D_27DD_4D20_81B0_DB61CDF1A6B0) NOT NULL NULL_TO_DEFAULT SEQUENCE LIBRARY.SYSTEM_SEQUENCE_77FCB39D_27DD_4D20_81B0_DB61CDF1A6B0,
    TITLE VARCHAR(100) NOT NULL
);      
ALTER TABLE LIBRARY.BOOK ADD CONSTRAINT LIBRARY.CONSTRAINT_1 PRIMARY KEY(ID); 
-- 1 +/- SELECT COUNT(*) FROM LIBRARY.BOOK;   
INSERT INTO LIBRARY.BOOK(ID, TITLE) VALUES
(1, 'The DevOps Handbook');       
CREATE CACHED TABLE LIBRARY.LOAN(
    ID INT DEFAULT (NEXT VALUE FOR LIBRARY.SYSTEM_SEQUENCE_4DC22436_9D2A_4365_80D1_96EAA7B0932E) NOT NULL NULL_TO_DEFAULT SEQUENCE LIBRARY.SYSTEM_SEQUENCE_4DC22436_9D2A_4365_80D1_96EAA7B0932E,
    BOOK INT NOT NULL,
    BORROWER INT NOT NULL,
    BORROW_DATE DATE NOT NULL
);    
ALTER TABLE LIBRARY.LOAN ADD CONSTRAINT LIBRARY.CONSTRAINT_2 PRIMARY KEY(ID); 
-- 1 +/- SELECT COUNT(*) FROM LIBRARY.LOAN;   
INSERT INTO LIBRARY.LOAN(ID, BOOK, BORROWER, BORROW_DATE) VALUES
(1, 1, 1, DATE '2018-01-01');               
CREATE CACHED TABLE AUTH.USER(
    ID INT DEFAULT (NEXT VALUE FOR AUTH.SYSTEM_SEQUENCE_EBB7E93A_A8A2_4BE4_9D42_F602FF467722) NOT NULL NULL_TO_DEFAULT SEQUENCE AUTH.SYSTEM_SEQUENCE_EBB7E93A_A8A2_4BE4_9D42_F602FF467722,
    NAME VARCHAR(100) NOT NULL,
    PASSWORD_HASH VARCHAR(100)
);               
ALTER TABLE AUTH.USER ADD CONSTRAINT AUTH.CONSTRAINT_2 PRIMARY KEY(ID);       
-- 0 +/- SELECT COUNT(*) FROM AUTH.USER;      
ALTER TABLE LIBRARY.LOAN ADD CONSTRAINT LIBRARY.CONSTRAINT_23B FOREIGN KEY(BORROWER) REFERENCES LIBRARY.BORROWER(ID) NOCHECK; 
ALTER TABLE LIBRARY.LOAN ADD CONSTRAINT LIBRARY.CONSTRAINT_23 FOREIGN KEY(BOOK) REFERENCES LIBRARY.BOOK(ID) NOCHECK;          



================================================
FILE: src/integration_test/resources/db_sample_files/v2_one_user.sql
================================================
;             
CREATE USER IF NOT EXISTS SA SALT '7ab557eb69745223' HASH '8a3855f1eb198976108dae4d0d5cdf5eb907e73321db99c043737af0124852f6' ADMIN;           
CREATE SCHEMA IF NOT EXISTS ADMINISTRATIVE AUTHORIZATION SA;  
CREATE SCHEMA IF NOT EXISTS AUTH AUTHORIZATION SA;            
CREATE SCHEMA IF NOT EXISTS LIBRARY AUTHORIZATION SA;         
CREATE SEQUENCE AUTH.SYSTEM_SEQUENCE_EBB7E93A_A8A2_4BE4_9D42_F602FF467722 START WITH 2 BELONGS_TO_TABLE;      
CREATE SEQUENCE LIBRARY.SYSTEM_SEQUENCE_5EFEED8B_6D6F_4F38_B7F2_220445FE4B5B START WITH 1 BELONGS_TO_TABLE;   
CREATE SEQUENCE LIBRARY.SYSTEM_SEQUENCE_77FCB39D_27DD_4D20_81B0_DB61CDF1A6B0 START WITH 1 BELONGS_TO_TABLE;   
CREATE SEQUENCE LIBRARY.SYSTEM_SEQUENCE_4DC22436_9D2A_4365_80D1_96EAA7B0932E START WITH 1 BELONGS_TO_TABLE;   
CREATE CACHED TABLE ADMINISTRATIVE."flyway_schema_history"(
    "installed_rank" INT NOT NULL,
    "version" VARCHAR(50),
    "description" VARCHAR(200) NOT NULL,
    "type" VARCHAR(20) NOT NULL,
    "script" VARCHAR(1000) NOT NULL,
    "checksum" INT,
    "installed_by" VARCHAR(100) NOT NULL,
    "installed_on" TIMESTAMP DEFAULT CURRENT_TIMESTAMP() NOT NULL,
    "execution_time" INT NOT NULL,
    "success" BOOLEAN NOT NULL
);     
ALTER TABLE ADMINISTRATIVE."flyway_schema_history" ADD CONSTRAINT ADMINISTRATIVE."flyway_schema_history_pk" PRIMARY KEY("installed_rank");    
-- 3 +/- SELECT COUNT(*) FROM ADMINISTRATIVE."flyway_schema_history";         
INSERT INTO ADMINISTRATIVE."flyway_schema_history"("installed_rank", "version", "description", "type", "script", "checksum", "installed_by", "installed_on", "execution_time", "success") VALUES
(0, NULL, '<< Flyway Schema Creation >>', 'SCHEMA', '"ADMINISTRATIVE","LIBRARY","AUTH"', NULL, 'SA', TIMESTAMP '2019-01-31 17:35:59.667', 0, TRUE),
(1, '1', 'Create person table', 'SQL', 'V1__Create_person_table.sql', 2000967190, 'SA', TIMESTAMP '2019-01-31 17:35:59.691', 3, TRUE),
(2, '2', 'Rest of tables for auth and library', 'SQL', 'V2__Rest_of_tables_for_auth_and_library.sql', 1767572289, 'SA', TIMESTAMP '2019-01-31 17:35:59.706', 9, TRUE);         
CREATE INDEX ADMINISTRATIVE."flyway_schema_history_s_idx" ON ADMINISTRATIVE."flyway_schema_history"("success");               
CREATE CACHED TABLE LIBRARY.BORROWER(
    ID INT DEFAULT (NEXT VALUE FOR LIBRARY.SYSTEM_SEQUENCE_5EFEED8B_6D6F_4F38_B7F2_220445FE4B5B) NOT NULL NULL_TO_DEFAULT SEQUENCE LIBRARY.SYSTEM_SEQUENCE_5EFEED8B_6D6F_4F38_B7F2_220445FE4B5B,
    NAME VARCHAR(100) NOT NULL
);   
ALTER TABLE LIBRARY.BORROWER ADD CONSTRAINT LIBRARY.CONSTRAINT_A PRIMARY KEY(ID);             
-- 0 +/- SELECT COUNT(*) FROM LIBRARY.BORROWER;               
CREATE CACHED TABLE LIBRARY.BOOK(
    ID INT DEFAULT (NEXT VALUE FOR LIBRARY.SYSTEM_SEQUENCE_77FCB39D_27DD_4D20_81B0_DB61CDF1A6B0) NOT NULL NULL_TO_DEFAULT SEQUENCE LIBRARY.SYSTEM_SEQUENCE_77FCB39D_27DD_4D20_81B0_DB61CDF1A6B0,
    TITLE VARCHAR(100) NOT NULL
);      
ALTER TABLE LIBRARY.BOOK ADD CONSTRAINT LIBRARY.CONSTRAINT_1 PRIMARY KEY(ID); 
-- 0 +/- SELECT COUNT(*) FROM LIBRARY.BOOK;   
CREATE CACHED TABLE LIBRARY.LOAN(
    ID INT DEFAULT (NEXT VALUE FOR LIBRARY.SYSTEM_SEQUENCE_4DC22436_9D2A_4365_80D1_96EAA7B0932E) NOT NULL NULL_TO_DEFAULT SEQUENCE LIBRARY.SYSTEM_SEQUENCE_4DC22436_9D2A_4365_80D1_96EAA7B0932E,
    BOOK INT NOT NULL,
    BORROWER INT NOT NULL,
    BORROW_DATE DATE NOT NULL
);    
ALTER TABLE LIBRARY.LOAN ADD CONSTRAINT LIBRARY.CONSTRAINT_2 PRIMARY KEY(ID); 
-- 0 +/- SELECT COUNT(*) FROM LIBRARY.LOAN;   
CREATE CACHED TABLE AUTH.USER(
    ID INT DEFAULT (NEXT VALUE FOR AUTH.SYSTEM_SEQUENCE_EBB7E93A_A8A2_4BE4_9D42_F602FF467722) NOT NULL NULL_TO_DEFAULT SEQUENCE AUTH.SYSTEM_SEQUENCE_EBB7E93A_A8A2_4BE4_9D42_F602FF467722,
    NAME VARCHAR(100) NOT NULL,
    PASSWORD_HASH VARCHAR(100)
);               
ALTER TABLE AUTH.USER ADD CONSTRAINT AUTH.CONSTRAINT_2 PRIMARY KEY(ID);       
-- 1 +/- SELECT COUNT(*) FROM AUTH.USER;      
INSERT INTO AUTH.USER(ID, NAME, PASSWORD_HASH) VALUES
(1, 'alice', NULL);    
ALTER TABLE LIBRARY.LOAN ADD CONSTRAINT LIBRARY.CONSTRAINT_23B FOREIGN KEY(BORROWER) REFERENCES LIBRARY.BORROWER(ID) NOCHECK; 
ALTER TABLE LIBRARY.LOAN ADD CONSTRAINT LIBRARY.CONSTRAINT_23 FOREIGN KEY(BOOK) REFERENCES LIBRARY.BOOK(ID) NOCHECK;          



================================================
FILE: src/integration_test/resources/db_sample_files/v2_three_books_three_borrowers.sql
================================================
;             
CREATE USER IF NOT EXISTS "" SALT '' HASH '' ADMIN;           
CREATE SCHEMA IF NOT EXISTS "ADMINISTRATIVE" AUTHORIZATION "";
CREATE SCHEMA IF NOT EXISTS "AUTH" AUTHORIZATION "";          
CREATE SCHEMA IF NOT EXISTS "LIBRARY" AUTHORIZATION "";       
CREATE SEQUENCE "AUTH"."SYSTEM_SEQUENCE_6608652E_F4BC_46BC_A456_0FCA964E591D" START WITH 1 BELONGS_TO_TABLE;  
CREATE SEQUENCE "LIBRARY"."SYSTEM_SEQUENCE_A08E4C08_164A_4348_9A78_C229789BAEF3" START WITH 4 BELONGS_TO_TABLE;               
CREATE SEQUENCE "LIBRARY"."SYSTEM_SEQUENCE_A416DDFE_1291_4BF1_B8C0_7F3A8EC53F92" START WITH 4 BELONGS_TO_TABLE;               
CREATE SEQUENCE "LIBRARY"."SYSTEM_SEQUENCE_C4EA4E4C_FC2D_4DF9_9937_3D93A483B1EE" START WITH 1 BELONGS_TO_TABLE;               
CREATE CACHED TABLE "ADMINISTRATIVE"."flyway_schema_history"(
    "installed_rank" INT NOT NULL,
    "version" VARCHAR(50),
    "description" VARCHAR(200) NOT NULL,
    "type" VARCHAR(20) NOT NULL,
    "script" VARCHAR(1000) NOT NULL,
    "checksum" INT,
    "installed_by" VARCHAR(100) NOT NULL,
    "installed_on" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "execution_time" INT NOT NULL,
    "success" BOOLEAN NOT NULL
);     
ALTER TABLE "ADMINISTRATIVE"."flyway_schema_history" ADD CONSTRAINT "ADMINISTRATIVE"."flyway_schema_history_pk" PRIMARY KEY("installed_rank");
-- 4 +/- SELECT COUNT(*) FROM ADMINISTRATIVE.flyway_schema_history;           
INSERT INTO "ADMINISTRATIVE"."flyway_schema_history" VALUES
(-1, NULL, '<< Flyway Schema History table created >>', 'TABLE', '', NULL, '', TIMESTAMP '2020-04-14 22:19:07.888525', 0, TRUE),
(0, NULL, '<< Flyway Schema Creation >>', 'SCHEMA', '"ADMINISTRATIVE","LIBRARY","AUTH"', NULL, '', TIMESTAMP '2020-04-14 22:19:07.888525', 0, TRUE),
(1, '1', 'Create person table', 'SQL', 'V1__Create_person_table.sql', 2000967190, '', TIMESTAMP '2020-04-14 22:19:07.919772', 2, TRUE),
(2, '2', 'Rest of tables for auth and library', 'SQL', 'V2__Rest_of_tables_for_auth_and_library.sql', 1047360475, '', TIMESTAMP '2020-04-14 22:19:07.95102', 6, TRUE);          
CREATE INDEX "ADMINISTRATIVE"."flyway_schema_history_s_idx" ON "ADMINISTRATIVE"."flyway_schema_history"("success");           
CREATE CACHED TABLE "LIBRARY"."BORROWER"(
    "ID" INT DEFAULT (NEXT VALUE FOR "LIBRARY"."SYSTEM_SEQUENCE_A08E4C08_164A_4348_9A78_C229789BAEF3") NOT NULL NULL_TO_DEFAULT SEQUENCE "LIBRARY"."SYSTEM_SEQUENCE_A08E4C08_164A_4348_9A78_C229789BAEF3",
    "NAME" VARCHAR(100) NOT NULL
);   
ALTER TABLE "LIBRARY"."BORROWER" ADD CONSTRAINT "LIBRARY"."CONSTRAINT_A" PRIMARY KEY("ID");   
-- 3 +/- SELECT COUNT(*) FROM LIBRARY.BORROWER;               
INSERT INTO "LIBRARY"."BORROWER" VALUES
(1, 'alice'),
(2, 'bob'),
(3, 'carol');            
CREATE CACHED TABLE "LIBRARY"."BOOK"(
    "ID" INT DEFAULT (NEXT VALUE FOR "LIBRARY"."SYSTEM_SEQUENCE_A416DDFE_1291_4BF1_B8C0_7F3A8EC53F92") NOT NULL NULL_TO_DEFAULT SEQUENCE "LIBRARY"."SYSTEM_SEQUENCE_A416DDFE_1291_4BF1_B8C0_7F3A8EC53F92",
    "TITLE" VARCHAR(100) NOT NULL
);      
ALTER TABLE "LIBRARY"."BOOK" ADD CONSTRAINT "LIBRARY"."CONSTRAINT_1" PRIMARY KEY("ID");       
-- 3 +/- SELECT COUNT(*) FROM LIBRARY.BOOK;   
INSERT INTO "LIBRARY"."BOOK" VALUES
(1, 'a'),
(2, 'b'),
(3, 'c');          
CREATE CACHED TABLE "LIBRARY"."LOAN"(
    "ID" INT DEFAULT (NEXT VALUE FOR "LIBRARY"."SYSTEM_SEQUENCE_C4EA4E4C_FC2D_4DF9_9937_3D93A483B1EE") NOT NULL NULL_TO_DEFAULT SEQUENCE "LIBRARY"."SYSTEM_SEQUENCE_C4EA4E4C_FC2D_4DF9_9937_3D93A483B1EE",
    "BOOK" INT NOT NULL,
    "BORROWER" INT NOT NULL,
    "BORROW_DATE" DATE NOT NULL
);
ALTER TABLE "LIBRARY"."LOAN" ADD CONSTRAINT "LIBRARY"."CONSTRAINT_2" PRIMARY KEY("ID");       
-- 0 +/- SELECT COUNT(*) FROM LIBRARY.LOAN;   
CREATE CACHED TABLE "AUTH"."USER"(
    "ID" INT DEFAULT (NEXT VALUE FOR "AUTH"."SYSTEM_SEQUENCE_6608652E_F4BC_46BC_A456_0FCA964E591D") NOT NULL NULL_TO_DEFAULT SEQUENCE "AUTH"."SYSTEM_SEQUENCE_6608652E_F4BC_46BC_A456_0FCA964E591D",
    "NAME" VARCHAR(100) NOT NULL,
    "PASSWORD_HASH" VARCHAR(100)
);             
ALTER TABLE "AUTH"."USER" ADD CONSTRAINT "AUTH"."CONSTRAINT_2" PRIMARY KEY("ID");             
-- 0 +/- SELECT COUNT(*) FROM AUTH.USER;      
ALTER TABLE "LIBRARY"."LOAN" ADD CONSTRAINT "LIBRARY"."CONSTRAINT_23B" FOREIGN KEY("BORROWER") REFERENCES "LIBRARY"."BORROWER"("ID") ON DELETE CASCADE NOCHECK;               
ALTER TABLE "LIBRARY"."LOAN" ADD CONSTRAINT "LIBRARY"."CONSTRAINT_23" FOREIGN KEY("BOOK") REFERENCES "LIBRARY"."BOOK"("ID") ON DELETE CASCADE NOCHECK;        



================================================
FILE: src/main/java/com/coveros/training/README.txt
================================================
These different folders describe the different feature areas of the Demo application.

authentication   :  things like usernames, passwords, accouunts
cartesianproduct :  calculating the cartesian product of multiple sets
expenses         :  calculating restaurant expenses
helpers          :  cross-functional helper classes
library          :  books, borrowers, lending
mathematics      :  various math functionality
persistence      :  provides database access
tomcat           :  configures Tomcat


================================================
FILE: src/main/java/com/coveros/training/authentication/LoginServlet.java
================================================
package com.coveros.training.authentication;

import com.coveros.training.helpers.ServletUtils;
import com.coveros.training.helpers.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Provides an API endpoint for login.
 * <p>
 * A user (librarian) enters their username and password to authenticate.
 * </p>
 */
@WebServlet(name = "LoginServlet", urlPatterns = {"/login"}, loadOnStartup = 1)
public class LoginServlet extends HttpServlet {

    private static final long serialVersionUID = 7302828964216520580L;
    private static final Logger logger = LoggerFactory.getLogger(LoginServlet.class);
    static LoginUtils loginUtils = new LoginUtils();

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) {
        String username = StringUtils.makeNotNullable(request.getParameter("username"));
        request.setAttribute("username", username);

        String password = StringUtils.makeNotNullable(request.getParameter("password"));
        request.setAttribute("password", password);

        String responseText;

        if (username.isEmpty()) {
            responseText = "no username provided";
        } else if (password.isEmpty()) {
            responseText = "no password provided";
        } else {
            logger.info("received request to authenticate a user, {}", username);

            final boolean userRegistered = loginUtils.isUserRegistered(username, password);
            responseText = userRegistered ? "access granted" : "access denied";
        }

        request.setAttribute("result", responseText);
        request.setAttribute("return_page", "library.html");
        ServletUtils.forwardToResult(request, response, logger);
    }

}




================================================
FILE: src/main/java/com/coveros/training/authentication/LoginUtils.java
================================================
package com.coveros.training.authentication;

import com.coveros.training.helpers.CheckUtils;
import com.coveros.training.persistence.IPersistenceLayer;
import com.coveros.training.persistence.PersistenceLayer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Provides business-layer for determining if entered credentials qualify for authentication
 */
public class LoginUtils {

    private static final Logger logger = LoggerFactory.getLogger(LoginUtils.class);
    private final IPersistenceLayer persistenceLayer;

    public LoginUtils(IPersistenceLayer persistenceLayer) {
        this.persistenceLayer = persistenceLayer;
    }

    public LoginUtils() {
        this(new PersistenceLayer());
    }

    /**
     * Determine if input is correct credentials for a registered user.
     * @return true if the credentials are valid, false otherwise
     */
    public boolean isUserRegistered(String username, String password) {
        CheckUtils.StringMustNotBeNullOrEmpty(username, password);
        logger.info("checking if credentials for {} are valid for login", username);
        boolean isValid = persistenceLayer.areCredentialsValid(username, password).orElse(false);
        if (isValid) {
            logger.info("credentials for {} are valid - granting access", username);
        } else {
            logger.info("credentials for {} were invalid - denying access", username);
        }
        return isValid;
    }

    public static LoginUtils createEmpty() {
        return new LoginUtils(PersistenceLayer.createEmpty());
    }

    public boolean isEmpty() {
        return persistenceLayer.isEmpty();
    }

}



================================================
FILE: src/main/java/com/coveros/training/authentication/package-info.java
================================================
/**
 * Authentication mechanisms - usernames, passwords, etc.
 */
package com.coveros.training.authentication;


================================================
FILE: src/main/java/com/coveros/training/authentication/RegisterServlet.java
================================================
package com.coveros.training.authentication;

import com.coveros.training.authentication.domainobjects.RegistrationResult;
import com.coveros.training.helpers.ServletUtils;
import com.coveros.training.helpers.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Provides an API endpoint to register a new user, recording their username and (a hash of their) password
 */
@WebServlet(name = "RegisterServlet", urlPatterns = {"/register"}, loadOnStartup = 1)
public class RegisterServlet extends HttpServlet {

    private static final String PASSWORD_PARAM = "password";
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(RegisterServlet.class);
    private static final String USERNAME_PARAM = "username";
    static RegistrationUtils registrationUtils = new RegistrationUtils();

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) {
        String username = StringUtils.makeNotNullable(request.getParameter(USERNAME_PARAM));
        request.setAttribute(USERNAME_PARAM, username);

        String password = StringUtils.makeNotNullable(request.getParameter(PASSWORD_PARAM));
        request.setAttribute(PASSWORD_PARAM, password);

        String responseText;

        if (username.isEmpty()) {
            responseText = "no username provided";
        } else if (password.isEmpty()) {
            responseText = "no password provided";
        } else {

            logger.info("received request to register a user, {}", username);

            RegistrationResult registrationResult = registrationUtils.processRegistration(username, password);

            responseText = registrationResult.toPrettyString();
        }

        request.setAttribute("result", responseText);
        request.setAttribute("return_page", "library.html");
        forwardToResult(request, response, logger);
    }

    /**
     * Wrapping a static method call for testing.
     */
    private void forwardToResult(HttpServletRequest request, HttpServletResponse response, Logger logger) {
        ServletUtils.forwardToResult(request, response, logger);
    }

}




================================================
FILE: src/main/java/com/coveros/training/authentication/RegistrationUtils.java
================================================
package com.coveros.training.authentication;

import com.coveros.training.authentication.domainobjects.PasswordResult;
import com.coveros.training.authentication.domainobjects.RegistrationResult;
import com.coveros.training.helpers.CheckUtils;
import com.coveros.training.persistence.IPersistenceLayer;
import com.coveros.training.persistence.PersistenceLayer;
import me.gosimple.nbvcxz.Nbvcxz;
import me.gosimple.nbvcxz.scoring.Result;
import me.gosimple.nbvcxz.scoring.TimeEstimate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static com.coveros.training.authentication.domainobjects.PasswordResultEnums.EMPTY_PASSWORD;
import static com.coveros.training.authentication.domainobjects.PasswordResultEnums.*;
import static com.coveros.training.authentication.domainobjects.RegistrationStatusEnums.*;
import static com.coveros.training.helpers.CheckUtils.StringMustNotBeNullOrEmpty;

/**
 * Provides logic for registering a new user
 */
public class RegistrationUtils {

    private static final Logger logger = LoggerFactory.getLogger(RegistrationUtils.class);

    private final IPersistenceLayer persistenceLayer;

    public RegistrationUtils(IPersistenceLayer persistenceLayer) {
        this.persistenceLayer = persistenceLayer;
    }

    public RegistrationUtils() {
        this(new PersistenceLayer());
    }

    /**
     * A business process to evaluate an attempt to register a new user.
     * <ol>
     *     <li>Make sure the username and password aren't null or empty</li>
     *     <li>Make sure the user isn't already in the database</li>
     *     <li>Check if the password is sufficiently complex to be secure</li>
     *     <li>Create a new account for this user, saving the user's credentials</li>
     * </ol>
     */
    public RegistrationResult processRegistration(String username, String password) {
        logger.info("Starting registration");
        StringMustNotBeNullOrEmpty(username);
        StringMustNotBeNullOrEmpty(password);

        if (isUserInDatabase(username)) {
            logger.info("cannot register this user - they are already registered");
            return new RegistrationResult(false, ALREADY_REGISTERED);
        }
        // at this point we know the user is not yet registered in the database

        // then we check if the password is good.
        final PasswordResult passwordResult = isPasswordGood(password);
        if (passwordResult.status != SUCCESS) {
            logger.info("user provided a bad password during registration");
            return new RegistrationResult(false, BAD_PASSWORD, passwordResult.toPrettyString());
        }

        // at this point, we feel assured it's ok to save to the database.
        saveToDatabase(username, password);
        logger.info("saving new user, {}, to database", username);
        return new RegistrationResult(true, SUCCESSFULLY_REGISTERED);
    }

    public static RegistrationUtils createEmpty() {
        return new RegistrationUtils(PersistenceLayer.createEmpty());
    }

    public boolean isEmpty() {
        return persistenceLayer.isEmpty();
    }

    /**
     * Whether we qualify a password as good.
     *
     * <p>
     *     To summarize - we check the following here:
     *  </p>
     *  <ol>
     *    <li>The password must not be empty</li>
     *    <li>it must not be too short (less than 6 characters)</li>
     *    <li>it cannot be too long (more than 100 characters - this is because the framework</li>
     *    <li>analysis slows to a crawl with more than 100 characters)</li>
     *    <li>Whether the entropy framework we're using considers the password good.</li>
     * </ol>
     *  <p>See {@link PasswordResult}</p>
     */
    public static PasswordResult isPasswordGood(String password) {
        if (password.isEmpty()) {
            logger.info("password was empty");
            return PasswordResult.createDefault(EMPTY_PASSWORD);
        }
        StringMustNotBeNullOrEmpty(password);

        final boolean isTooSmall = password.length() < 10;
        if (isTooSmall) {
            logger.info("password was too short");
            return PasswordResult.createDefault(TOO_SHORT);
        }
        CheckUtils.mustBeTrueAtThisPoint(isTooSmall == false,
                "At this point, the password cannot be too small");

        final boolean isTooLarge = password.length() > 100;
        if (isTooLarge) {
            logger.info("password was too long");
            return PasswordResult.createDefault(TOO_LONG);
        }
        CheckUtils.mustBeTrueAtThisPoint(isTooLarge == false,
                "At this point, the password cannot be too large");

        // Nbvcxz is a tool that tests entropy on passwords
        // See github.com/GoSimpleLLC/nbvcxz
        final Nbvcxz nbvcxz = new Nbvcxz();
        final Result result = nbvcxz.estimate(password);
        final String suggestions = String.join(";", result.getFeedback().getSuggestion());

        final Double entropy = result.getEntropy();
        CheckUtils.mustBeTrueAtThisPoint(entropy > 0d, "There must be *some* entropy at this point, more than 0");

        String timeToCrackOff = TimeEstimate.getTimeToCrackFormatted(result, "OFFLINE_BCRYPT_12");
        String timeToCrackOn = TimeEstimate.getTimeToCrackFormatted(result, "ONLINE_THROTTLED");
        if (!result.isMinimumEntropyMet()) {
            logger.info("minimum entropy for password was not met");
            return new PasswordResult(INSUFFICIENT_ENTROPY, entropy, timeToCrackOff, timeToCrackOn, suggestions);
        } else {
            logger.info("password met required entropy");
            return new PasswordResult(SUCCESS, entropy, timeToCrackOff, timeToCrackOn, result.getFeedback().getResult());
        }
    }

    public boolean isUserInDatabase(String username) {
        return persistenceLayer.searchForUserByName(username).isPresent();
    }

    private void saveToDatabase(String username, String password) {
        final long userId = persistenceLayer.saveNewUser(username);
        persistenceLayer.updateUserWithPassword(userId, password);
    }

}



================================================
FILE: src/main/java/com/coveros/training/authentication/domainobjects/package-info.java
================================================
/**
 * Domain objects related to authentication
 */
package com.coveros.training.authentication.domainobjects;


================================================
FILE: src/main/java/com/coveros/training/authentication/domainobjects/PasswordResult.java
================================================
package com.coveros.training.authentication.domainobjects;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.checkerframework.checker.nullness.qual.Nullable;


/**
 * This contains the results of checking the complexity of a given
 * password - that is, how good of a password, how secure, is it?
 * See {@link com.coveros.training.authentication.RegistrationUtils#isPasswordGood}
 * for the calculation that generates this.
 */
public final class PasswordResult {

    public final PasswordResultEnums status;
    private final Double entropy;
    public final String timeToCrackOffline;
    private final String timeToCrackOnline;
    private final String message;

    private static final String BASIC_PASSWORD_CHECKS_FAILED = "BASIC_PASSWORD_CHECKS_FAILED";

    public PasswordResult(PasswordResultEnums status,
                          Double entropy,
                          String timeToCrackOffline,
                          String timeToCrackOnline,
                          String message) {

        this.status = status;
        this.entropy = entropy;
        this.timeToCrackOffline = timeToCrackOffline;
        this.timeToCrackOnline = timeToCrackOnline;
        this.message = message;
    }

    /**
     * Return this if any of our very basic attempt to validate
     * the password field fail.  Like passing an empty string, for example.
     */
    public static PasswordResult createDefault(PasswordResultEnums resultStatus) {
        return new PasswordResult(resultStatus, 0d, "", "", BASIC_PASSWORD_CHECKS_FAILED);
    }

    @Override
    public final boolean equals(@Nullable Object obj) {
        if (obj == null) {
            return false;
        }
        if (obj == this) {
            return true;
        }
        if (obj.getClass() != getClass()) {
            return false;
        }
        PasswordResult rhs = (PasswordResult) obj;
        return new EqualsBuilder()
                .append(status, rhs.status)
                .append(entropy, rhs.entropy)
                .append(timeToCrackOffline, rhs.timeToCrackOffline)
                .append(timeToCrackOnline, rhs.timeToCrackOnline)
                .append(message, rhs.message)
                .isEquals();
    }

    @Override
    public final int hashCode() {
        // you pick a hard-coded, randomly chosen, non-zero, odd number
        // ideally different for each class
        return new HashCodeBuilder(15, 33).
                append(status).
                append(entropy).
                append(timeToCrackOffline).
                append(timeToCrackOnline).
                append(message).
                toHashCode();
    }

    public final String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public final String toPrettyString() {
        return String.format("status: %s%n", status) +
                String.format("entropy: %s%n", entropy) +
                String.format("time to crack offline: %s%n", timeToCrackOffline) +
                String.format("time to crack online: %s%n", timeToCrackOnline) +
                String.format("Nbvcxz response: %s%n", message);
    }

    /**
     * Return this to represent an empty result.  Used primarily
     * when we are initializing a variable and don't want to use null.
     */
    public static PasswordResult createEmpty() {
        return new PasswordResult(PasswordResultEnums.NULL, 0d, "", "", "");
    }

    public boolean isEmpty() {
        return this.equals(createEmpty());
    }

}



================================================
FILE: src/main/java/com/coveros/training/authentication/domainobjects/PasswordResultEnums.java
================================================
package com.coveros.training.authentication.domainobjects;

/**
 * All the values currently possible for our
 * assessment of a potential password
 */
public enum PasswordResultEnums {
    TOO_SHORT,

    /**
     * ironic, I know, but if it's too long we're open to DOS attacks.
     * It takes too long to process extremely long passwords.
     */
    TOO_LONG,
    EMPTY_PASSWORD,

    /**
     * as measured by a tool.  See implementation where this is used.
     */
    INSUFFICIENT_ENTROPY,
    SUCCESS,

    /**
     * This is only used for empty password results.  See {@link PasswordResult#createEmpty()}
     */
    NULL
}



================================================
FILE: src/main/java/com/coveros/training/authentication/domainobjects/RegistrationResult.java
================================================
package com.coveros.training.authentication.domainobjects;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.checkerframework.checker.nullness.qual.Nullable;

/**
 * This class holds detailed data on the results of
 * trying to register a new user.  See {@link com.coveros.training.authentication.RegistrationUtils#processRegistration}
 */
public final class RegistrationResult {

    public final boolean wasSuccessfullyRegistered;
    public final RegistrationStatusEnums status;
    private final String message;

    public RegistrationResult(boolean wasSuccessfullyRegistered, RegistrationStatusEnums status, String message) {
        this.wasSuccessfullyRegistered = wasSuccessfullyRegistered;
        this.status = status;
        this.message = message;
    }

    public RegistrationResult(boolean wasSuccessfullyRegistered, RegistrationStatusEnums status) {
        this(wasSuccessfullyRegistered, status, "");
    }

    public final boolean equals(@Nullable Object obj) {
        if (obj == null) {
            return false;
        }
        if (obj == this) {
            return true;
        }
        if (obj.getClass() != getClass()) {
            return false;
        }
        RegistrationResult rhs = (RegistrationResult) obj;
        return new EqualsBuilder()
                .append(wasSuccessfullyRegistered, rhs.wasSuccessfullyRegistered)
                .append(status, rhs.status)
                .append(message, rhs.message)
                .isEquals();
    }

    public final int hashCode() {
        // you pick a hard-coded, randomly chosen, non-zero, odd number
        // ideally different for each class
        return new HashCodeBuilder(15, 33).
                append(wasSuccessfullyRegistered).
                append(status).
                append(message).
                toHashCode();
    }

    public final String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public final String toPrettyString() {
        return String.format("successfully registered: %s%n", wasSuccessfullyRegistered) +
                String.format("status: %s%n", status) +
                String.format("message: %n%n%s%n", message);
    }

    public static RegistrationResult createEmpty() {
        return new RegistrationResult(false, RegistrationStatusEnums.EMPTY);
    }

    public boolean isEmpty() {
        return this.equals(createEmpty());
    }
}



================================================
FILE: src/main/java/com/coveros/training/authentication/domainobjects/RegistrationStatusEnums.java
================================================
package com.coveros.training.authentication.domainobjects;

/**
 * All the values possible for the results of an
 * attempted registration
 */
public enum RegistrationStatusEnums {
    ALREADY_REGISTERED,
    EMPTY_USERNAME,
    EMPTY_PASSWORD,
    SUCCESSFULLY_REGISTERED,
    BAD_PASSWORD,
    EMPTY // represents the state of no status.  Used by the empty registration result.

}



================================================
FILE: src/main/java/com/coveros/training/authentication/domainobjects/User.java
================================================
package com.coveros.training.authentication.domainobjects;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.checkerframework.checker.nullness.qual.Nullable;


/**
 * Represents the data that we consider full and complete to define
 * a particular user.  This coincides neatly with the details in the database.
 */
public final class User {

    /**
     * The username of the user
     */
    public final String name;

    /**
     * The identifier of the user in the database
     */
    public final long id;

    public User(String name, long id) {
        this.name = name;
        this.id = id;
    }

    public final boolean equals(@Nullable Object obj) {
        if (obj == null) {
            return false;
        }
        if (obj == this) {
            return true;
        }
        if (obj.getClass() != getClass()) {
            return false;
        }
        User rhs = (User) obj;
        return new EqualsBuilder()
                .append(id, rhs.id)
                .append(name, rhs.name)
                .isEquals();
    }

    public final int hashCode() {
        // you pick a hard-coded, randomly chosen, non-zero, odd number
        // ideally different for each class
        return new HashCodeBuilder(19, 3).
                append(name).
                append(id).
                toHashCode();
    }

    public final String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public static User createEmpty() {
        return new User("", 0);
    }

    public boolean isEmpty() {
        return this.equals(User.createEmpty());
    }

}



================================================
FILE: src/main/java/com/coveros/training/cartesianproduct/CartesianProduct.java
================================================
package com.coveros.training.cartesianproduct;

import java.util.Set;

public class CartesianProduct {

    public static <T> String calculate(final Set<T> setOfSets) {
        return "";
    }
}



================================================
FILE: src/main/java/com/coveros/training/cartesianproduct/package-info.java
================================================
/**
 * Calculates the cartesian product of multiple sets.
 *<p>
 * See the feature file for more detail, in "cartesianproduct.feature"
 * </p>
 */
package com.coveros.training.cartesianproduct;


================================================
FILE: src/main/java/com/coveros/training/expenses/AlcoholCalculator.java
================================================
package com.coveros.training.expenses;

public class AlcoholCalculator {
    public static AlcoholResult calculate(DinnerPrices dinnerPrices) {
        return AlcoholResult.returnEmpty();
    }
}



================================================
FILE: src/main/java/com/coveros/training/expenses/AlcoholResult.java
================================================
package com.coveros.training.expenses;

public class AlcoholResult {
    private final Double foodPrice;
    private final Double alcoholPrice;
    private final Double foodRatio;

    public AlcoholResult(Double foodPrice, Double alcoholPrice, Double foodRatio) {
        this.foodPrice = foodPrice;
        this.alcoholPrice = alcoholPrice;
        this.foodRatio = foodRatio;
    }

    public static AlcoholResult returnEmpty() {
        return new AlcoholResult(0d,0d,0d);
    }
}



================================================
FILE: src/main/java/com/coveros/training/expenses/DinnerPrices.java
================================================
package com.coveros.training.expenses;

public class DinnerPrices {
    private final double subTotal;
    private final double foodTotal;
    private final double tip;
    private final double tax;

    public DinnerPrices(double subTotal, double foodTotal, double tip, double tax){
        this.subTotal = subTotal;
        this.foodTotal = foodTotal;
        this.tip = tip;
        this.tax = tax;
    }
}



================================================
FILE: src/main/java/com/coveros/training/expenses/package-info.java
================================================
/**
 * Calculates restaurant expenses that include alcohol, per government accounting rules.
 */
package com.coveros.training.expenses;


================================================
FILE: src/main/java/com/coveros/training/helpers/AssertionException.java
================================================
package com.coveros.training.helpers;

/**
 * This exception is thrown whenever something is
 * set to be true as an invariant, but isn't actually true.
 * See https://en.wikipedia.org/wiki/Invariant_(mathematics)#Invariants_in_computer_science
 */
public class AssertionException extends RuntimeException {

    public AssertionException(String message) {
        super(message);
    }
}



================================================
FILE: src/main/java/com/coveros/training/helpers/CheckUtils.java
================================================
package com.coveros.training.helpers;

/**
 * helper methods to assert that certain things in our code are true,
 * or else we throw an exception.
 */
public class CheckUtils {

    private CheckUtils() {
        // using a private constructor to hide the implicit public one.
    }

    /**
     * Asserts that the integer value received is 1 or above.
     * @param parameter a value to check for being positive
     * @throws IllegalArgumentException if the input isn't a positive integer
     */
    public static void IntParameterMustBePositive(long parameter) {
        if (parameter <= 0) {
            throw new IllegalArgumentException("int value must be 1 or above.");
        }
    }

    /**
     * Makes sure the input value is a valid string of length 1 or greater
     * @param values the strings to check
     * @throws IllegalArgumentException if the string is null or empty
     */
    public static void StringMustNotBeNullOrEmpty(String ... values) {
        for (String value: values) {
            if(value == null || value.isEmpty()) {
                throw new IllegalArgumentException("string must not be null or empty at this point");
            }
        }
    }

    /**
     * Used as a general invariant declaration in our code
     * @param mustBeTrue this is a predicate that must be true,
     *                   otherwise we'll throw an {@link AssertionException}
     * @param message the message to be passed along as part of the exception
     */
    public static void mustBeTrueAtThisPoint(boolean mustBeTrue, String message) {
        if (! mustBeTrue) {
            throw new AssertionException(message);
        }
    }

}



================================================
FILE: src/main/java/com/coveros/training/helpers/package-info.java
================================================
/**
 * Various helper classes that are used throughout the application.
 */
package com.coveros.training.helpers;


================================================
FILE: src/main/java/com/coveros/training/helpers/ServletUtils.java
================================================
package com.coveros.training.helpers;


import org.slf4j.Logger;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * These helper methods help to remove duplication in
 * the servlets.  See the methods for more detail on
 * what they do.
 */
public class ServletUtils {

    public static final String RESTFUL_RESULT_JSP = "restfulresult.jsp";
    public static final String RESULT_JSP = "result.jsp";

    private ServletUtils() {
        // using a private constructor to hide the implicit public one.
    }

    /**
     * A user posts information in the regular web application, and we react by forwarding them to another web page.
     * See result.jsp to get an idea.
     */
    public static void forwardToResult(HttpServletRequest request, HttpServletResponse response, Logger logger) {
        try {
            request.getRequestDispatcher(RESULT_JSP).forward(request, response);
        } catch (Exception ex) {
            logger.error(String.format("failed during forward: %s", ex));
        }
    }

    /**
     * A user has made a RESTful web API call, and we are responding with the minimal syntax.
     * See restfulresult.jsp to get an idea.
     */
    public static void forwardToRestfulResult(HttpServletRequest request, HttpServletResponse response, Logger logger) {
        try {
            request.getRequestDispatcher(RESTFUL_RESULT_JSP).forward(request, response);
        } catch (Exception ex) {
            logger.error(String.format("failed during forward: %s", ex));
        }
    }
}



================================================
FILE: src/main/java/com/coveros/training/helpers/StringUtils.java
================================================
package com.coveros.training.helpers;


import org.apache.logging.log4j.core.util.JsonUtils;
import org.checkerframework.checker.nullness.qual.Nullable;



/**
 * Some simple helper methods for Strings.
 */
public class StringUtils {

    private StringUtils() {
        // using a private constructor to hide the implicit public one.
    }

    /**
     * checks the String you pass in; if it's null, return an empty String.
     * Otherwise, return the unchanged string.
     */
    public static String makeNotNullable(@Nullable String s) {
        return s == null ? "" : s;
    }


    // a table of some of the values that may need to be
    // escaped in JSON strings
    static final byte SINGLE_QUOTE    = 39;
    static final byte DOUBLE_QUOTE    = 34;
    static final byte BACKSLASH       = 92;
    static final byte NEW_LINE        = 10;
    static final byte CARRIAGE_RETURN = 13;
    static final byte TAB             = 9;
    static final byte BACKSPACE       = 8;
    static final byte FORM_FEED       = 12;

    /**
     * Given a string, replaces characters so that it is safe to use
     * as JSON
     * @param value String value to convert
     * @return a properly escaped string, usable in JSON
     */
    public static String escapeForJson(String value) {
        StringBuilder sb = new StringBuilder();
        JsonUtils.quoteAsString(value, sb);
        return sb.toString();
    }


}



================================================
FILE: src/main/java/com/coveros/training/library/LibraryBookListAvailableServlet.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.Book;
import com.coveros.training.helpers.ServletUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.annotation.MultipartConfig;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Web API to list books available for borrowing.
 */
@MultipartConfig
@WebServlet(name = "LibraryBookListAvailableSearch", urlPatterns = {"/listavailable"}, loadOnStartup = 1)
public class LibraryBookListAvailableServlet extends HttpServlet {

    private static final long serialVersionUID = 3219972716578253134L;
    private static final Logger logger = LoggerFactory.getLogger(LibraryBookListAvailableServlet.class);
    public static final String RESULT = "result";
    static LibraryUtils libraryUtils = new LibraryUtils();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) {
        final List<Book> books = libraryUtils.listAvailableBooks();
        logger.info("Received request for all available books");
        String result;
        if (books.isEmpty()) {
            result = "No books exist in the database";
        } else {
            final String allBooks = books.stream().map(Book::toOutputString).collect(Collectors.joining(","));
            result = "[" + allBooks + "]";
        }
        request.setAttribute(RESULT, result);

        ServletUtils.forwardToRestfulResult(request, response, logger);
    }


}



================================================
FILE: src/main/java/com/coveros/training/library/LibraryBookListSearchServlet.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.Book;
import com.coveros.training.helpers.ServletUtils;
import com.coveros.training.helpers.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.annotation.MultipartConfig;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Web API to list all books or search books by id / title
 */
@MultipartConfig
@WebServlet(name = "LibraryBookListSearch", urlPatterns = {"/book"}, loadOnStartup = 1)
public class LibraryBookListSearchServlet extends HttpServlet {

    private static final long serialVersionUID = -56598540573518235L;
    private static final Logger logger = LoggerFactory.getLogger(LibraryBookListSearchServlet.class);
    public static final String RESULT = "result";
    static LibraryUtils libraryUtils = new LibraryUtils();

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) {
        final String idString = StringUtils.makeNotNullable(request.getParameter("id"));
        final String title = StringUtils.makeNotNullable(request.getParameter("title"));

        String result;
        if (idString.isEmpty() && title.isEmpty()) {
            result = listAllBooks();
        } else if (! idString.isEmpty() && title.isEmpty()) {
            result = searchById(idString);
        } else if (idString.isEmpty() ) {
            result = searchByTitle(title);
        } else  {  // both id and title have an input
            logger.info("Received request for books, by title and id - id {} and title {}", idString, title);
            result = "Error: please search by either title or id, not both";
        }
        request.setAttribute(RESULT, result);

        ServletUtils.forwardToRestfulResult(request, response, logger);
    }

    private String searchByTitle(String title) {
        logger.info("Received request for books, name requested - searching for book by title {}", title);
        final Book book = libraryUtils.searchForBookByTitle(title);
        if (book.isEmpty()) {
            return "No books found with a title of " + title;
        }
        return "[" + book.toOutputString() + "]";
    }

    private String searchById(String idString) {
        logger.info("Received request for books, id requested - searching for book by id {}", idString);
        int id;
        try {
            id = Integer.parseInt(idString);
        } catch (NumberFormatException ex) {
            return "Error: could not parse the book id as an integer";
        }
        final Book book = libraryUtils.searchForBookById(id);
        if (book.isEmpty()) {
            return "No books found with an id of " + idString;
        }
        return "[" + book.toOutputString() + "]";
    }

    private String listAllBooks() {
        logger.info("Received request for books, no title or id requested - listing all books");
        final List<Book> books = libraryUtils.listAllBooks();
        final String allBooks = books.stream().map(Book::toOutputString).collect(Collectors.joining(","));
        if (allBooks.isEmpty()) {
            return "No books exist in the database";
        }
        return "[" + allBooks + "]";
    }

}



================================================
FILE: src/main/java/com/coveros/training/library/LibraryBorrowerListSearchServlet.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.Borrower;
import com.coveros.training.helpers.ServletUtils;
import com.coveros.training.helpers.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.annotation.MultipartConfig;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Web API to list all borrowers or search borrowers by id / name
 */
@MultipartConfig
@WebServlet(name = "LibraryBorrowerListSearch", urlPatterns = {"/borrower"}, loadOnStartup = 1)
public class LibraryBorrowerListSearchServlet extends HttpServlet {

    private static final long serialVersionUID = -7374339112812653844L;
    private static final Logger logger = LoggerFactory.getLogger(LibraryBorrowerListSearchServlet.class);
    public static final String RESULT = "result";
    static LibraryUtils libraryUtils = new LibraryUtils();

    @Override
    protected void doGet(final HttpServletRequest request, final HttpServletResponse response) {
        final String idString = StringUtils.makeNotNullable(request.getParameter("id"));
        final String name = StringUtils.makeNotNullable(request.getParameter("name"));

        String result;
        if (idString.isEmpty() && name.isEmpty()) {
            result = listAllBorrowers();
        } else if (! idString.isEmpty() && name.isEmpty()) {
            result = searchById(idString);
        } else if (idString.isEmpty() ) {
            result = searchByName(name);
        } else  {  // both id and name have an input
            logger.info("Received request for borrowers, by name and id - id {} and name {}", idString, name);
            result = "Error: please search by either name or id, not both";
        }
        request.setAttribute(RESULT, result);

        ServletUtils.forwardToRestfulResult(request, response, logger);
    }

    private String searchByName(final String name) {
        logger.info("Received request for borrowers, name requested - searching for borrower by name {}", name);
        final Borrower borrower = libraryUtils.searchForBorrowerByName(name);
        if (borrower.isEmpty()) {
            return "No borrowers found with a name of " + name;
        }
        return "["+borrower.toOutputString()+"]";
    }

    private String searchById(final String idString) {
        logger.info("Received request for borrowers, id requested - searching for borrower by id {}", idString);
        int id;
        try {
            id = Integer.parseInt(idString);
        } catch (final NumberFormatException ex) {
            return "Error: could not parse the borrower id as an integer";
        }
        final Borrower borrower = libraryUtils.searchForBorrowerById(id);
        if (borrower.isEmpty()) {
            return "No borrowers found with an id of " + idString;
        }
        return "["+borrower.toOutputString()+"]";
    }

    private String listAllBorrowers() {
        logger.info("Received request for borrowers, no name or id requested - listing all borrowers");
        final List<Borrower> borrowers = libraryUtils.listAllBorrowers();
        final String allBorrowers = borrowers.stream().map(Borrower::toOutputString).collect(Collectors.joining(","));
        if (allBorrowers.isEmpty()) {
            return "No borrowers exist in the database";
        }
        return "["+allBorrowers+"]";
    }


}



================================================
FILE: src/main/java/com/coveros/training/library/LibraryLendServlet.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.LibraryActionResults;
import com.coveros.training.helpers.ServletUtils;
import com.coveros.training.helpers.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.sql.Date;
import java.time.LocalDate;

/**
 * Web API to lend a book to a borrower
 */
@WebServlet(name = "LibraryLendServlet", urlPatterns = {"/lend"}, loadOnStartup = 1)
public class LibraryLendServlet extends HttpServlet {

    private static final long serialVersionUID = -6507483398690297645L;
    private static final Logger logger = LoggerFactory.getLogger(LibraryLendServlet.class);
    static LibraryUtils libraryUtils = new LibraryUtils();

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) {
        LibraryActionResults libraryActionResults;

        final String book = StringUtils.makeNotNullable(request.getParameter("book"));
        request.setAttribute("book", book);

        final String borrower = StringUtils.makeNotNullable(request.getParameter("borrower"));
        request.setAttribute("borrower", borrower);

        if (book.isEmpty()) {
            libraryActionResults = LibraryActionResults.NO_BOOK_TITLE_PROVIDED;
        } else if (borrower.isEmpty()) {
            libraryActionResults = LibraryActionResults.NO_BORROWER_PROVIDED;
        } else {
            final Date now = getDateNow();
            request.setAttribute("date", now.toString());

            logger.info("received request to lend a book, {}, to {}", book, borrower);

            libraryActionResults = libraryUtils.lendBook(book, borrower, now);
        }
        request.setAttribute("result", libraryActionResults.toString());
        request.setAttribute("return_page", "library.html");
        ServletUtils.forwardToResult(request, response, logger);
    }

    /**
     * Wrapping the call to get a date for now,
     * so it's easier to stub for testing.
     */
    Date getDateNow() {
        return Date.valueOf(LocalDate.now());
    }

}



================================================
FILE: src/main/java/com/coveros/training/library/LibraryRegisterBookServlet.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.LibraryActionResults;
import com.coveros.training.helpers.ServletUtils;
import com.coveros.training.helpers.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Web API to register a new book with the library
 */
@WebServlet(name = "LibraryRegisterBookServlet", urlPatterns = {"/registerbook"}, loadOnStartup = 1)
public class LibraryRegisterBookServlet extends HttpServlet {

    private static final long serialVersionUID = -6971471412293552088L;
    private static final Logger logger = LoggerFactory.getLogger(LibraryRegisterBookServlet.class);
    static LibraryUtils libraryUtils = new LibraryUtils();

    @Override
    protected void doPost(final HttpServletRequest request, final HttpServletResponse response) {
        final String book = StringUtils.makeNotNullable(request.getParameter("book"));
        LibraryActionResults libraryActionResults;

        if (book.isEmpty()) {
            libraryActionResults = LibraryActionResults.NO_BOOK_TITLE_PROVIDED;
            logger.info("input for the book field was empty");
        } else {
            request.setAttribute("book", book);

            logger.info("received request to register a book, {}", book);

            libraryActionResults = libraryUtils.registerBook(book);
        }

        request.setAttribute("return_page", "library.html");
        request.setAttribute("result", libraryActionResults.toString());
        ServletUtils.forwardToResult(request, response, logger);
    }

}



================================================
FILE: src/main/java/com/coveros/training/library/LibraryRegisterBorrowerServlet.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.LibraryActionResults;
import com.coveros.training.helpers.ServletUtils;
import com.coveros.training.helpers.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Web API to register a new borrower with the library
 */
@WebServlet(name = "LibraryRegisterBorrowerServlet", urlPatterns = {"/registerborrower"}, loadOnStartup = 1)
public class LibraryRegisterBorrowerServlet extends HttpServlet {

    private static final long serialVersionUID = 3293380381170679010L;
    private static final Logger logger = LoggerFactory.getLogger(LibraryRegisterBorrowerServlet.class);
    static LibraryUtils libraryUtils = new LibraryUtils();

    @Override
    protected void doPost(final HttpServletRequest request, final HttpServletResponse response) {
        final String borrower = StringUtils.makeNotNullable(request.getParameter("borrower"));
        LibraryActionResults libraryActionResults;

        if (borrower.isEmpty()) {
            libraryActionResults = LibraryActionResults.NO_BORROWER_PROVIDED;
            logger.info("input for the borrower field was empty");
        } else {
            request.setAttribute("borrower", borrower);

            logger.info("received request to register a borrower, {}", borrower);

            libraryActionResults = libraryUtils.registerBorrower(borrower);
        }

        request.setAttribute("return_page", "library.html");
        request.setAttribute("result", libraryActionResults.toString());
        ServletUtils.forwardToResult(request, response, logger);
    }

}



================================================
FILE: src/main/java/com/coveros/training/library/LibraryUtils.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.Book;
import com.coveros.training.library.domainobjects.Borrower;
import com.coveros.training.library.domainobjects.LibraryActionResults;
import com.coveros.training.library.domainobjects.Loan;
import com.coveros.training.persistence.IPersistenceLayer;
import com.coveros.training.persistence.PersistenceLayer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

/**
 * Business logic for handling library needs.  For example, {@link #lendBook}
 */
public class LibraryUtils {

    private final IPersistenceLayer persistence;
    private static final Logger logger = LoggerFactory.getLogger(LibraryUtils.class);

    public LibraryUtils(IPersistenceLayer persistence) {
        this.persistence = persistence;
    }

    public LibraryUtils() {
        this(new PersistenceLayer());
    }

    /**
     * Lend a book to a borrower.
     * @param bookTitle The title of a registered book, e.g. see {@link #registerBook(String)}
     * @param borrowerName the name of a registered borrower, e.g. see {@link #registerBorrower(String)}
     * @param borrowDate the date the book is being lent out.
     * @return an enum {@link LibraryActionResults} indicating the resultant status
     */
    public LibraryActionResults lendBook(String bookTitle, String borrowerName, Date borrowDate) {
        logger.info("starting process to lend a book: {} to borrower: {}", bookTitle, borrowerName);
        final Book book = searchForBookByTitle(bookTitle);
        final Book foundBook = new Book(book.id, bookTitle);
        final Borrower borrower = searchForBorrowerByName(borrowerName);
        final Borrower foundBorrower = new Borrower(borrower.id, borrowerName);
        return lendBook(foundBook, foundBorrower, borrowDate);
    }

    public LibraryActionResults lendBook(Book book, Borrower borrower, Date borrowDate) {
        if (book.id == 0) {
            logger.info("book: {} was not registered.  Lending failed", book.title);
            return LibraryActionResults.BOOK_NOT_REGISTERED;
        }

        if (borrower.id == 0) {
            logger.info("borrower: {} was not registered.  Lending failed", borrower.name);
            return LibraryActionResults.BORROWER_NOT_REGISTERED;
        }

        final Loan loan = searchForLoanByBook(book);
        if (!loan.isEmpty()) {
            logger.info("book: {} was already checked out on {}.  Lending failed", book.title, loan.checkoutDate);
            return LibraryActionResults.BOOK_CHECKED_OUT;
        }

        logger.info("book: {} is available for borrowing by valid borrower: {}", book.title, borrower.name);
        createLoan(book, borrower, borrowDate);
        return LibraryActionResults.SUCCESS;
    }

    /**
     * This is here so we can extract out the portion of code
     * that calls to the persistence layer, making it easier to test.
     */
    void createLoan(Book book, Borrower borrower, Date borrowDate) {
        logger.info("creating loan for book: {} by borrower: {}", book.title, borrower.name);
        persistence.createLoan(book, borrower, borrowDate);
    }

    /**
     * Register a borrower with the library
     * @param borrower the name of a borrower
     * @return an enum, {@link LibraryActionResults} indicating the resultant status
     */
    public LibraryActionResults registerBorrower(String borrower) {
        logger.info("trying to register a borrower with name: {}", borrower);
        final Borrower borrowerDetails = searchForBorrowerByName(borrower);
        final boolean borrowerWasFound = !borrowerDetails.equals(Borrower.createEmpty());
        if (borrowerWasFound) {
            logger.info("borrower: {} was already registered", borrower);
            return LibraryActionResults.ALREADY_REGISTERED_BORROWER;
        }
        logger.info("borrower: {} was not found.  Registering new borrower...", borrower);
        saveNewBorrower(borrower);
        return LibraryActionResults.SUCCESS;
    }

    /**
     * This is here so we can extract out the portion of code
     * that calls to the persistence layer, making it easier to test.
     */
    void saveNewBorrower(String borrower) {
        logger.info("saving new borrower: {}", borrower);
        persistence.saveNewBorrower(borrower);
    }

    /**
     * Register a new book with the library
     * @param bookTitle the title of a book
     * @return an enum {@link LibraryActionResults} indicating the resultant status
     */
    public LibraryActionResults registerBook(String bookTitle) {
        if (bookTitle.isEmpty()) {
            throw new IllegalArgumentException("bookTitle was an empty string - disallowed when registering books");
        }
        logger.info("trying to register a book with title: {}", bookTitle);
        final Book book = searchForBookByTitle(bookTitle);
        if (!book.isEmpty()) {
            logger.info("book: {} was already registered", bookTitle);
            return LibraryActionResults.ALREADY_REGISTERED_BOOK;
        }
        logger.info("book: {} was not found.  Registering new book...", bookTitle);
        saveNewBook(bookTitle);
        return LibraryActionResults.SUCCESS;
    }

    /**
     * This is here so we can extract out the portion of code
     * that calls to the persistence layer, making it easier to test.
     */
    void saveNewBook(String bookTitle) {
        logger.info("saving a new book: {}", bookTitle);
        persistence.saveNewBook(bookTitle);
    }

    public Loan searchForLoanByBook(Book book) {
        logger.info("searching for loan by book with title: {}", book.title);
        return persistence.searchForLoanByBook(book).orElse(Loan.createEmpty());
    }


    public List<Loan> searchForLoanByBorrower(Borrower borrower) {
        logger.info("searching for loan by borrower with name: {}", borrower.name);
        return persistence.searchForLoanByBorrower(borrower).orElse(new ArrayList<>());
    }

    public Borrower searchForBorrowerByName(String borrowerName) {
        logger.info("searching for borrower by name: {}", borrowerName);
        return persistence.searchBorrowerDataByName(borrowerName).orElse(Borrower.createEmpty());
    }

    public Book searchForBookByTitle(String title) {
        if (title.isEmpty()) {
            throw new IllegalArgumentException("when searching for a book, must include a non-empty string for title");
        }
        logger.info("search for book with title: {}", title);
        final Book book = persistence.searchBooksByTitle(title).orElse(Book.createEmpty());
        if (book.isEmpty()) {
            logger.info("No book found with title of {}", title);
        } else {
            logger.info("book found with title of {}", title);
        }
        return book;
    }

    /**
     * The id has to be positive.  Exception will be thrown otherwise.
     */
    public Book searchForBookById(long id) {
        if (id < 1) {
            throw new IllegalArgumentException("when searching for a book, must include an id of one or greater");
        }
        logger.info("search for book with id: {}", id);
        final Book book = persistence.searchBooksById(id).orElse(Book.createEmpty());
        if (book.isEmpty()) {
            logger.info("No book found with id of {}", id);
        } else {
            logger.info("Book found with id of {}", id);
        }
        return book;
    }

    /**
     * The id has to be positive.  Exception will be thrown otherwise.
     */
    public Borrower searchForBorrowerById(long id) {
        if (id < 1) {
            throw new IllegalArgumentException("when searching for a borrower, must include an id of one or greater");
        }
        logger.info("search for borrower with id: {}", id);
        final Borrower borrower = persistence.searchBorrowersById(id).orElse(Borrower.createEmpty());
        if (borrower.isEmpty()) {
            logger.info("No borrower found with id of {}", id);
        } else {
            logger.info("borrower found with id of {}", id);
        }
        return borrower;
    }

    public static LibraryUtils createEmpty() {
        return new LibraryUtils(PersistenceLayer.createEmpty());
    }

    public boolean isEmpty() {
        return persistence.isEmpty();
    }

    public LibraryActionResults deleteBook(Book book) {
        logger.info("deleting a book.  id: {}, title: {}", book.id, book.title);
        final Book bookInDatabase = searchForBookByTitle(book.title);
        if (bookInDatabase.isEmpty()) {
            logger.info("book not found in database.  Therefore, obviously, cannot be deleted");
            return LibraryActionResults.NON_REGISTERED_BOOK_CANNOT_BE_DELETED;
        }
        persistence.deleteBook(book.id);
        logger.info("book with title: {} and id: {} was deleted", bookInDatabase.title, bookInDatabase.id);
        return LibraryActionResults.SUCCESS;
    }

    public LibraryActionResults deleteBorrower(Borrower borrower) {
        logger.info("deleting a borrower.  id: {}, name: {}", borrower.id, borrower.name);
        final Borrower borrowerInDatabase = searchForBorrowerByName(borrower.name);
        if (borrowerInDatabase.isEmpty()) {
            logger.info("borrower not found in database.  Therefore, obviously, cannot be deleted");
            return LibraryActionResults.NON_REGISTERED_BORROWER_CANNOT_BE_DELETED;
        }
        persistence.deleteBorrower(borrower.id);
        logger.info("borrower with name: {} and id: {} was deleted", borrowerInDatabase.name, borrowerInDatabase.id);
        return LibraryActionResults.SUCCESS;
    }

    public List<Book> listAllBooks() {
        logger.info("received request to list all books");
        return persistence.listAllBooks().orElse(new ArrayList<>());
    }


    public List<Borrower> listAllBorrowers() {
        logger.info("received request to list all borrowers");
        return persistence.listAllBorrowers().orElse(new ArrayList<>());
    }


    public List<Book> listAvailableBooks() {
        logger.info("received request to list available books");
        return persistence.listAvailableBooks().orElse(new ArrayList<>());
    }
}



================================================
FILE: src/main/java/com/coveros/training/library/package-info.java
================================================
/**
 * Books and borrowers and that sort of thing.
 */
package com.coveros.training.library;


================================================
FILE: src/main/java/com/coveros/training/library/domainobjects/Book.java
================================================
package com.coveros.training.library.domainobjects;

import com.coveros.training.helpers.StringUtils;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.checkerframework.checker.nullness.qual.Nullable;

/**
 * Represents the data that we consider full and complete to define
 * a particular book in the library.  This coincides neatly with the details in the database.
 */
public final class Book {

    /**
     * The title of the book
     */
    public final String title;

    /**
     * The identifier number in our database
     */
    public final long id;

    public Book(long id, String title) {
        this.title = title;
        this.id = id;
    }

    public final boolean equals(@Nullable Object obj) {
        if (obj == null) {
            return false;
        }
        if (obj == this) {
            return true;
        }
        if (obj.getClass() != getClass()) {
            return false;
        }
        Book rhs = (Book) obj;
        return new EqualsBuilder()
                .append(id, rhs.id)
                .append(title, rhs.title)
                .isEquals();
    }

    public final int hashCode() {
        // you pick a hard-coded, randomly chosen, non-zero, odd number
        // ideally different for each class
        return new HashCodeBuilder(13, 33).
                append(id).
                append(title).
                toHashCode();
    }

    public final String toOutputString() {
        return String.format("{\"Title\": \"%s\", \"Id\": \"%s\"}", StringUtils.escapeForJson(title), id);
    }

    public final String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public static Book createEmpty() {
        return new Book(0, "");
    }

    public boolean isEmpty() {
        return this.equals(createEmpty());
    }

}



================================================
FILE: src/main/java/com/coveros/training/library/domainobjects/Borrower.java
================================================
package com.coveros.training.library.domainobjects;

import com.coveros.training.helpers.StringUtils;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.checkerframework.checker.nullness.qual.Nullable;


/**
 * An immutable data value representing the data for a borrower.
 * <p>
 * A borrower is a person who borrows a book from a library.
 * <p>
 * Note that we make our fields public because they are final,
 * so there's no need to have methods wrapping them.
 */
public final class Borrower {

    /**
     * The identifier for this borrower in the database.
     */
    public final long id;

    /**
     * The name of the borrower
     */
    public final String name;

    public Borrower(long id, String name) {
        this.id = id;
        this.name = name;
    }

    public final boolean equals(@Nullable Object obj) {
        if (obj == null) {
            return false;
        }
        if (obj == this) {
            return true;
        }
        if (obj.getClass() != getClass()) {
            return false;
        }
        Borrower rhs = (Borrower) obj;
        return new EqualsBuilder()
                .append(id, rhs.id)
                .append(name, rhs.name)
                .isEquals();
    }

    public final int hashCode() {
        // you pick a hard-coded, randomly chosen, non-zero, odd number
        // ideally different for each class
        return new HashCodeBuilder(17, 37).
                append(id).
                append(name).
                toHashCode();
    }

    public final String toOutputString() {
        return String.format("{\"Name\": \"%s\", \"Id\": \"%s\"}", StringUtils.escapeForJson(name), id);
    }

    public final String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public static Borrower createEmpty() {
        return new Borrower(0, "");
    }

    public boolean isEmpty() {
        return this.equals(createEmpty());
    }
}



================================================
FILE: src/main/java/com/coveros/training/library/domainobjects/LibraryActionResults.java
================================================
package com.coveros.training.library.domainobjects;

/**
 * These are the possible results of business functions
 * related to the library.  For example, you might
 * get ALREADY_REGISTERED_BOOK if you are trying to register
 * a book and it's already in the library.
 */
public enum LibraryActionResults {

    ALREADY_REGISTERED_BOOK,

    /**
     * if a book isn't registered, then of course we cannot delete it.
     */
    NON_REGISTERED_BOOK_CANNOT_BE_DELETED,

    /**
     * if a borrower isn't registered, then of course we cannot delete it.
     */
    NON_REGISTERED_BORROWER_CANNOT_BE_DELETED,
    ALREADY_REGISTERED_BORROWER,
    BOOK_NOT_REGISTERED,
    BORROWER_NOT_REGISTERED,
    /**
     * someone already has this book checked out.
     */
    BOOK_CHECKED_OUT,
    SUCCESS,
    /**
     * if a method needs a book and none is provided
     */
    NO_BOOK_TITLE_PROVIDED,
    /**
     * if a method needs a borrower and none is provided
     */
    NO_BORROWER_PROVIDED,
    /**
     * may be used when initializing a variable of this type
     */
    NULL
}



================================================
FILE: src/main/java/com/coveros/training/library/domainobjects/Loan.java
================================================
package com.coveros.training.library.domainobjects;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.checkerframework.checker.nullness.qual.Nullable;


import java.sql.Date;

/**
 * Represents the data that we consider full and complete to define
 * a particular loan of a book to a borrower in the library.
 * This coincides neatly with the details in the database.
 */
public final class Loan {

    /**
     * The date the book was checked out.
     */
    public final java.sql.Date checkoutDate;

    /**
     * The book that is checked out
     */
    public final Book book;

    /**
     * The borrower that has this book
     */
    public final Borrower borrower;

    /**
     * The identifier of this loan in our database
     */
    public final long id;

    public Loan(Book book, Borrower borrower, long id, Date checkoutDate) {
        this.book = book;
        this.borrower = borrower;
        this.id = id;
        this.checkoutDate = checkoutDate;
    }

    public final boolean equals(@Nullable Object obj) {
        if (obj == null) {
            return false;
        }
        if (obj == this) {
            return true;
        }
        if (obj.getClass() != getClass()) {
            return false;
        }
        Loan rhs = (Loan) obj;
        return new EqualsBuilder()
                .append(id, rhs.id)
                .append(book, rhs.book)
                .append(borrower, rhs.borrower)
                .append(checkoutDate, rhs.checkoutDate)
                .isEquals();
    }

    public final int hashCode() {
        // you pick a hard-coded, randomly chosen, non-zero, odd number
        // ideally different for each class
        return new HashCodeBuilder(5, 21)
                .append(book)
                .append(borrower)
                .append(id)
                .append(checkoutDate)
                .toHashCode();
    }

    public final String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

    public static Loan createEmpty() {
        return new Loan(Book.createEmpty(), Borrower.createEmpty(), 0, new Date(0));
    }

    public boolean isEmpty() {
        return this.equals(createEmpty());
    }
}



================================================
FILE: src/main/java/com/coveros/training/library/domainobjects/package-info.java
================================================
/**
 * These represent concepts within the library domain, like books, borrowers, loans.
 */
package com.coveros.training.library.domainobjects;


================================================
FILE: src/main/java/com/coveros/training/mathematics/Ackermann.java
================================================
package com.coveros.training.mathematics;

import java.math.BigInteger;


public class Ackermann {

    private Ackermann() {
        throw new IllegalStateException("Utility class");
    }

    /**
     * Ackerman function.
     *
     * This version found at https://rosettacode.org/wiki/Ackermann_function#Java
     */
    public static BigInteger ack(BigInteger m, BigInteger n) {
        if (m.equals(BigInteger.ZERO)) {
            return n.add(BigInteger.ONE);
        }
        if (n.equals(BigInteger.ZERO)) {
            return ack(m.subtract(BigInteger.ONE), BigInteger.ONE);
        }
        return ack(m.subtract(BigInteger.ONE), ack(m, n.subtract(BigInteger.ONE)));
    }

    /**
     * A helper method to make it easy to call this with only integers
     * Calls to {@link #ack}
     */
    public static BigInteger calculate(int m, int n) {
        BigInteger bigM = BigInteger.valueOf(m);
        BigInteger bigN = BigInteger.valueOf(n);
        return ack(bigM, bigN);
    }
}



================================================
FILE: src/main/java/com/coveros/training/mathematics/AckermannIterative.java
================================================
package com.coveros.training.mathematics;

import java.math.BigInteger;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.function.BinaryOperator;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * From https://rosettacode.org/wiki/Ackermann_function#Java
 */
public interface AckermannIterative {
    static BigInteger calculate(int m, int n) {
        BigInteger bigM = BigInteger.valueOf(m);
        BigInteger bigN = BigInteger.valueOf(n);
        return $.main(bigM, bigN);
    }
    BigInteger number1();
    BigInteger number2();

    Deque<BigInteger> stack();

    boolean flag();

    enum $ {
        END;

        private static final BigInteger ZERO = BigInteger.ZERO;
        private static final BigInteger ONE = BigInteger.ONE;
        private static final BigInteger TWO = BigInteger.valueOf(2);
        private static final BigInteger THREE = BigInteger.valueOf(3);

        private static AckermannIterative tail(BigInteger number1, BigInteger number2, Deque<BigInteger> stack, boolean flag) {
            return (FunctionalAckermann) field -> {
                switch (field) {
                    case NUMBER_1: return number1;
                    case NUMBER_2: return number2;
                    case STACK: return stack;
                    case FLAG: return flag;
                    default: throw new UnsupportedOperationException(
                            field instanceof Field
                                    ? "Field checker has not been updated properly."
                                    : "Field is not of the correct type."
                    );
                }
            };
        }

        private static final BinaryOperator<BigInteger> ACKERMANN =
                TailRecursive.tailie(
                        (BigInteger number1, BigInteger number2) ->
                                tail(
                                        number1,
                                        number2,
                                        Stream.of(number1).collect(
                                                Collectors.toCollection(ArrayDeque::new)
                                        ),
                                        false
                                )
                        ,
                        ackermann -> {
                            BigInteger number1 = ackermann.number1();
                            BigInteger number2 = ackermann.number2();
                            Deque<BigInteger> stack = ackermann.stack();
                            if (!stack.isEmpty() && !ackermann.flag()) {
                                number1 = stack.pop();
                            }
                            switch (number1.intValue()) {
                                case 0:
                                    return tail(
                                            number1,
                                            number2.add(ONE),
                                            stack,
                                            false
                                    );
                                case 1:
                                    return tail(
                                            number1,
                                            number2.add(TWO),
                                            stack,
                                            false
                                    );
                                case 2:
                                    return tail(
                                            number1,
                                            number2.multiply(TWO).add(THREE),
                                            stack,
                                            false
                                    );
                                default:
                                    if (ZERO.equals(number2)) {
                                        return tail(
                                                number1.subtract(ONE),
                                                ONE,
                                                stack,
                                                true
                                        );
                                    } else {
                                        stack.push(number1.subtract(ONE));
                                        return tail(
                                                number1,
                                                number2.subtract(ONE),
                                                stack,
                                                true
                                        );
                                    }
                            }
                        },
                        ackermann -> ackermann.stack().isEmpty(),
                        AckermannIterative::number2
                )::apply
                ;

        private static BigInteger main(BigInteger m, BigInteger n) {
            return ACKERMANN.apply(m, n);
        }

        private enum Field {
            NUMBER_1,
            NUMBER_2,
            STACK,
            FLAG
        }

        @FunctionalInterface
        private interface FunctionalAckermann extends FunctionalField<Field>, AckermannIterative {
            @Override
            default BigInteger number1() {
                return field(Field.NUMBER_1);
            }

            @Override
            default BigInteger number2() {
                return field(Field.NUMBER_2);
            }

            @Override
            default Deque<BigInteger> stack() {
                return field(Field.STACK);
            }

            @Override
            default boolean flag() {
                return field(Field.FLAG);
            }
        }
    }
}


================================================
FILE: src/main/java/com/coveros/training/mathematics/AckServlet.java
================================================
package com.coveros.training.mathematics;

import com.coveros.training.helpers.ServletUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.annotation.MultipartConfig;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.math.BigInteger;

@MultipartConfig
@WebServlet(name = "AckServlet", urlPatterns = {"/ackermann"}, loadOnStartup = 1)
public class AckServlet extends HttpServlet {

    private static final long serialVersionUID = 5669410483481180165L;
    public static final String RESULT = "result";
    static Logger logger = LoggerFactory.getLogger(AckServlet.class);

    private int putNumberInRequest(String itemName, HttpServletRequest request) {
        int item = Integer.parseInt(request.getParameter(itemName));
        request.setAttribute(itemName, item);
        return item;
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) {
        try {
            int ackParamM = putNumberInRequest("ack_param_m", request);
            int ackParamN = putNumberInRequest("ack_param_n", request);
            String algorithm = request.getParameter("ack_algorithm_choice");

            logger.info("received request to calculate Ackermann's with {} and {} and the {} algorithm", ackParamM, ackParamN, algorithm);

            if (algorithm.equals("tail_recursive")) {
                tailRecursive(request, ackParamM, ackParamN);
            } else {
                regularRecursive(request, ackParamM, ackParamN);
            }

        } catch (NumberFormatException ex) {
            request.setAttribute(RESULT, "Error: only accepts integers");
        }
        forwardToResult(request, response, logger);
    }

    /**
     * Wrapping a static method call for testing.
     */
    void forwardToResult(HttpServletRequest request, HttpServletResponse response, Logger logger) {
        ServletUtils.forwardToRestfulResult(request, response, logger);
    }

    /**
     * Wrapping a request set for easier testing and clarity.
     */
    void regularRecursive(HttpServletRequest request, int itemA, int itemB) {
        final BigInteger result = Ackermann.calculate(itemA, itemB);
        logger.info("Ackermann's result is {}", result);
        request.setAttribute(RESULT, result);
    }

    /**
     * Wrapping a request set for easier testing and clarity.
     */
    void tailRecursive(HttpServletRequest request, int itemA, int itemB) {
        final BigInteger result = AckermannIterative.calculate(itemA, itemB);
        logger.info("Ackermann's result is {}", result);
        request.setAttribute(RESULT, result);
    }

}



================================================
FILE: src/main/java/com/coveros/training/mathematics/Calculator.java
================================================
package com.coveros.training.mathematics;

import org.apache.commons.lang3.tuple.Pair;

/**
 * A simple class to do simple things.
 */
public class Calculator {

    private final Baz baz;

    public Calculator() {
        this.baz = new Baz();
    }

    public Calculator(Baz baz) {
        this.baz = baz;
    }


    /**
     * Simply add two integers
     */
    public static int add(int a, int b) {
        return a + b;
    }

    /**
     * Simply add two doubles.
     */
    public static double add(double a, double b) {
        return a + b;
    }

    /**
     * This method converts integers 0 to 10 into their
     * ordinals.  For example: 0 returns "zero"
     */
    public static String toStringZeroToTen(int i) {
        switch (i) {
            case 0: return "zero";
            case 1: return "one";
            case 2: return "two";
            case 3: return "three";
            case 4: return "four";
            case 5: return "five";
            case 6: return "six";
            case 7: return "seven";
            case 8: return "eight";
            case 9: return "nine";
            case 10: return "ten";
            default: return "dunno";
        }
    }

    /**
     * Add two pairs.
     */
    public static Pair<Integer, Integer> add(Pair<Integer, Integer> pair1, Pair<Integer, Integer> pair2) {
        int newLeftValue = pair1.getLeft() + pair2.getLeft();
        int newRightValue = pair1.getRight() + pair2.getRight();
        return Pair.of(newLeftValue, newRightValue);
    }

    /**
     * Used for teaching
     * testing stubs.
     */
    public static int calculateAndMore(int a, int b, iFoo foo, iBar bar) {
        int c = foo.doComplexThing(a);
        int d = bar.doOtherComplexThing(c);
        return a + b + c + d;
    }

    /**
     * Used for teaching
     * testing stubs.
     */
    public int calculateAndMorePart2(int a) {
        int b = baz.doThirdPartyThing(a);
        return a + b;
    }

    /**
     * Used for teaching
     * testing mocks.
     */
    public void calculateAndMorePart3(int a) {
        baz.doThirdPartyThing(a);
    }

    public interface iFoo {
        int doComplexThing(int a);
    }

    /**
     * An artificial class needed as a dependency
     */
    public static class Foo {
        public int doComplexThing(int a) {
            return a + 1;
        }
    }


    public interface iBar {
        int doOtherComplexThing(int c);
    }

    /**
     * An artificial class needed as a dependency
     */
    public static class Bar {
        public int doOtherComplexThing(int c) {
            return c - 1;
        }
    }

    /**
     * An artificial class needed as a dependency
     */
    public class Baz {

        public int doThirdPartyThing(int a) {
            return 42;
        }
    }
}



================================================
FILE: src/main/java/com/coveros/training/mathematics/Fibonacci.java
================================================
package com.coveros.training.mathematics;

public class Fibonacci {

    private Fibonacci() {
        // static utility class.  Do not construct.
    }

    public static long calculate(long n) {
        long result;

        if (n <= 1) {
            result = n;
        } else {
            result = calculate(n - 1) + calculate(n - 2);
        }

        return result;
    }
}




================================================
FILE: src/main/java/com/coveros/training/mathematics/FibonacciIterative.java
================================================
package com.coveros.training.mathematics;

import java.math.BigInteger;

/**
 * From https://rosettacode.org/wiki/Fibonacci_sequence#Iterative_35
 */
public class FibonacciIterative {

    private FibonacciIterative() {
        throw new IllegalStateException("Utility class");
    }

    /**
     * O(log(n))
     */
    public static BigInteger fibAlgo1(long n) {
        if (n <= 0)
            return BigInteger.ZERO;

        BigInteger i =  (BigInteger.valueOf(n).subtract(BigInteger.ONE));
        BigInteger a = BigInteger.ONE;
        BigInteger b = BigInteger.ZERO;
        BigInteger c = BigInteger.ZERO;
        BigInteger d = BigInteger.ONE;
        BigInteger tmp1;
        BigInteger tmp2;

        while (i.compareTo(BigInteger.ZERO) > 0) {
            if (!i.mod(BigInteger.valueOf(2)).equals(BigInteger.ZERO)) {
                tmp1 = d.multiply(b).add(c.multiply(a));
                tmp2 = d.multiply (b.add(a)).add(c.multiply(b));
                a = tmp1;
                b = tmp2;
            }

            tmp1 = c.pow(2).add(d.pow(2));
            tmp2 = d.multiply(c.multiply(BigInteger.valueOf(2)).add(d));

            c = tmp1;
            d = tmp2;

            i = i.divide(BigInteger.valueOf(2));
        }
        return a.add(b);
    }

    public static BigInteger fibAlgo2(int n)
    {
        if (n < 2)
            return BigInteger.valueOf(n);
        BigInteger ans = BigInteger.ZERO;
        BigInteger n1 =  BigInteger.ZERO;
        BigInteger n2 =  BigInteger.ONE;
        for(n--; n > 0; n--)
        {
            ans = n1.add(n2);
            n1 = n2;
            n2 = ans;
        }
        return ans;
    }

}



================================================
FILE: src/main/java/com/coveros/training/mathematics/FibServlet.java
================================================
package com.coveros.training.mathematics;

import com.coveros.training.helpers.ServletUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.annotation.MultipartConfig;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.math.BigInteger;

@MultipartConfig
@WebServlet(name = "FibServlet", urlPatterns = {"/fibonacci"}, loadOnStartup = 1)
public class FibServlet extends HttpServlet {

    private static final long serialVersionUID = 5290010004362186530L;
    public static final String RESULT = "result";
    public static final String FIBONACCI_VALUE_IS = "Fibonacci value is {}";
    static Logger logger = LoggerFactory.getLogger(FibServlet.class);

    private int putNumberInRequest(String itemName, HttpServletRequest request) {
        int item = Integer.parseInt(request.getParameter(itemName));
        request.setAttribute(itemName, item);
        return item;
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) {
        try {
            int fibParamN = putNumberInRequest("fib_param_n", request);
            String algorithm = request.getParameter("fib_algorithm_choice");

            logger.info("received request to calculate the {}th fibonacci number by {}", fibParamN, algorithm);

            if (algorithm.equals("tail_recursive_1")) {
                tailRecursiveAlgo1Calc(request, fibParamN);
            } else if (algorithm.equals("tail_recursive_2")) {
                tailRecursiveAlgo2Calc(request, fibParamN);
            } else {
                defaultRecursiveCalculation(request, fibParamN);
            }
        } catch (NumberFormatException ex) {
            request.setAttribute(RESULT, "Error: only accepts integers");
        }
        forwardToResult(request, response, logger);
    }

    void tailRecursiveAlgo2Calc(HttpServletRequest request, int fibParamN) {
        final BigInteger result = FibonacciIterative.fibAlgo2(fibParamN);
        logger.info(FIBONACCI_VALUE_IS, result);
        request.setAttribute(RESULT, result);
    }

    void tailRecursiveAlgo1Calc(HttpServletRequest request, int fibParamN) {
        final BigInteger result = FibonacciIterative.fibAlgo1(fibParamN);
        logger.info(FIBONACCI_VALUE_IS, result);
        request.setAttribute(RESULT, result);
    }

    /**
     * Wrapping a static method call for testing.
     */
    void forwardToResult(HttpServletRequest request, HttpServletResponse response, Logger logger) {
        ServletUtils.forwardToRestfulResult(request, response, logger);
    }

    /**
     * Wrapping a request set for easier testing and clarity.
     */
    void defaultRecursiveCalculation(HttpServletRequest request, int itemA) {
        final long result = Fibonacci.calculate(itemA);
        logger.info(FIBONACCI_VALUE_IS, result);
        request.setAttribute(RESULT, result);
    }

}



================================================
FILE: src/main/java/com/coveros/training/mathematics/FunctionalField.java
================================================
package com.coveros.training.mathematics;

@FunctionalInterface
public interface FunctionalField<F extends Enum<?>> {
    Object untypedField(F field);

    @SuppressWarnings("unchecked")
    default <V> V field(F field) {
        return (V) untypedField(field);
    }
}



================================================
FILE: src/main/java/com/coveros/training/mathematics/MathServlet.java
================================================
package com.coveros.training.mathematics;

import com.coveros.training.helpers.ServletUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.annotation.MultipartConfig;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

// Multipart config is necessary so that we can properly receive data when
// sending via the "FormData" API.  Using FormData is part of the modern
// API and also allows sending files.
@MultipartConfig
@WebServlet(name = "MathServlet", urlPatterns = {"/math"}, loadOnStartup = 1)
public class MathServlet extends HttpServlet {

    private static final long serialVersionUID = 1766696864489619658L;
    static org.slf4j.Logger logger = LoggerFactory.getLogger(MathServlet.class);

    private int putNumberInRequest(String itemName, HttpServletRequest request) {
        int item = Integer.parseInt(request.getParameter(itemName));
        request.setAttribute(itemName, item);
        return item;
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) {
        try {
            int itemA = putNumberInRequest("item_a", request);
            int itemB = putNumberInRequest("item_b", request);

            logger.info("received request to add two numbers, {} and {}", itemA, itemB);

            setResultToSum(request, itemA, itemB);
        } catch (NumberFormatException ex) {
            request.setAttribute("result", "Error: only accepts integers");
        }
        forwardToResult(request, response, logger);
    }

    /**
     * Wrapping a static method call for testing.
     */
    void forwardToResult(HttpServletRequest request, HttpServletResponse response, Logger logger) {
        ServletUtils.forwardToRestfulResult(request, response, logger);
    }

    /**
     * Wrapping a request set for easier testing and clarity.
     */
    void setResultToSum(HttpServletRequest request, int itemA, int itemB) {
        final int result = Calculator.add(itemA, itemB);
        request.setAttribute("result", result);
    }

}



================================================
FILE: src/main/java/com/coveros/training/mathematics/package-info.java
================================================
/**
 * Interesting mathematics - adding things, Fibonacci sequence, Ackermann's formula, etc.
 */
package com.coveros.training.mathematics;


================================================
FILE: src/main/java/com/coveros/training/mathematics/TailRecursive.java
================================================
package com.coveros.training.mathematics;

import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;

public interface TailRecursive {

    static <M, N, I, O> BiFunction<M, N, O> tailie(BiFunction<M, N, I> toIntermediary, UnaryOperator<I> unaryOperator, Predicate<I> predicate, Function<I, O> toOutput) {
        return (input1, input2) ->
                $.epsilon(
                        Stream.iterate(
                                toIntermediary.apply(input1, input2),
                                unaryOperator
                        ),
                        predicate,
                        toOutput
                )
                ;
    }

    enum $ {
        END;

        private static <I, O> O epsilon(Stream<I> stream, Predicate<I> predicate, Function<I, O> function) {
            return stream
                    .filter(predicate)
                    .map(function)
                    .findAny()
                    .orElseThrow(RuntimeException::new)
                    ;
        }
    }
}



================================================
FILE: src/main/java/com/coveros/training/persistence/DbServlet.java
================================================
package com.coveros.training.persistence;

import com.coveros.training.helpers.ServletUtils;
import com.coveros.training.helpers.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet(name = "DbServlet", urlPatterns = {"/flyway"}, loadOnStartup = 1)
public class DbServlet extends HttpServlet {

    private static final long serialVersionUID = 1960160729302133928L;
    private final IPersistenceLayer pl;

    public DbServlet() {
        pl = new PersistenceLayer();
    }

    public DbServlet(IPersistenceLayer pl) {
        this.pl = pl;
    }

    private static final String RESULT = "result";
    private static final Logger logger = LoggerFactory.getLogger(DbServlet.class);

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) {
        final String action = StringUtils.makeNotNullable(request.getParameter("action"));
        switch (action) {
            case "clean":
                logger.info("received request to clean the database - i.e. remove all data and schema");
                pl.cleanDatabase();
                request.setAttribute(RESULT, "cleaned");
                break;
            case "migrate":
                logger.info("received request to migrate the database - i.e. add schema, but no data");
                pl.migrateDatabase();
                request.setAttribute(RESULT, "migrated");
                break;
            default:
                logger.info("received request to clean, then migrate the database - i.e. putting it a fresh state with no data");
                pl.cleanAndMigrateDatabase();
                request.setAttribute(RESULT, "cleaned and migrated");
        }
        request.setAttribute("return_page", "library.html");

        ServletUtils.forwardToResult(request, response, logger);
    }


}



================================================
FILE: src/main/java/com/coveros/training/persistence/EmptyDataSource.java
================================================
package com.coveros.training.persistence;

import javax.sql.DataSource;
import java.io.PrintWriter;
import java.sql.Connection;
import java.util.logging.Logger;

/**
 * This class only exists because we want no nulls in our
 * system.  In order to do this, we have to be able to create
 * "empty" versions of our classes.  To create an empty String, for
 * example, is simply "".  But an empty DataSource would look like this.
 */
class EmptyDataSource implements DataSource {
    @Override
    public Connection getConnection() {
        throw new NotImplementedException();
    }

    @Override
    public Connection getConnection(String username, String password) {
        throw new NotImplementedException();
    }

    @Override
    public <T> T unwrap(Class<T> iface) {
        throw new NotImplementedException();
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) {
        throw new NotImplementedException();
    }

    @Override
    public PrintWriter getLogWriter() {
        throw new NotImplementedException();
    }

    @Override
    public void setLogWriter(PrintWriter out) {
        throw new NotImplementedException();
    }

    @Override
    public void setLoginTimeout(int seconds) {
        throw new NotImplementedException();
    }

    @Override
    public int getLoginTimeout() {
        throw new NotImplementedException();
    }

    @Override
    public Logger getParentLogger() {
        throw new NotImplementedException();
    }

}



================================================
FILE: src/main/java/com/coveros/training/persistence/IPersistenceLayer.java
================================================
package com.coveros.training.persistence;

import com.coveros.training.authentication.domainobjects.User;
import com.coveros.training.library.domainobjects.Book;
import com.coveros.training.library.domainobjects.Borrower;
import com.coveros.training.library.domainobjects.Loan;

import java.sql.Date;
import java.util.List;
import java.util.Optional;

/**
 * This is the only place in our application allowed to speak
 * directly to the database.  All business functionality that
 * requires database access must go through here.
 */
public interface IPersistenceLayer {


    /*
     * ==========================================================
     * ==========================================================
     *
     *  Library Persistence Functions
     *
     * ==========================================================
     * ==========================================================
     */


    /**
     * Creates a new borrower in the database
     *
     * @param borrowerName the name of the borrower
     * @return a long id representing its id in the database.  Generated by the database.
     */
    long saveNewBorrower(String borrowerName);


    /**
     * Creates a new loan of a book in the database.
     *
     * @param book       a book we have to loan out
     * @param borrower   a person who is borrowing the book
     * @param borrowDate the date this book was borrowed
     * @return a long id representing its id in the database.  Generated by the database.
     */
    long createLoan(Book book, Borrower borrower, Date borrowDate);


    /**
     * Creates a new book in the database
     *
     * @param bookTitle the String title of a book
     * @return a long id representing its id in the database.  Generated by the database.
     */
    long saveNewBook(String bookTitle);


    /**
     * If we already have a borrower, this command allows us to change
     * their values (except for their id)
     *
     * @param id           the id of a borrower (a constant)
     * @param borrowerName the name of a borrower, which we can change.
     */
    void updateBorrower(long id, String borrowerName);


    /**
     * Delete a book from the database
     * @param id the identifier for a book
     */
    void deleteBook(long id);


    /**
     * Delete a borrower from the database
     * @param id the identifier for a borrower
     */
    void deleteBorrower(long id);


    /**
     * Given the id for a borrower, this command returns their name.
     *
     * @param id a borrower's id.
     * @return the borrower's name, or empty
     */
    Optional<String> getBorrowerName(long id);


    /**
     * Searches for a borrower by name.  Returns full details
     * if found.  return empty borrower data if not found.
     *
     * @param borrowerName the name of a borrower
     * @return a valid borrower, or empty
     */
    Optional<Borrower> searchBorrowerDataByName(String borrowerName);


    /**
     * Find a book by its title
     * @param bookTitle the title of a book
     * @return a valid book, or empty
     */
    Optional<Book> searchBooksByTitle(String bookTitle);


    /**
     * Find a book by its id
     * @param id the database id for a book
     * @return a valid book, or empty
     */
    Optional<Book> searchBooksById(long id);


    /**
     * Find a borrower by their id
     * @param id the database id of a borrower
     * @return a borrower, or empty
     */
    Optional<Borrower> searchBorrowersById(long id);


    /**
     * List all the books in the library
     * @return all the books, or empty
     */
    Optional<List<Book>> listAllBooks();


    /**
     * List all the books currently available for borrowing
     * @return all the available books, or empty
     */
    Optional<List<Book>> listAvailableBooks();


    /**
     * List all the borrowers registered in the library
     * @return a list of all the borrowers, or empty
     */
    Optional<List<Borrower>> listAllBorrowers();


    /**
     * Search for book loans by borrower
     *
     * A borrower may have more than one loan.  But a book
     * can only be loaned to one borrower.  That is why when we
     * search for loans by borrower, we may get multiple loans
     * back, but when we search by book, we only get one back.
     * A book cannot be loaned to two people at the same time!
     *
     * @param borrower a given borrower registered with the library
     * @return a list of loans, or empty
     */
    Optional<List<Loan>> searchForLoanByBorrower(Borrower borrower);


    /**
     * A book can only be loaned to one person.  Find that loan
     * @param book the book used to search for the loan
     * @return a loan, or empty
     */
    Optional<Loan> searchForLoanByBook(Book book);


    /*
     * ==========================================================
     * ==========================================================
     *
     *  Authentication Persistence Functions
     *
     * ==========================================================
     * ==========================================================
     */


    /**
     * Save a new user to the database
     *
     * @param username a String name of a user
     * @return a long id representing its id in the database.  Generated by the database.
     */
    long saveNewUser(String username);


    /**
     * Change the password for a user.
     *
     * We store the user's hash, not their password.  This method
     * first hashes the password, then stores that.
     * @param id the database id for a given user
     * @param password the new password, which we'll hash first before storing
     */
    void updateUserWithPassword(long id, String password);


    /**
     * Search the database for a given borrower by their name
     * @param username a borrower's name
     * @return a user, or empty
     */
    Optional<User> searchForUserByName(String username);


    /**
     * Check whether the credentials are valid
     * @param username a user's chosen username
     * @param password a user's chosen password
     * @return true if the credentials match something we have, empty otherwise
     */
    Optional<Boolean> areCredentialsValid(String username, String password);


    /*
     * ==========================================================
     * ==========================================================
     *
     *  Utility Persistence Functions
     *      General functions related to database persistence
     *
     * ==========================================================
     * ==========================================================
     */


    /**
     * Records the current state of the database as a SQL script,
     * used later for restoring by something like {@link #runRestore(String)}
     *
     * @param backupFileName the path to the sql script, based in the project home directory.
     */
    void runBackup(String backupFileName);


    /**
     * Runs a database restore script.
     *
     * @param backupFileName the path to the sql script, based in the project home directory.
     */
    void runRestore(String backupFileName);


    /**
     * Cleans the database and runs the scripts to update it
     * to the most current version.
     */
    void cleanAndMigrateDatabase();


    /**
     * Cleans the database and runs the scripts to update it
     * to the most current version.
     */
    void cleanDatabase();


    /**
     * Cleans the database and runs the scripts to update it
     * to the most current version.
     */
    void migrateDatabase();


    /**
     * Used to indicate that a persistence layer object is
     * using an empty datasource.  See {@link EmptyDataSource}
     * @return true if the object is "empty"
     */
    boolean isEmpty();
}



================================================
FILE: src/main/java/com/coveros/training/persistence/NotImplementedException.java
================================================
package com.coveros.training.persistence;

class NotImplementedException extends RuntimeException {

    private static final long serialVersionUID = -7063829616868098428L;
}



================================================
FILE: src/main/java/com/coveros/training/persistence/package-info.java
================================================
/**
 * Classes that provide communication with the database
 */
package com.coveros.training.persistence;


================================================
FILE: src/main/java/com/coveros/training/persistence/ParameterObject.java
================================================
package com.coveros.training.persistence;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.checkerframework.checker.nullness.qual.Nullable;


/**
 * a POJO container for the parameters for the {@link SqlData} object.
 */
public final class ParameterObject<T> {

    /**
     * The data we are injecting into the SQL statement
     */
    final Object data;

    /**
     * The type of the data we are injecting into the SQL statement (e.g. Integer, String, etc.)
     */
    final Class<T> type;

    ParameterObject(Object data, Class<T> type) {
        this.data = data;
        this.type = type;
    }

    public final boolean equals(@Nullable Object obj) {
        if (obj == null) {
            return false;
        }
        if (obj == this) {
            return true;
        }
        if (obj.getClass() != getClass()) {
            return false;
        }
        ParameterObject<?> rhs = (ParameterObject<?>) obj;
        return new EqualsBuilder()
                .append(data, rhs.data)
                .append(type, rhs.type)
                .isEquals();
    }

    public final int hashCode() {
        // you pick a hard-coded, randomly chosen, non-zero, odd number
        // ideally different for each class
        return new HashCodeBuilder(63, 7).
                append(data).
                append(type).
                toHashCode();
    }

    public static ParameterObject<Void> createEmpty() {
        return new ParameterObject<>("", Void.class);
    }

    public boolean isEmpty() {
        return this.equals(ParameterObject.createEmpty());
    }

    public final String toString() {
        return ToStringBuilder.reflectionToString(this);
    }

}



================================================
FILE: src/main/java/com/coveros/training/persistence/PersistenceLayer.java
================================================
package com.coveros.training.persistence;

import com.coveros.training.helpers.CheckUtils;
import com.coveros.training.helpers.StringUtils;
import com.coveros.training.library.domainobjects.Book;
import com.coveros.training.library.domainobjects.Borrower;
import com.coveros.training.library.domainobjects.Loan;
import com.coveros.training.authentication.domainobjects.User;
import org.flywaydb.core.Flyway;
import org.h2.jdbcx.JdbcConnectionPool;

import javax.sql.DataSource;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.function.Function;


public class PersistenceLayer implements IPersistenceLayer {

    /*
     * ==========================================================
     * ==========================================================
     *
     *  Class construction - details of making this class
     *
     * ==========================================================
     * ==========================================================
     */

    private final DataSource dataSource;

    public PersistenceLayer() {
        this(obtainConnectionPool());
    }

    PersistenceLayer(DataSource ds) {
        dataSource = ds;
    }

    private static JdbcConnectionPool obtainConnectionPool() {
        return JdbcConnectionPool.create(
                "jdbc:h2:mem:training;MODE=PostgreSQL", "", "");
    }

    /*
     * ==========================================================
     * ==========================================================
     *
     *  Micro ORM
     *    Demo has a simplistic Object Relational Mapper (ORM)
     *    implementation.  These are the methods that comprise
     *    the mechanisms for that.
     *
     *    In comparison, a gargantuan project like Hibernate
     *    would consist of a heckuva-lot-more than this.  That's
     *    why this one is termed, "micro"
     *
     * ==========================================================
     * ==========================================================
     */


    /**
     * This command provides a template to execute updates (including inserts) on the database
     */
    void executeUpdateTemplate(String description, String preparedStatement, Object ... params) {
        final SqlData<Object> sqlData = new SqlData<>(description, preparedStatement, params);
        try (Connection connection = dataSource.getConnection()) {
            try (PreparedStatement st = prepareStatementWithKeys(sqlData, connection)) {
                executeUpdateOnPreparedStatement(sqlData, st);
            }
        } catch (SQLException ex) {
            throw new SqlRuntimeException(ex);
        }
    }


    public long executeInsertTemplate(
            String description,
            String preparedStatement,
            Object ... params) {
        final SqlData<Object> sqlData = new SqlData<>(description, preparedStatement, params);
        try (Connection connection = dataSource.getConnection()) {
            try (PreparedStatement st = prepareStatementWithKeys(sqlData, connection)) {
                return executeInsertOnPreparedStatement(sqlData, st);
            }
        } catch (SQLException ex) {
            throw new SqlRuntimeException(ex);
        }
    }


    <T> long executeInsertOnPreparedStatement(SqlData<T> sqlData, PreparedStatement st) throws SQLException {
        sqlData.applyParametersToPreparedStatement(st);
        st.executeUpdate();
        try (ResultSet generatedKeys = st.getGeneratedKeys()) {
            long newId;
            if (generatedKeys.next()) {
                newId = generatedKeys.getLong(1);
                assert (newId > 0);
            } else {
                throw new SqlRuntimeException("failed Sql.  Description: " + sqlData.description + " SQL code: " + sqlData.preparedStatement);
            }
            return newId;
        }
    }


    private <T> void executeUpdateOnPreparedStatement(SqlData<T> sqlData, PreparedStatement st) throws SQLException {
        sqlData.applyParametersToPreparedStatement(st);
        st.executeUpdate();
    }


    /**
     * A helper method.  Simply creates a prepared statement that
     * always returns the generated keys from the database, like
     * when you insert a new row of data in a table with auto-generating primary key.
     *
     * @param sqlData    see {@link SqlData}
     * @param connection a typical {@link Connection}
     */
    private <T> PreparedStatement prepareStatementWithKeys(SqlData<T> sqlData, Connection connection) throws SQLException {
        return connection.prepareStatement(
                sqlData.preparedStatement,
                Statement.RETURN_GENERATED_KEYS);
    }


    <R> Optional<R> runQuery(SqlData<R> sqlData) {
        try (Connection connection = dataSource.getConnection()) {
            try (PreparedStatement st =
                         connection.prepareStatement(sqlData.preparedStatement)) {
                sqlData.applyParametersToPreparedStatement(st);
                try (ResultSet resultSet = st.executeQuery()) {
                    return sqlData.extractor.apply(resultSet);
                }
            }
        } catch (SQLException ex) {
            throw new SqlRuntimeException(ex);
        }

    }


    /**
     * This is an interface to a wrapper around {@link Function} so we can catch exceptions
     * in the generic function.
     *
     * @param <R> The return type
     * @param <E> The type of the exception
     */
    @FunctionalInterface
    private interface ThrowingFunction<R, E extends Exception> {
        R apply(ResultSet resultSet) throws E;
    }


    /**
     * This wraps the throwing function, so that we are not forced to
     * catch an exception in our ordinary code - it's caught and handled
     * here.
     * @param throwingFunction a lambda that throws a checked exception we have to handle.
     *                         specifically in this case that's a SqlRuntimeException
     * @param <R> the type of value returned
     * @return returns a function that runs and returns a function wrapped with an exception handler
     */
    static <R> Function<ResultSet, R> throwingFunctionWrapper(
            ThrowingFunction<R, Exception> throwingFunction) {

        return resultSet -> {
            try {
                return throwingFunction.apply(resultSet);
            } catch (Exception ex) {
                throw new SqlRuntimeException(ex);
            }
        };
    }


    /**
     * Accepts a function to extract data from a {@link ResultSet} and
     * removes some boilerplate with handling its response.
     * Works in conjunction with {@link #throwingFunctionWrapper}
     * @param extractorFunction a function that extracts data from a {@link ResultSet}
     * @param <T> the type of data we'll retrieve from the {@link ResultSet}
     * @return either the type of data wrapped with an optional, or {@link Optional#empty}
     */
    private <T> Function<ResultSet, Optional<T>> createExtractor(
            ThrowingFunction<Optional<T>, Exception> extractorFunction) {
        return throwingFunctionWrapper(rs -> {
            if (rs.next()) {
                return extractorFunction.apply(rs);
            } else {
                return Optional.empty();
            }
        });
    }


    /*
     * ==========================================================
     * ==========================================================
     *
     *  Business functions
     *     loaning out books, registering users, etc
     *
     * ==========================================================
     * ==========================================================
     */


    // Library functions

    @Override
    public long saveNewBorrower(String borrowerName) {
        CheckUtils.StringMustNotBeNullOrEmpty(borrowerName);
        return executeInsertTemplate(
                "adds a new library borrower",
                "INSERT INTO library.borrower (name) VALUES (?);", borrowerName);
    }


    @Override
    public long createLoan(Book book, Borrower borrower, Date borrowDate) {
        return executeInsertTemplate(
                "Creates a new loan of a book to a borrower",
                "INSERT INTO library.loan (book, borrower, borrow_date) VALUES (?, ?, ?);", book.id, borrower.id, borrowDate);
    }


    @Override
    public long saveNewBook(String bookTitle) {
        CheckUtils.StringMustNotBeNullOrEmpty(bookTitle);
        return executeInsertTemplate(
                "Creates a new book in the database",
                "INSERT INTO library.book (title) VALUES (?);", bookTitle);
    }


    @Override
    public void updateBorrower(long id, String borrowerName) {
        CheckUtils.IntParameterMustBePositive(id);
        CheckUtils.StringMustNotBeNullOrEmpty(borrowerName);
        executeUpdateTemplate(
                "Updates the borrower's data",
                "UPDATE library.borrower SET name = ? WHERE id = ?;", borrowerName, id);
    }


    @Override
    public void deleteBook(long id) {
        CheckUtils.IntParameterMustBePositive(id);
        executeUpdateTemplate(
                "Deletes a book from the database",
                "DELETE FROM library.book WHERE id = ?;", id);
    }


    @Override
    public void deleteBorrower(long id) {
        CheckUtils.IntParameterMustBePositive(id);
        executeUpdateTemplate(
                "Deletes a borrower from the database",
                "DELETE FROM library.borrower WHERE id = ?;", id);
    }


    @Override
    public Optional<String> getBorrowerName(long id) {
        CheckUtils.IntParameterMustBePositive(id);
        Function<ResultSet, Optional<String>> extractor =
                createExtractor(rs -> Optional.of(StringUtils.makeNotNullable(rs.getString(1))));

        return runQuery(new SqlData<>(
                        "get a borrower's name by their id",
                        "SELECT name FROM library.borrower WHERE id = ?;",
                        extractor, id));
    }


    @Override
    public Optional<Borrower> searchBorrowerDataByName(String borrowerName) {
        CheckUtils.StringMustNotBeNullOrEmpty(borrowerName);
        Function<ResultSet, Optional<Borrower>> extractor = createExtractor(rs -> {
            long id = rs.getLong(1);
            String name = StringUtils.makeNotNullable(rs.getString(2));
            return Optional.of(new Borrower(id, name));
        });

        return runQuery(new SqlData<>(
                        "search for details on a borrower by name",
                        "SELECT id, name FROM library.borrower WHERE name = ?;",
                        extractor, borrowerName));
    }


    @Override
    public Optional<Book> searchBooksByTitle(String bookTitle) {
        CheckUtils.StringMustNotBeNullOrEmpty(bookTitle);
        Function<ResultSet, Optional<Book>> extractor = createExtractor(rs -> {
            long id = rs.getLong(1);
            return Optional.of(new Book(id, bookTitle));
        });

        return runQuery(new SqlData<>(
                        "search for a book by title",
                        "SELECT id FROM library.book WHERE title = ?;",
                        extractor, bookTitle));
    }


    @Override
    public Optional<Book> searchBooksById(long id) {
        CheckUtils.IntParameterMustBePositive(id);
        Function<ResultSet, Optional<Book>> extractor = createExtractor(rs -> {
            long bookId = rs.getLong(1);
            String title = StringUtils.makeNotNullable(rs.getString(2));
            return Optional.of(new Book(bookId, title));
        });

        return runQuery(new SqlData<>(
                        "search for a book by title",
                        "SELECT id, title FROM library.book WHERE id = ?;",
                        extractor, id));
    }


    @Override
    public Optional<Borrower> searchBorrowersById(long id) {
        CheckUtils.IntParameterMustBePositive(id);
        Function<ResultSet, Optional<Borrower>> extractor = createExtractor(rs -> {
            long borrowerId = rs.getLong(1);
            String name = StringUtils.makeNotNullable(rs.getString(2));
            return Optional.of(new Borrower(borrowerId, name));
        });

        return runQuery(new SqlData<>(
                        "search for a borrower by name",
                        "SELECT id, name FROM library.borrower WHERE id = ?;",
                        extractor, id));
    }


    @Override
    public Optional<List<Book>> listAllBooks() {
        return listBooks("get all books", "SELECT id, title FROM library.book;");
    }


    @Override
    public Optional<List<Book>> listAvailableBooks() {
        return listBooks("get all available books", "SELECT b.id, b.title FROM library.book b LEFT JOIN library.loan l ON b.id = l.book WHERE l.borrow_date IS NULL;");
    }


    private Optional<List<Book>> listBooks(String description, String sqlCode) {
        Function<ResultSet, Optional<List<Book>>> extractor = createExtractor(rs -> {
            List<Book> bookList = new ArrayList<>();
            do {
                long id = rs.getLong(1);
                String title = StringUtils.makeNotNullable(rs.getString(2));
                bookList.add(new Book(id, title));
            } while (rs.next());
            return Optional.of(bookList);
        });

        return runQuery(new SqlData<>(
                        description,
                        sqlCode,
                        extractor));
    }


    @Override
    public Optional<List<Borrower>> listAllBorrowers() {
        Function<ResultSet, Optional<List<Borrower>>> extractor = createExtractor(rs -> {
            List<Borrower> borrowerList = new ArrayList<>();
            do {
                long id = rs.getLong(1);
                String name = StringUtils.makeNotNullable(rs.getString(2));
                borrowerList.add(new Borrower(id, name));
            } while (rs.next());
            return Optional.of(borrowerList);
        });

        return runQuery(new SqlData<>(
                        "get all borrowers",
                        "SELECT id, name FROM library.borrower;",
                        extractor));
    }


    @Override
    public Optional<List<Loan>> searchForLoanByBorrower(Borrower borrower) {
        Function<ResultSet, Optional<List<Loan>>> extractor = createExtractor(rs -> {
            List<Loan> loans = new ArrayList<>();
            do {
                final long loanId = rs.getLong(1);
                final Date borrowDate = rs.getDate(2);
                final long bookId = rs.getLong(3);
                final String bookTitle = StringUtils.makeNotNullable(rs.getString(4));
                final Date borrowDateNotNullable = borrowDate == null ? Date.valueOf("0000-01-01") : borrowDate;
                loans.add(new Loan(new Book(bookId, bookTitle), borrower, loanId, borrowDateNotNullable));
            } while (rs.next());
            return Optional.of(loans);
        });

        return runQuery(new SqlData<>(
                "search for all loans by borrower",
                "SELECT loan.id, loan.borrow_date, loan.book, book.title " +
                        "FROM library.loan loan " +
                        "JOIN library.book book ON book.id = loan.book " +
                        "WHERE loan.borrower = ?;",
                extractor, borrower.id));
    }


    @Override
    public Optional<Loan> searchForLoanByBook(Book book) {
        Function<ResultSet, Optional<Loan>> extractor = createExtractor(rs -> {
            final long loanId = rs.getLong(1);
            final Date borrowDate = rs.getDate(2);
            final long borrowerId = rs.getLong(3);
            final String borrowerName = StringUtils.makeNotNullable(rs.getString(4));
            final Date borrowDateNotNullable = borrowDate == null ? Date.valueOf("0000-01-01") : borrowDate;
            return Optional.of(new Loan(book, new Borrower(borrowerId, borrowerName), loanId, borrowDateNotNullable));
        });

        return runQuery(new SqlData<>(
                "search for a loan by book",
                "SELECT loan.id, loan.borrow_date, loan.borrower, bor.name " +
                        "FROM library.loan loan " +
                        "JOIN library.borrower bor ON bor.id = loan.borrower " +
                        "WHERE loan.book = ?;",
                extractor, book.id));
    }


    // authentication functions


    @Override
    public long saveNewUser(String username) {
        CheckUtils.StringMustNotBeNullOrEmpty(username);
        return executeInsertTemplate(
                "Creates a new user in the database",
                "INSERT INTO auth.user (name) VALUES (?);", username);
    }


    @Override
    public Optional<User> searchForUserByName(String username) {
        CheckUtils.StringMustNotBeNullOrEmpty(username);
        Function<ResultSet, Optional<User>> extractor = createExtractor(rs -> {
            final long id = rs.getLong(1);
            return Optional.of(new User(username, id));
        });

        return runQuery(new SqlData<>(
                "search for a user by id, return that user if found, otherwise return an empty user",
                "SELECT id  FROM auth.user WHERE name = ?;",
                extractor, username));
    }


    @Override
    public Optional<Boolean> areCredentialsValid(String username, String password) {
        Function<ResultSet, Optional<Boolean>> extractor = createExtractor(rs -> {
            final long id = rs.getLong(1);
            assert (id > 0);
            return Optional.of(true);
        });

        final String hexHash = createHashedValueFromPassword(password);
        return runQuery(new SqlData<>(
                "check to see if the credentials for a user are valid",
                "SELECT id FROM auth.user WHERE name = ? AND password_hash = ?;",
                extractor, username, hexHash));
    }


    @Override
    public void updateUserWithPassword(long id, String password) {
        CheckUtils.IntParameterMustBePositive(id);
        String hashedPassword = createHashedValueFromPassword(password);
        executeUpdateTemplate(
                "Updates the user's password field with a new hash",
                "UPDATE auth.user SET password_hash = ? WHERE id = ?;", hashedPassword, id);
    }


    /**
     * Given a password (for example, "password123"), return a
     * hash of that.
     * @param password a user's password
     * @return a hash of the password value.  a one-way function that returns a unique value,
     *          but different than the original, cannot be converted back to its original value.
     */
    private String createHashedValueFromPassword(String password) {
        CheckUtils.StringMustNotBeNullOrEmpty(password);
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] encodedhash = digest.digest(
                    password.getBytes(StandardCharsets.UTF_8));
            return bytesToHex(encodedhash);
        } catch (NoSuchAlgorithmException e) {
            throw new SqlRuntimeException(e);
        }
    }


    /**
     * Converts an array of bytes to their corresponding hex string
     * @param bytes an array of bytes
     * @return a hex string of that array
     */
    private static String bytesToHex(byte[] bytes) {
        StringBuilder hexString = new StringBuilder();
        for (byte b : bytes) {
            String hex = Integer.toHexString(0xff & b);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }


    /*
     * ==========================================================
     * ==========================================================
     *
     *  General utility methods
     *
     * ==========================================================
     * ==========================================================
     */


    public static IPersistenceLayer createEmpty() {
        return new PersistenceLayer(new EmptyDataSource());
    }


    @Override
    public boolean isEmpty() {
        return this.dataSource.getClass().equals(EmptyDataSource.class);
    }

    @Override
    public void runBackup(String backupFileName) {
        try (Connection connection = dataSource.getConnection()) {
            try (PreparedStatement st = connection.prepareStatement("SCRIPT TO ?")) {
                st.setString(1, backupFileName);
                st.execute();
            }
        } catch (SQLException ex) {
            throw new SqlRuntimeException(ex);
        }
    }

    @Override
    public void runRestore(String backupFileName) {
        String dbScriptsDirectory="src/integration_test/resources/db_sample_files/";
        String fullPathToBackup = dbScriptsDirectory + backupFileName;
        try (Connection connection = dataSource.getConnection()) {
            try (PreparedStatement st = connection.prepareStatement(
                    "DROP SCHEMA IF EXISTS ADMINISTRATIVE CASCADE;" +
                            "DROP SCHEMA IF EXISTS AUTH CASCADE;" +
                            "DROP SCHEMA IF EXISTS LIBRARY CASCADE;")) {
                st.execute();
            }
            try (PreparedStatement st = connection.prepareStatement("RUNSCRIPT FROM ?")) {
                st.setString(1, fullPathToBackup);
                st.execute();
            }
        } catch (SQLException ex) {
            throw new SqlRuntimeException(ex);
        }
    }


    /*
     * ==========================================================
     * ==========================================================
     *
     *  Database migration code - using FlywayDb
     *
     * ==========================================================
     * ==========================================================
     */


    @Override
    public void cleanAndMigrateDatabase() {
        cleanDatabase();
        migrateDatabase();
    }

    @Override
    public void cleanDatabase() {
        Flyway flyway = configureFlyway();
        flyway.clean();
    }

    @Override
    public void migrateDatabase() {
        Flyway flyway = configureFlyway();
        flyway.migrate();
    }

    private Flyway configureFlyway() {
        return Flyway.configure()
                .schemas("ADMINISTRATIVE", "LIBRARY", "AUTH")
                .dataSource(this.dataSource)
                .load();
    }

}



================================================
FILE: src/main/java/com/coveros/training/persistence/SqlData.java
================================================
package com.coveros.training.persistence;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.checkerframework.checker.nullness.qual.Nullable;

import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.function.Function;

/**
 * This class encapsulates some of the actions related to
 * injecting data into a prepared SQL statement, so that
 * we are able to summarize what we want done without
 * all the annoying boilerplate.  See examples like {@link PersistenceLayer#saveNewBorrower}
 * <p>
 * Was necessary to suppress the nullness warnings on this class due to its
 * use of generics.
 * The generic R is the result type - if we ask for a string, R would be a String.
 * On the other hand if R might be a compound type, like Employee.
 */
final class SqlData<R> {

    /**
     * A summary description of what this SQL is doing.
     */
    final String description;

    /**
     * This is the String text of the SQL prepared statement.  We're using PostgreSQL,
     * see https://jdbc.postgresql.org/documentation/81/server-prepare.html
     */
    final String preparedStatement;

    /**
     * The data that we will inject to the SQL statement.
     */
    private final List<ParameterObject<?>> params;

    /**
     * A generic function - takes a {@link ResultSet} straight from the database,
     * and then carries out actions on it, per the user's intentions, to convert it
     * into something of type {@link R}.
     */
    public final Function<ResultSet, Optional<R>> extractor;

    SqlData(String description, String preparedStatement, Object ... params) {
        this(description, preparedStatement, (resultSet -> Optional.empty()), params);
    }

    /**
     * Creates an object that is used to avoid some of the boilerplate
     * in running database CRUD operations.
     *
     * @param description       A string that describes in plain English what this SQL does.
     * @param preparedStatement The SQL that is run on the database
     * @param extractor         see {@link #extractor} a function that is run to convert the returned {@link ResultSet} into whatever we want
     */
    SqlData(String description, String preparedStatement, Function<ResultSet, Optional<R>> extractor, Object ... params) {
        this.description = description;
        this.preparedStatement = preparedStatement;
        this.params = new ArrayList<>();
        if (params.length > 0) {
            generateParams(params);
        }
        this.extractor = extractor;
    }

    /**
     * Loads the parameters for this SQL
     * @param params
     */
    private void generateParams(Object[] params) {
        for (Object param:params) {
            addParameter(param, param.getClass());
        }
    }


    /**
     * A list of the parameters to a particular SQL statement.
     * Add to this list in the order of the statement.
     * For example,
     * for SELECT * FROM USERS WHERE a = ? and b = ?
     * <p>
     * first add the parameter for a, then for b.
     *
     * @param data  a particular item of data.  Any object will do.  Look at {@link #applyParametersToPreparedStatement(PreparedStatement)}
     *              to see what we can process.
     * @param clazz the class of the thing.  I would rather not use reflection, let's keep it above board for now.
     */
    <T> void addParameter(Object data, Class<T> clazz) {
        params.add(new ParameterObject<>(data, clazz));
    }

    /**
     * Loop through the parameters that have been added and
     * serially add them to the prepared statement.
     *
     * @param st a prepared statement
     */
    void applyParametersToPreparedStatement(PreparedStatement st) {
        try {
            for (int i = 1; i <= params.size(); i++) {
                ParameterObject<?> p = params.get(i - 1);
                if (p.type == String.class) {
                    st.setString(i, (String) p.data);
                } else if (p.type == Integer.class) {
                    st.setInt(i, (Integer) p.data);
                } else if (p.type == Long.class) {
                    st.setLong(i, (Long) p.data);
                } else if (p.type == Date.class) {
                    st.setDate(i, (Date) p.data);
                }
            }
        } catch (SQLException e) {
            throw new SqlRuntimeException(e);
        }
    }

    public final boolean equals(@Nullable Object obj) {
        if (obj == null) {
            return false;
        }
        if (obj == this) {
            return true;
        }
        if (obj.getClass() != getClass()) {
            return false;
        }
        SqlData<?> rhs = (SqlData<?>) obj;
        return new EqualsBuilder()
                .append(description, rhs.description)
                .append(preparedStatement, rhs.preparedStatement)
                .append(params, rhs.params)
                .append(extractor, rhs.extractor)
                .isEquals();
    }

    public final int hashCode() {
        // you pick a hard-coded, randomly chosen, non-zero, odd number
        // ideally different for each class
        return new HashCodeBuilder(53, 97)
                .append(description)
                .append(preparedStatement)
                .append(params)
                .append(extractor)
                .toHashCode();
    }

    public final String toString() {
        StringBuilder paramsString = new StringBuilder();
        for(ParameterObject<?> p : params) {
            paramsString.append(p);
        }

        return new ToStringBuilder(this).
                append("description", description).
                append("params", paramsString.toString()).
                append("prepared statement", preparedStatement).
                toString();
    }

    public static <T> SqlData<T> createEmpty() {
        return new SqlData<>("", "");
    }

    public boolean isEmpty() {
        return this.equals(SqlData.createEmpty());
    }

}



================================================
FILE: src/main/java/com/coveros/training/persistence/SqlRuntimeException.java
================================================
package com.coveros.training.persistence;

class SqlRuntimeException extends RuntimeException {

    public SqlRuntimeException(Exception ex) {
        super(ex);
    }

    public SqlRuntimeException(String message) {
        super(message);
    }
}



================================================
FILE: src/main/java/com/coveros/training/tomcat/package-info.java
================================================
/**
 * Classes that configure Tomcat server, specifically.
 * For example, WebAppListner - Tomcat uses that to know
 * what commands to run at server start.
 */
package com.coveros.training.tomcat;


================================================
FILE: src/main/java/com/coveros/training/tomcat/WebAppListener.java
================================================
package com.coveros.training.tomcat;

import com.coveros.training.persistence.IPersistenceLayer;
import com.coveros.training.persistence.PersistenceLayer;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.annotation.WebListener;

/**
 * The purpose of this class is to run certain commands at the
 * start-up of the application.
 */
@WebListener
public class WebAppListener implements ServletContextListener {

    private final IPersistenceLayer pl;

    public WebAppListener() {
        pl = new PersistenceLayer();
    }

    public WebAppListener(IPersistenceLayer pl) {
        this.pl = pl;
    }

    /**
     * Cleans and migrates the database using Flyway.
     * See database migration files like V2__Rest_of_tables_for_auth_and_library.sql
     */
    @Override
    public void contextInitialized(ServletContextEvent sce) {
        //  clean the database and configure the schema
        pl.cleanAndMigrateDatabase();
    }

    /**
     * This does nothing, but it's required to implement per the interface.
     */
    @Override
    public void contextDestroyed(ServletContextEvent sce) {
        // do nothing.
    }

}


================================================
FILE: src/main/javadoc/overview.html
================================================
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
    <TITLE>API Overview</TITLE>
</HEAD>
<BODY>
<p>
    This is the Demo application by <a href="https://www.coveros.com">Coveros</a>.  You can find
    plenty of documentation in the docs/ directory.  It is listed on <a href="https://github.com/7ep/demo">Github</a>
</p>
<p>
    When looking into each class, the following patterns may aid in your understanding.
</p>
<ul>
<li>Files that
    end with "Servlet" are the code that makes the application available to the outside world, that
    is, it is the definition of web API
</li>
<li>Files that end with "Utils" are the business logic for a particular domain</li>
</ul>
</BODY>
</HTML>


================================================
FILE: src/main/resources/README.txt
================================================
The resources consist of:

log4j2.xml      :    configuration for the logging mechanism when Demo runs
db              :    database files


================================================
FILE: src/main/resources/log4j2.xml
================================================
<?xml version="1.0" encoding="UTF-8"?>
<Configuration monitorinterval="30" status="info" strict="true">

    <Appenders>
        <!-- configure the logging output for the console.  See https://logging.apache.org/log4j/2.x/manual/layouts.html -->
        <Appender type="Console" name="Console">
            <Layout type="PatternLayout" pattern="%d %p %m%n"/>
        </Appender>
    </Appenders>


    <Loggers>
        <!-- set the logging to the INFO level - meaning it will show INFO and up (INFO, WARN, FATAL, etc) -->
        <Root level="INFO">
            <AppenderRef ref="Console"/>
        </Root>
    </Loggers>

</Configuration>



================================================
FILE: src/main/resources/db/README.txt
================================================
The database files consist of:

migration           :  Flyway scripts to manipulate the schema of the database.  For example,
                       one thing they do, among others, is to create a user table.


================================================
FILE: src/main/resources/db/migration/V1__Create_person_table.sql
================================================
-- Maybe we'll create a person table - something to hold our librarians and borrowers
create table library.PERSON (
    id serial PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);



================================================
FILE: src/main/resources/db/migration/V2__Rest_of_tables_for_auth_and_library.sql
================================================
-- eh, instead of one table for both librarians and borrowers,
-- we'll create a borrower table for borrowers and a
-- separate auth.USER table for librarians
drop table library.person;

-- here's our borrower table
create table library.BORROWER (
    id serial PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

-- books, obviously - it's a library
create table library.BOOK (
    id serial PRIMARY KEY,
    title VARCHAR(100) NOT NULL
);

-- this tracks which books have been lent to borrowers
create table library.LOAN (
    id serial PRIMARY KEY,
    book int NOT NULL REFERENCES library.BOOK (id) ON DELETE CASCADE,
    borrower int NOT NULL REFERENCES library.BORROWER (id) ON DELETE CASCADE,
    borrow_date date NOT NULL
);

-- this holds the list of librarians, mainly their name and their
-- password hash (used during authentication)
create table auth.USER (
    id serial PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    password_hash VARCHAR(100)
);



================================================
FILE: src/main/webapp/catalog.css
================================================
[Empty file]


================================================
FILE: src/main/webapp/catalog.js
================================================
window.addEventListener( "load", function () {
  function sendData(formObject) {
    const XHR = new XMLHttpRequest();

    // Bind the FormData object and the form element
    const FD = new FormData( formObject );

    // Define what happens on successful data submission
    XHR.addEventListener( "load", function(event) {
      var responseArea = formObject.getElementsByClassName("responsearea")[0];
      responseArea.innerText = event.target.responseText;
    } );

    // Define what happens in case of error
    XHR.addEventListener( "error", function( event ) {
      alert( 'Oops! Something went wrong.' );
    } );


    let queryString = '';
    if (formObject.method == "get") {
        entries = [];
        for(var pair of FD.entries()) {
           entries.push(pair[0]+ '='+ pair[1]);
        }
        queryString = '?'+entries.join('&');
    }

    // Set up our request
    XHR.open( formObject.method, formObject.action + queryString);

    // The data sent is what the user provided in the form
    XHR.send( FD );
  }

  let forms = document.querySelectorAll("form");
  for (let j = 0; j < forms.length; j++){
    // Access the form element...
    let form = forms[j];

    // ...and take over its submit event.
    form.addEventListener( "submit", function ( event ) {
      event.preventDefault();
      sendData(form);
    } );
  }
} );


================================================
FILE: src/main/webapp/dbhelp.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Database help</title>
</head>
<body>
<p>To log in, username and password is empty and this is the URL:</p>
<p>jdbc:h2:mem:training;MODE=PostgreSQL;DB_CLOSE_DELAY=-1</p>
</body>
</html>


================================================
FILE: src/main/webapp/endpointcatalog.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="UTF-8">
    <title>Catalog of endpoints for Demo</title>
    <link rel="stylesheet" href="catalog.css">
    <script type="text/javascript" src="catalog.js"></script>
</head>
<body>

<form id="post_math_form" method="POST" action="math" autocomplete="off">
    <fieldset>
        <legend class="title" id="math_title">The "math" endpoint</legend>
        <p>
            <label>Description:</label>
            <span>Simply adds two integers where the integers are each
                between -2147483648 and 2147483647, and their sum also does
                not exceed that range</span>
        </p>
        <p>
            <label for="math_param_item_a">item_a</label>
            <input type="number" id="math_param_item_a" name="item_a">
        </p>
        <p>
            <label for="math_param_item_b">item_b</label>
            <input type="number" id="math_param_item_b" name="item_b">
        </p>
        <p>
            <label for="math_response">Response:</label>
            <textarea class="responsearea" id="math_response" rows="1" readonly ></textarea>
        </p>
        <p>
            <button id="postToDemoMathButton">POST</button>
        </p>
    </fieldset>
</form>

<form id="post_fibonacci_form" method="POST" action="fibonacci" autocomplete="off">
    <fieldset>
        <legend class="title" id="fibonacci_title">The "fibonacci" endpoint</legend>
        <p>
            <label>Description:</label>
            <span>Calculates the nth value in the Fibonacci sequence, per one of three algorithms.  The
            default, naive, recursive approach is "default recursive".  The other two use more sophisticated
            tail-recursive techniques.</span>
        </p>
        <p>
            <label for="fibonacci_param_fib_param_n">fib_param_n</label>
            <input type="number" id="fibonacci_param_fib_param_n" name="fib_param_n">
        </p>
        <p>
            <label for="fibonacci_param_fib_algorithm_choice">fib_algorithm_choice</label>
            <select id="fibonacci_param_fib_algorithm_choice" name="fib_algorithm_choice">
                <option value="default_recursive">default_recursive</option>
                <option value="tail_recursive_1">tail_recursive_1</option>
                <option value="tail_recursive_2">tail_recursive_2</option>
            </select>
        </p>
        <p>
            <label for="fibonacci_response">Response:</label>
            <textarea class="responsearea" id="fibonacci_response" rows="1" readonly ></textarea>
        </p>
        <p>
            <button id="postToDemoFibonacciButton">POST</button>
        </p>
    </fieldset>
</form>

<form id="post_ackermann_form" method="POST" action="ackermann" autocomplete="off">
    <fieldset>
        <legend class="title" id="ackermann_title">The "ackermann" endpoint</legend>
        <p>
            <label>Description:</label>
            <span>Calculates the nth value in the Ackermann sequence, per one of two algorithms.  The
            default, naive, recursive approach is "default recursive".  The other one uses a sophisticated
            tail-recursive technique.</span>
        </p>
        <p>
            <label for="ackermann_param_ack_param_m">ack_param_m</label>
            <input type="number" id="ackermann_param_ack_param_m" name="ack_param_m">
        </p>
        <p>
            <label for="ackermann_param_ack_param_n">ack_param_n</label>
            <input type="number" id="ackermann_param_ack_param_n" name="ack_param_n">
        </p>
        <p>
            <label for="ackermann_param_ack_algorithm_choice">ack_algorithm_choice</label>
            <select id="ackermann_param_ack_algorithm_choice" name="ack_algorithm_choice">
                <option value="default_recursive">default_recursive</option>
                <option value="tail_recursive">tail_recursive</option>
            </select>
        </p>
        <p>
            <label for="ackermann_response">Response:</label>
            <textarea class="responsearea" id="ackermann_response" rows="1" readonly ></textarea>
        </p>
        <p>
            <button id="postToDemoAckermannButton">POST</button>
        </p>
    </fieldset>
</form>

<form id="get_book_form" method="GET" action="book" autocomplete="off">
    <fieldset>
        <legend class="title" id="book_title">The "book" endpoint</legend>
        <p>
            <label>Description:</label>
            <span>Lists and searches books.  If you provide no input, it will list all books.  If you provide
            an identifier number or a title, it will search by those.  If you provide both an identifier
            and a title, it will return an error message.</span>
        </p>
        <p>
            <label for="book_param_id">id</label>
            <input type="number" id="book_param_id" name="id">
        </p>
        <p>
            <label for="book_param_title">title</label>
            <input type="text" id="book_param_title" name="title">
        </p>
        <p>
            <label for="book_response">Response:</label>
            <textarea class="responsearea" id="book_response" rows="1" readonly ></textarea>
        </p>
        <p>
            <button id="postToDemoBookButton">POST</button>
        </p>
    </fieldset>
</form>

<form id="get_borrower_form" method="GET" action="borrower" autocomplete="off">
    <fieldset>
        <legend class="title" id="borrower_title">The "borrower" endpoint</legend>
        <p>
            <label>Description:</label>
            <span>Lists and searches borrowers.  If you provide no input, it will list all borrowers.  If you provide
            an identifier number or a name, it will search by those.  If you provide both an identifier
            and a name, it will return an error message.</span>
        </p>
        <p>
            <label for="borrower_param_id">id</label>
            <input type="number" id="borrower_param_id" name="id">
        </p>
        <p>
            <label for="borrower_param_name">name</label>
            <input type="text" id="borrower_param_name" name="name">
        </p>
        <p>
            <label for="borrower_response">Response:</label>
            <textarea class="responsearea" id="borrower_response" rows="1" readonly ></textarea>
        </p>
        <p>
            <button id="postToDemoBorrowerButton">POST</button>
        </p>
    </fieldset>
</form>

</body>

</html>


================================================
FILE: src/main/webapp/index.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="UTF-8">
    <title>Demo Index</title>
</head>
<body>
<ul>
    <li><a href="library.html">Library</a></li>
    <li><a href="endpointcatalog.html">Endpoint catalog</a></li>
    <li><a href="commit.html">Current commit</a></li>
</ul>
</body>
</html>


================================================
FILE: src/main/webapp/library.html
================================================
<html>
<head>
    <title>Library</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="main.css">

</head>
<body>

<form method="post" action="login" autocomplete="off" class="regular-form">

    <h2>Librarian login</h2>
    <label for="login_username">Name:</label>
    <p><input type="text" id="login_username" name="username" placeholder="name"/></p>

    <label for="login_password">Password:</label>
    <p><input type="password" id="login_password" name="password" placeholder="password123"/></p>

    <p><input type="submit" id="login_submit" value="login"/></p>
</form>

<form method="post" action="register" autocomplete="off" class="regular-form">

    <h2>Register librarian</h2>
    <label for="register_username">Name:</label>
    <p><input type="text" id="register_username" name="username" placeholder="name"/></p>

    <label for="register_password">Password:</label>
    <p><input type="password" id="register_password" name="password" placeholder="password123"/></p>
    <p><input type="submit" id="register_submit" value="register"/></p>
</form>

<form method="post" action="lend" autocomplete="off" class="regular-form">

    <h2>Borrow a book</h2>

    <label for="lend_book">Book:</label>
    <p><input type="text" id="lend_book" name="book" placeholder="book"/></p>

    <label for="lend_borrower">Borrower:</label>
    <p><input type="text" id="lend_borrower" name="borrower" placeholder="borrower"/></p>

    <p><input type="submit" id="lend_book_submit" value="lend"/></p>
</form>


<form method="post" action="registerbook" autocomplete="off" class="regular-form">

    <h2>Register a book</h2>

    <label for="register_book">Book:</label>
    <p><input type="text" id="register_book" name="book" placeholder="book"/></p>

    <p><input type="submit" id="register_book_submit" value="register"/></p>
</form>


<form method="post" action="registerborrower" autocomplete="off" class="regular-form">

    <h2>Register a borrower</h2>

    <label for="book">Borrower:</label>
    <p><input type="text" id="register_borrower" name="borrower" placeholder="borrower"/></p>

    <p><input type="submit" id="register_borrower_submit" value="register"/></p>
</form>

<div class="buttons">
  <h2>Database versioning</h2>
  <form action="flyway" class="button-form">
      <input type="hidden" name="action" value="clean"/>
      <input type="submit" value="Clean"/>
  </form>
  <form action="flyway" class="button-form">
      <input type="hidden" name="action" value="migrate"/>
      <input type="submit" value="Migrate"/>
  </form>
  <form action="flyway" class="button-form">
      <input type="submit" value="Clean / Migrate"/>
  </form>
    <p><a href="console">Database console</a></p>
    <p><a href="dbhelp.html">Console help</a></p>
</div>

</body>
</html>
<script src="library.js"></script>


================================================
FILE: src/main/webapp/library.js
================================================
/**
  * This code enables us to keep track of which listeners we
  * have added to elements.  For example, if we add a "click"
  * listener, this code adds a new method, getEventListeners,
  * to get the list of event listeners.
  */
var ListenerTracker=new function(){
    // a variable to track whether this has been run already.
    // is set to true after the initial run of this code, so follow-up
    // calls will do nothing.
    var is_active=false;

    // listener tracking datas

    // the web elements (also known as "nodes")
    var _elements_  =[];

    //
    var _listeners_ =[];

    this.init=function(){
        if(!is_active){//avoid duplicate call
            intercep_events_listeners();
        }
        is_active=true;
    };

    // register individual element and returns its corresponding listeners
    var register_element=function(element){
        if(_elements_.indexOf(element)==-1){
            // NB : split by useCapture to make listener easier to find when removing
            var elt_listeners=[{/*useCapture=false*/},{/*useCapture=true*/}];
            _elements_.push(element);
            _listeners_.push(elt_listeners);
        }
        return _listeners_[_elements_.indexOf(element)];
    };
    var intercep_events_listeners = function(){
        // backup overrided methods
        var _super_={
            "addEventListener"      : HTMLElement.prototype.addEventListener,
            "removeEventListener"   : HTMLElement.prototype.removeEventListener
        };

        Element.prototype["addEventListener"]=function(type, listener, useCapture){
            var listeners=register_element(this);
            // add event before to avoid registering if an error is thrown
            _super_["addEventListener"].apply(this,arguments);
            // adapt to 'elt_listeners' index
            useCapture=useCapture?1:0;

            if(!listeners[useCapture][type])listeners[useCapture][type]=[];
            listeners[useCapture][type].push(listener);
        };

        Element.prototype["removeEventListener"]=function(type, listener, useCapture){
            var listeners=register_element(this);
            // add event before to avoid registering if an error is thrown
            _super_["removeEventListener"].apply(this,arguments);
            // adapt to 'elt_listeners' index
            useCapture=useCapture?1:0;
            if(!listeners[useCapture][type])return;
            var lid = listeners[useCapture][type].indexOf(listener);
            if(lid>-1)listeners[useCapture][type].splice(lid,1);
        };

        Element.prototype["getEventListeners"]=function(type){
            var listeners=register_element(this);
            // convert to listener datas list
            var result=[];
            for(var useCapture=0,list;list=listeners[useCapture];useCapture++){
                if(typeof(type)=="string"){// filtered by type
                    if(list[type]){
                        for(var id in list[type]){
                            result.push({"type":type,"listener":list[type][id],"useCapture":!!useCapture});
                        }
                    }
                }else{// all
                    for(var _type in list){
                        for(var id in list[_type]){
                            result.push({"type":_type,"listener":list[_type][id],"useCapture":!!useCapture});
                        }
                    }
                }
            }
            return result;
        };
    };
}();
ListenerTracker.init();

/**
  * Creates a list item. see https://www.w3.org/TR/REC-html40/struct/lists.html#edef-LI
  * Adds an attribute, "data", that holds the text data, and also
  * puts the text in as the inner text node
  */
function createItemForList(text) {
    let item = document.createElement('li');
    item.setAttribute("data",text);
    item.appendChild(document.createTextNode(text));
    return item;
}

/**
  * Adds the behavior that takes place when a user clicks on 
  * an item in the autocomplete search box.  That behavior
  * is to put the item in the text input field
  * @param item an item in the autocomplete list, like a book for example
  * @param the base id on which to select parts of the searchbox
  */
function addItemClickBehavior(item, input_id) {
    console.assert(item.getEventListeners('click').length == 0)
    // if the user clicks, put the value in the input field
    item.addEventListener('click', function(event) {
      let input_field = document.getElementById(input_id);
      input_field.value = event.target.innerText;
      deleteSearchBox(input_id);
    });
    console.assert(item.getEventListeners('click').length == 1)
}

/**
  * given an id, find and remove a searchbox from the page
  */
function deleteSearchBox(input_id) {
  let searchbox = document.getElementById(input_id+"_searchbox");
  if (searchbox != null) {
    searchbox.remove();
  }
}

/**
  * creates a unordered list to contain the autocomplete items
  */
function createList(input_id) {
    var innerList = document.createElement('ul');
    innerList.setAttribute("id", input_id+"_searchlist");
    return innerList;
}

/**
  * creates a div that sits under a given input, as a
  * container to the autocomplete functionality
  */
function createSearchBox(input_id) {
    let searchbox = document.createElement('div');
    searchbox.setAttribute("id", input_id+"_searchbox");
    searchbox.setAttribute("class", "searchbox");
    return searchbox;
}

/**
  * Add a dropdown, a <select> to choose amongst the available books.
  */
function addDropdown(id, getdata) {
    let element = document.getElementById(id);
    let nameOfElement = element.getAttribute("name");
    let parent = element.parentNode;
    parent.removeChild(element);
    let select = document.createElement('select');
    select.setAttribute("id", id);
    select.setAttribute("name", nameOfElement);
    let option;

    getdata().forEach(function( item ) {
        option = document.createElement('option');
        option.value = option.textContent = item;
        select.appendChild( option );
    });
    let defaultOption = document.createElement('option');
    defaultOption.textContent = "Choose here";
    defaultOption.setAttribute("selected", "");
    defaultOption.setAttribute("disabled", "");
    defaultOption.setAttribute("hidden", "");
    select.appendChild(defaultOption)

    parent.appendChild(select);
}

/**
  * adds an autocomplete functionality to a given input.
  * this allows a nicer user experience for the user - as they type,
  * the possibilties are narrowed down, and they click on an item to 
  * select it.
  */
function addAutoComplete(id, getdata) {

    let element = document.getElementById(id);

    /**
      * If the autocomplete searchbox is open and the user presses
      * the escape key, remove the searchbox
      */
    function considerRemovingSearchBoxOnPressingEscape(event) {
        if (event.key === "Escape") {
            deleteSearchBox(id);
        }
    }

    function handleBlurEvent(event) {
        // if we tab from this input to another, we'll get a "relatedTarget", and that's
        // the only situation where we would want to close the searchbox - tabbing to another field.
        // so if it's null, ignore the blur event.
        if (event.relatedTarget === null) {
            return;
        } else {
            deleteSearchBox(id);
        }

    }

    function considerKillingThisModalIfOutsideClick(event) {
      if (event.target != document.getElementById(id+"searchbox")) {
        deleteSearchBox(id);
      }
    }

    document.addEventListener('keydown', considerRemovingSearchBoxOnPressingEscape);
    document.addEventListener('click', considerKillingThisModalIfOutsideClick);
    element.addEventListener('blur', handleBlurEvent);

    function openAutoComplete(event) {
        if (event.key === "Escape") return;
        // as the user presses keys, we keep checking what is current
        // and we provide a search box for that.

        let currentContent = element.value;
        if (currentContent.length == 0) {
            // if there's no text in the input box, don't show a searchbox.

            // delete it if it exists
             deleteSearchBox(id);
        } else {
            // if there's more than one item in the input...
             
           let list = createList(id);

            // if the searchbox doesn't exist, create it...
            if (document.getElementById(id+"_searchbox") == null) {
                let searchbox = createSearchBox(id);
                element.insertAdjacentElement('afterend',searchbox);
                searchbox.appendChild(list);
            }

            // get data for the list.
            let mydata = getdata();

            addFilteredData(list, mydata, currentContent, id);

        }
    }

    // if the user clicks, open the autocomplete
    element.addEventListener('keyup', openAutoComplete);
    element.addEventListener('click', openAutoComplete);

}

/**
  * fills the list with data depending on what the user has typed into 
  * the input field.  
  * @param list the list in the searchbox which holds the results
  * @param data the whole set of data from which to filter
  * @param currentContent what the user has currently typed into the input field
  * @param id the core identifier passed around.  other components build off that,
  *        e.g. if the id is abc, then the list item might be 
  */
function addFilteredData(list, data, currentContent, id) {
    let maxSearchListSize = 5;
    let filteredList = 
        data.filter(text => text.includes(currentContent))
            .slice(0,maxSearchListSize);
    for (var i = 0; i < filteredList.length; i++) {
        let item = createItemForList(filteredList[i]);
        // if the user clicks, put the value in the input field
        addItemClickBehavior(item, id);
        list.appendChild(item);
    }
    return list;
}

/**
  * disables an input if there's no data for it.  I mean, there's 
  * no point then, is there?
  */
function lockInput(id) {
    let input = document.getElementById(id);
    input.placeholder = "locked - no data";
    input.disabled = true;
}

/**
  * Communicates with the server.  
  * @param verb - GET or POST
  * @param path - the "action", the route to the endpoint.  e.g. "fib" or "math"
  * @param data - if posting, the data to send to the server.
  */ 
function talk(verb, path, data) {
  return new Promise((resolve, reject) => {
    let r = new XMLHttpRequest();
    r.open(verb, path, true);
    //Send the proper header information along with the request
    r.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    r.onreadystatechange = function () {
      if (r.readyState != 4 || r.status != 200) {
        return;
      } else {
          resolve(r.responseText);
      }

    }
    r.send(data);
  });
}

/**
  *  converts a json object to an array of strings
  *  given a lambda (extractor) to use in the map function
  *  to extract the string desired.  if parsing fails, do nothing.
  */
let extractData = function(value, extractor) {
  try {
    return JSON.parse(value).map(extractor).sort();
  } catch (error) {
    // do nothing
    // console.log("unable to parse the following as JSON: " + value);
  }
}

// Add an autocomplete to the book input for lending
talk("GET", "listavailable")
.then(function(v){
  betterUserExperienceForInput(v, book => book.Title, "lend_book");
});

// Add an autocomplete to the borrower input for lending
talk("GET", "borrower")
.then(function(v) {
    betterUserExperienceForInput(v, borrower => borrower.Name, "lend_borrower");
});

/**
  * Adding this to an input field will provide a better UX experience
  * in certain cases.
  *
  * This is used on the "lend book" fields, to provide a better experience.
  * specifically, if there are no values to select from on a field, lock
  * the field.  If there are between 1 and 9 values, create a dropdown.
  * otherwise, create an autocommplete mechanism - as the user types values,
  * a searchbox below the input is populated with potential values that fit.
  *
  * @param v data received from XHR in JSON format
  * @param extractor a lambda used in a map across JSON elements to extract a string per item
  * @param the id to a particular text input on the page
  */
function betterUserExperienceForInput(v, extractor, input_id) {
  let receivedData = extractData(v, extractor);
  if (receivedData == null) {
    lockInput(input_id);
  } else if (receivedData && receivedData.length > 0 && receivedData.length < 10) {
    addDropdown(input_id, function() {return receivedData});
  } else {
    addAutoComplete(input_id, function() {return receivedData});
  }
}



function integration_tests() {
console.log("WARNING: integration tests running - these affect state");

// clean the database to begin
talk("GET", "flyway")
.then(function(v){
  return talk("POST", "registerborrower", "borrower=alice");
})
.then(function(v){
  return talk("GET", "borrower");  
})
.then(function(v){
  console.assert(v === '[{"Name": "alice", "Id": "1"}]', 'result was ' + v);  
  return JSON.parse(v).map(borrower => borrower.Name);
})
.then(function(v) {
    console.assert(v[0] === "alice", "result was " + v[0])
    return v;
})
.then(function(v) {
    talk("GET", "flyway");
});
}
// uncomment the function below to run integration tests
// integration_tests();

function unit_tests() {
// testing the createItemForList basics
let item = createItemForList("abc");
console.assert(item.getAttribute("data") === "abc", "data attribute was " + item.getAttribute("data") );
console.assert(item.innerText === "abc", "the inner text was " + item.innerText )

// testing createList
let list = createList("abc")
console.assert(list.id === "abc_searchlist", "list id was " + list.id);

// testing createSearchBox
let searchbox = createSearchBox("abc");
console.assert(searchbox.id === "abc_searchbox")

// testing addFilteredData
let mydata = ['a','b','c'];
let currentContent = 'a';
let filteredDataList = addFilteredData(list, mydata, currentContent, "abc");

}
// uncomment the function below to run unit tests
// unit_tests();


   


================================================
FILE: src/main/webapp/main.css
================================================

  * {
    font-family: sans-serif;
  }

  form {
    margin: 0;
    padding: 0;
  }

  div.buttons, form.regular-form {
    border: 2px black solid;
    width: 165px;
    height: 175px;
    margin: 2px;
    padding: 5px;
    float: left;
    background: #c9d0ce;
   }

   div.searchbox > ul {
    margin: 0;
    padding: 0;
    list-style: none;
   }

   div.searchbox {
    width: 162px;
    height: auto;
    position: absolute;
    background: white;
    border: solid 1px;

   }

   li:hover {
    background: black;
    color: white;
   }

  label {
     font-size: 0.8em;
  }

  p {
    margin: 0px;
    padding: 0px;
  }

  h2 {
    font-size: 1.0em;
    margin: 0;
    padding: 0;
  }

   input[type="text"],
   input[type="number"],
   input[type="password"],
   select {
    background: white;
    width: 100%;
   }

   input[type=submit] {
     font-size: 1.0em;
     margin-top: 15px;
     width: 100%;
   }

    @media all and (max-width: 500px) {

      div.buttons, form.regular-form {
        border: 5px black solid;
        width: 87%;
        height: auto;
        margin: auto;
        float: none;
        background: #c9d0ce;
       }

       input {
        padding: 10px;
       }

        /* the following is necessary on iphone to stop
        the browser from zooming in on a text element when
        it gains focus */
       input[type="color"],
       input[type="date"],
       input[type="datetime"],
       input[type="datetime-local"],
       input[type="email"],
       input[type="month"],
       input[type="number"],
       input[type="password"],
       input[type="search"],
       input[type="tel"],
       input[type="text"],
       input[type="time"],
       input[type="url"],
       input[type="week"],
       select:focus,
       textarea {
         font-size: 16px;
       }

    }


================================================
FILE: src/main/webapp/restfulresult.jsp
================================================
${result}


================================================
FILE: src/main/webapp/result.jsp
================================================
<%@ page contentType="text/html;charset=UTF-8" language="java" session="false" %>
<html>
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Result Page</title>
    </head>
    <body>
        <h2>Result</h2>
        <p><pre id="result">${result}</pre></p>
    </body>
    <p>
    <a href="${return_page}">Return</a>
    </p>
</html>



================================================
FILE: src/main/webapp/WEB-INF/web.xml
================================================
<web-app
        xmlns="http://java.sun.com/xml/ns/j2ee"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
        version="2.4">

    <description>Demo App for Training</description>

    <jsp-config>
        <jsp-property-group>
            <url-pattern>*.jsp</url-pattern>
            <page-encoding>UTF-8</page-encoding>
        </jsp-property-group>
    </jsp-config>

    <servlet>
        <servlet-name>H2Console</servlet-name>
        <servlet-class>org.h2.server.web.WebServlet</servlet-class>
        <init-param>
            <param-name>webAllowOthers</param-name>
            <param-value>true</param-value>
        </init-param>
        <!--
        <init-param>
            <param-name>trace</param-name>
            <param-value></param-value>
        </init-param>
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>H2Console</servlet-name>
        <url-pattern>/console/*</url-pattern>
    </servlet-mapping>

    <session-config>
        <!-- Disables URL-based sessions (no more 'jsessionid' in the URL using Tomcat) -->
        <tracking-mode>COOKIE</tracking-mode>
    </session-config>

</web-app>


================================================
FILE: src/selenified_tests/java/com/coveros/training/selenified/SelenifiedSample.java
================================================
package com.coveros.training.selenified;

import com.coveros.selenified.Locator;
import com.coveros.selenified.Selenified;
import com.coveros.selenified.application.App;
import com.coveros.selenified.element.Element;
import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.ITestContext;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

public class SelenifiedSample extends Selenified {

    static final String BASE_URL =  "http://localhost:8080/demo/";
    static final String LIBRARY_URL = BASE_URL + "library.html";
    static final String RESET_DATABASE_URL = BASE_URL + "flyway";

    @BeforeClass(alwaysRun = true)
    public void beforeClass(ITestContext test) {
        // set the base URL for the tests here
        setAppURL(this, test, LIBRARY_URL);
    }

    @Test(groups = {"sample"}, description = "Check that the title on the page is as expected")
    public void sampleTest() {
        // use this object to manipulate the app
        App app = this.apps.get();
        // verify the correct page title
        app.azzert().titleEquals("Library");
        // verify no issues
        finish();
    }

    @Test(groups = {"sample"}, description = "Make sure we can successfully register a user")
    public void sampleTest2() {
        String username = "fakeuser";
        String password = "asdfpoiasefaslfaje";

        // use this object to manipulate the app
        App app = this.apps.get();

        app.goToURL(RESET_DATABASE_URL);
        app.goToURL(LIBRARY_URL);

        // find the register user field and enter a username to register
        Element register_username = app.newElement(Locator.ID, "register_username");
        register_username.type(username);

        // find the register password field and enter a password
        Element register_password = app.newElement(Locator.ID, "register_password");
        register_password.type(password);

        // click to register the user
        Element register_submit = app.newElement(Locator.ID, "register_submit");
        register_submit.click();

        // assert we find the proper response in the result
        app.azzert().textPresent("successfully registered: true");

        // verify no issues
        finish();
    }

    /**
     *  This is a test to do whatever blah blah blah
     *
     */
    @Test
    public void sampleTest3() {
        // arrange
        App app = this.apps.get();

        final WebDriver driver = app.getDriver();
        String username = "someuser";
        String password = "passworsdosjfasldf";

        app.goToURL(LIBRARY_URL);

        final WebElement login_username = driver.findElement(By.id("login_username"));
        login_username.sendKeys(username);

        final WebElement login_password = driver.findElement(By.id("login_password"));
        login_password.sendKeys(password);

        // act
        final WebElement login_submit = driver.findElement(By.id("login_submit"));
        login_submit.click();

        // assert
        final WebElement result = driver.findElement(By.id("result"));
        Assert.assertEquals("access denied", result.getText());
    }

    /**
     * Testing out logging in with invalid credentials
     *
     * This uses basic Selenium, not Selenified.
     */
    @Test
    public void sampleTest4() {
        App app = this.apps.get();
        final WebDriver driver = app.getDriver();
        String username = "someuser";
        String password = "passworsdosjfasldf";

        app.goToURL(LIBRARY_URL);

        final WebElement register_username = driver.findElement(By.id("register_username"));
        register_username.sendKeys(username);

        final WebElement register_password = driver.findElement(By.id("register_password"));
        register_password.sendKeys(password);

        final WebElement register_submit = driver.findElement(By.id("register_submit"));
        register_submit.click();

        driver.get(LIBRARY_URL);

        final WebElement login_username = driver.findElement(By.id("login_username"));
        login_username.sendKeys(username);

        final WebElement login_password = driver.findElement(By.id("login_password"));
        login_password.sendKeys(password);

        final WebElement login_submit = driver.findElement(By.id("login_submit"));
        login_submit.click();

        final WebElement result = driver.findElement(By.id("result"));
        Assert.assertEquals("access granted", result.getText());

        finish();
    }

}







  


================================================
FILE: src/selenified_tests/resources/selenified.properties
================================================
# connection
#hub=http://localhost:4444
hub=
proxy=
appURL=
# browser
browser=Chrome
headless=false
options=
# logging
defaultWait=5
defaultPoll=50
generatePDF=false
packageResults=false


================================================
FILE: src/test/java/com/coveros/training/authentication/LoginServletTests.java
================================================
package com.coveros.training.authentication;

import com.coveros.training.helpers.ServletUtils;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import static org.mockito.Mockito.*;

/**
 * These tests cover the testing of the endpoint itself, not so much
 * anything it calls.  That's why we mock out everything outside
 * this class.  It makes our tests run very quickly, and enables us to
 * focus with laser-like precision on the functionality this class
 * provides.  Other tests will provide integration testing - but not
 * this one.
 */
public class LoginServletTests {
    public static final String DEFAULT_USERNAME = "alice";
    public static final String DEFAULT_PASSWORD = "abc123";
    private HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    private HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    private RequestDispatcher requestDispatcher = Mockito.mock(RequestDispatcher.class);
    private LoginServlet loginServlet = spy(new LoginServlet());

    /**
     * We'll be mocking requests and responses and so on throughout these
     * tests, so just initialize them here for later use.  Notice
     * that we use spy for the LoginServlet.  This specifically allows us to mock
     * out its loginUtils class, but otherwise, all LoginServlet calls
     * are to the real code.  Why mock LoginUtils? So that we can prevent
     * real calls into that class - it's assumed we have already tested
     * that class on its own, we just want to test code specific to this class.
     *
     * LoginServlet uses a static method, {@link ServletUtils#forwardToResult}
     * that has a call to {@link HttpServletRequest#getRequestDispatcher} that
     * we need to mock out.
     */
    @Before
    public void before() {
        request = mock(HttpServletRequest.class);
        response = mock(HttpServletResponse.class);
        requestDispatcher = mock(RequestDispatcher.class);
        loginServlet = spy(new LoginServlet());
        LoginServlet.loginUtils = Mockito.mock(LoginUtils.class);

        // this is always called in a static method, it's boilerplate for these tests.
        when(request.getRequestDispatcher(ServletUtils.RESULT_JSP)).thenReturn(requestDispatcher);
    }

    /**
     * The basic happy path - a username and password are entered
     */
    @Test
    public void testHappyPathPost() {
        // not the greatest password in the world, but we're not testing that
        // at this level - rather, just that the endpoint got a password at all
        setMock_UsernameAndPassword(DEFAULT_USERNAME, DEFAULT_PASSWORD);
        setMock_LoginUtilsUserRegistered(DEFAULT_USERNAME, DEFAULT_PASSWORD, true);

        loginServlet.doPost(request, response);

        verifyExpectedResult("access granted");
    }

    /**
     * If a particular username and password are not registered, login will fail.  access denied.
     */
    @Test
    public void testShouldGetAccessDeniedIfUserNotRegistered() {
        setMock_UsernameAndPassword(DEFAULT_USERNAME, DEFAULT_PASSWORD);
        setMock_LoginUtilsUserRegistered(DEFAULT_USERNAME, DEFAULT_PASSWORD, false);

        loginServlet.doPost(request, response);

        verifyExpectedResult("access denied");
    }

    /**
     * If they pass in an empty string for username, it should return a message
     * indicating that.
     */
    @Test
    public void testEmptyString_Username() {
        // Empty string for the username.
        setMock_UsernameAndPassword("", DEFAULT_PASSWORD);

        loginServlet.doPost(request, response);

        verifyExpectedResult("no username provided");
    }

    /**
     * If they pass in an empty string for password, it should return a message
     * indicating that.
     */
    @Test
    public void testEmptyString_Password() {
        // Empty string for the password.
        setMock_UsernameAndPassword(DEFAULT_USERNAME, "");

        loginServlet.doPost(request, response);

        verifyExpectedResult("no password provided");
    }

    /**
     * Mock out the username and password values on the request, the
     * user's input to this endpoint
     */
    private void setMock_UsernameAndPassword(String username, String password) {
        when(request.getParameter("username")).thenReturn(username);
        when(request.getParameter("password")).thenReturn(password);
    }


    /**
     * Mock out the call and response for LoginUtils, so we can
     * better control how our endpoint will behave in different situations
     * @param username check this if already registered
     * @param password check this if already registered
     * @param expectedReturn what we want the call to return for the purposes of our test
     */
    private void setMock_LoginUtilsUserRegistered(String username, String password, boolean expectedReturn) {
        when(LoginServlet.loginUtils.isUserRegistered(username, password)).thenReturn(expectedReturn);
    }


    /**
     * A wrapper around the mock just to better document intention
     * @param expectedResult what we expect as the bottom-line result,
     *                       which will end up sent to the user as a message
     */
    private void verifyExpectedResult(String expectedResult) {
        Mockito.verify(request).setAttribute("result", expectedResult);
    }
}



================================================
FILE: src/test/java/com/coveros/training/authentication/LoginUtilsTests.java
================================================
package com.coveros.training.authentication;

import com.coveros.training.persistence.IPersistenceLayer;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import static org.mockito.internal.verification.VerificationModeFactory.times;

public class LoginUtilsTests {

    private IPersistenceLayer mockPersistenceLayer = Mockito.mock(IPersistenceLayer.class);
    private LoginUtils loginUtils = Mockito.spy(new LoginUtils(mockPersistenceLayer));


    @Before
    public void init() {
        mockPersistenceLayer = Mockito.mock(IPersistenceLayer.class);
        loginUtils = Mockito.spy(new LoginUtils(mockPersistenceLayer));
    }

    @Test
    public void testCanCreateEmpty() {
        final LoginUtils loginUtils = LoginUtils.createEmpty();
        Assert.assertTrue(loginUtils.isEmpty());
    }

    @Test
    public void testCanSeeIfUserRegistered() {
        loginUtils.isUserRegistered("alice", "abc123");
        Mockito.verify(mockPersistenceLayer, times(1)).areCredentialsValid("alice", "abc123");
    }

}



================================================
FILE: src/test/java/com/coveros/training/authentication/RegisterServletTests.java
================================================
package com.coveros.training.authentication;

import com.coveros.training.authentication.domainobjects.RegistrationResult;
import com.coveros.training.authentication.domainobjects.RegistrationStatusEnums;
import com.coveros.training.helpers.ServletUtils;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import static org.mockito.Mockito.*;

public class RegisterServletTests {

    private static final String ALICE = "alice";
    private static final RegistrationResult EMPTY_USERNAME = new RegistrationResult(false, RegistrationStatusEnums.EMPTY_USERNAME);
    private static final RegistrationResult SUCCESSFUL_REGISTRATION = new RegistrationResult(true, RegistrationStatusEnums.SUCCESSFULLY_REGISTERED);
    private HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    private HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    private RequestDispatcher requestDispatcher = Mockito.mock(RequestDispatcher.class);
    private RegisterServlet registerServlet = spy(new RegisterServlet());

    @Before
    public void before() {
        request = mock(HttpServletRequest.class);
        response = mock(HttpServletResponse.class);
        requestDispatcher = mock(RequestDispatcher.class);
        registerServlet = spy(new RegisterServlet());
        RegisterServlet.registrationUtils = Mockito.mock(RegistrationUtils.class);
    }

    /**
     * Makes sure that the request dispatcher sends the user to the right place.
     * <p>
     * If the user enters no name when registering, they should be
     * sent to the error page "empty_username.html"
     */
    @Test
    public void doPostWithoutName() {
        // given a user entered an empty string for username
        mockRequestParam("username", "");
        mockRequestParam("password", "");
        mockRegisterUserToReturnSomeResponse(EMPTY_USERNAME);
        mockRequestDispatcherForExpectedRedirection(ServletUtils.RESULT_JSP);

        // do the post
        registerServlet.doPost(request, response);

        // verify that the correct redirect was chosen.
        verify(request).getRequestDispatcher(ServletUtils.RESULT_JSP);
    }

    /**
     * Makes sure that the request dispatcher sends the user to the right place.
     * <p>
     * If the user enters their name when registering, they should be
     * sent to the successful registration page.
     */
    @Test
    public void doPostWithName() {
        // given a user entered their username
        mockRequestParam("username", "Alice");
        mockRequestParam("password", "password123");
        mockRegisterUserToReturnSomeResponse(SUCCESSFUL_REGISTRATION);
        mockRequestDispatcherForExpectedRedirection(ServletUtils.RESULT_JSP);

        // do the post
        registerServlet.doPost(request, response);

        // verify that the correct redirect was chosen.
        verify(request).getRequestDispatcher(ServletUtils.RESULT_JSP);
    }

    /**
     * If they pass in an empty string, it should return a message
     * indicating that.
     */
    @Test
    public void testEmptyString_Username() {
        when(request.getRequestDispatcher(ServletUtils.RESULT_JSP)).thenReturn(requestDispatcher);
        String emptyString = "";
        when(request.getParameter("username")).thenReturn(emptyString);
        when(request.getParameter("password")).thenReturn("abc123");

        // do the post
        registerServlet.doPost(request, response);

        // verify that the missing book title was handled
        Mockito.verify(request).setAttribute("result", "no username provided");
    }

    /**
     * If they pass in an empty string, it should return a message
     * indicating that.
     */
    @Test
    public void testEmptyString_Password() {
        when(request.getRequestDispatcher(ServletUtils.RESULT_JSP)).thenReturn(requestDispatcher);
        String emptyString = "";
        when(request.getParameter("password")).thenReturn(emptyString);
        when(request.getParameter("username")).thenReturn(ALICE);

        // do the post
        registerServlet.doPost(request, response);

        // verify that the missing book title was handled
        Mockito.verify(request).setAttribute("result", "no password provided");
    }


    private void mockRegisterUserToReturnSomeResponse(RegistrationResult expectedResult) {
        when(RegisterServlet.registrationUtils.processRegistration(Mockito.anyString(), Mockito.anyString())).thenReturn(expectedResult);
    }

    private void mockRequestDispatcherForExpectedRedirection(String expectedPath) {
        when(request.getRequestDispatcher(expectedPath)).thenReturn(requestDispatcher);
    }

    private void mockRequestParam(String paramName, String name) {
        when(request.getParameter(paramName)).thenReturn(name);
    }


}



================================================
FILE: src/test/java/com/coveros/training/authentication/RegistrationUtilsTests.java
================================================
package com.coveros.training.authentication;

import com.coveros.training.authentication.domainobjects.*;
import com.coveros.training.persistence.IPersistenceLayer;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class RegistrationUtilsTests {

    private static final String GOOD_PASSWORD = "LpcVWwRkWSNVH";
    private static final String ALICE = "alice";
    private static final String BAD_PASSWORD = "abc123horsestaples";
    private final IPersistenceLayer persistenceLayer = mock(IPersistenceLayer.class);
    private final RegistrationUtils registrationUtils = new RegistrationUtils(persistenceLayer);

    /**
     * a really short password can be found by brute force extremely quickly,
     * making this highly insecure
     */
    @Test
    public void testShouldFailOnShortPassword() {
        final PasswordResult result = RegistrationUtils.isPasswordGood("abc");
        Assert.assertEquals(PasswordResultEnums.TOO_SHORT, result.status);
    }

    @Test
    public void testShouldFailOnEmptyPassword_EmptyString() {
        final PasswordResult result = RegistrationUtils.isPasswordGood("");
        Assert.assertEquals(PasswordResultEnums.EMPTY_PASSWORD, result.status);
    }

    /**
     * A lightweight performance test for a slow call
     */
    @Ignore
    @Test
    public void testShouldPerformWell() {
        long start = System.currentTimeMillis();
        final List<String> goodPasswords =
                Arrays.asList(
                        "XaZE}SkOC/@k#blv}U+wOlDfj=a]q",
                        "-MzlAim%Zuh.=B|8N|Vd~`l5?*Cs,ZH\\'l/76t-9]W\\D$Il#vynO+~y_@",
                        "lm=U(#C;@Bl*jvEy_*U1QlR@3sje");
        for (String password : goodPasswords) {
            RegistrationUtils.isPasswordGood(password);
        }
        long finish = System.currentTimeMillis();
        long timeElapsed = finish - start;

        Assert.assertTrue("All these calls should have finished in a short time.  " +
                "Time elapsed was " + timeElapsed, timeElapsed < 1500);
    }

    /**
     * If we provide a good password, then by golly we should get that
     * as a result from our {@link RegistrationUtils#isPasswordGood} method.
     */
    @Test
    public void testShouldHaveSufficientEntropyInPassword() {
        final PasswordResult result = RegistrationUtils.isPasswordGood(GOOD_PASSWORD);
        Assert.assertEquals(PasswordResultEnums.SUCCESS, result.status);
    }

    /**
     * Not really a lot to test here...
     */
    @Test
    public void testShouldDetermineIfUserInDatabase() {
        // mock that a user is found when we search for them
        when(persistenceLayer.searchForUserByName(ALICE)).thenReturn(Optional.of(new User(ALICE, 1)));

        final boolean result = registrationUtils.isUserInDatabase(ALICE);

        Assert.assertTrue(result);
    }

    /**
     * Testing registration without hitting the actual database.
     * The password has to be sufficient to meet the entropy stipulations.
     * We need to mock the calls that will have been sent to the database.
     */
    @Test
    public void testShouldProcessRegistration_HappyPath() {
        // this needs to not find a user
        when(persistenceLayer.searchForUserByName(ALICE)).thenReturn(Optional.empty());
        RegistrationResult expectedResult = new RegistrationResult(true, RegistrationStatusEnums.SUCCESSFULLY_REGISTERED);

        final RegistrationResult registrationResult =
                registrationUtils.processRegistration(ALICE, GOOD_PASSWORD);

        Assert.assertEquals(expectedResult, registrationResult);
    }

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /**
     * If we pass in an empty username, we should get a response that
     * registration failed.
     */
    @Test
    public void testShouldProcessRegistration_EmptyUsername() {
        thrown.expect(IllegalArgumentException.class);
        thrown.expectMessage("string must not be null or empty at this point");
        registrationUtils.processRegistration("", GOOD_PASSWORD);
    }

    /**
     * Registration should fail if the password isn't good enough.
     */
    @Test
    public void testShouldProcessRegistration_BadPassword() {
        // this needs to not find a user
        when(persistenceLayer.searchForUserByName(ALICE)).thenReturn(Optional.empty());
        final PasswordResult result = RegistrationUtils.isPasswordGood(BAD_PASSWORD);
        RegistrationResult expectedResult = new RegistrationResult(false, RegistrationStatusEnums.BAD_PASSWORD, result.toPrettyString());

        final RegistrationResult registrationResult =
                registrationUtils.processRegistration(ALICE, BAD_PASSWORD);

        Assert.assertEquals(expectedResult, registrationResult);
    }

    /**
     * Registration should fail if we're trying to register an already-existing user.
     */
    @Test
    public void testShouldProcessRegistration_ExistingUser() {
        // this needs to find an existing user - so they are already registered
        when(persistenceLayer.searchForUserByName(ALICE)).thenReturn(Optional.of(new User(ALICE, 1)));
        RegistrationResult expectedResult = new RegistrationResult(false, RegistrationStatusEnums.ALREADY_REGISTERED);

        final RegistrationResult registrationResult =
                registrationUtils.processRegistration(ALICE, GOOD_PASSWORD);

        Assert.assertEquals(expectedResult, registrationResult);
    }

    @Test
    public void testEmptyObject() {
        final RegistrationUtils registrationUtils = RegistrationUtils.createEmpty();
        Assert.assertTrue(registrationUtils.isEmpty());
    }

}



================================================
FILE: src/test/java/com/coveros/training/authentication/domainobjects/PasswordResultTests.java
================================================
package com.coveros.training.authentication.domainobjects;

import nl.jqno.equalsverifier.EqualsVerifier;
import org.junit.Assert;
import org.junit.Test;

public class PasswordResultTests {

    @Test
    public void testShouldHaveEqualsAndHashcodeImplementedCorrectly() {
        EqualsVerifier.forClass(PasswordResult.class).verify();
    }

    @Test
    public void testShouldOutputGoodString() {
        final PasswordResult passwordResult = createTestPasswordResult();
        final String result = passwordResult.toString();
        Assert.assertTrue("was " + passwordResult,
                result.contains("status=SUCCESS") &&
                result.contains("entropy=0.0") &&
                result.contains("timeToCrackOffline=") &&
                result.contains("timeToCrackOnline=") &&
                result.contains("message=BASIC_PASSWORD_CHECKS_FAILED"));
    }

    private static PasswordResult createTestPasswordResult() {
        return PasswordResult.createDefault(PasswordResultEnums.SUCCESS);
    }

    @Test
    public void testCanCreateEmpty() {
        final PasswordResult passwordResult = PasswordResult.createEmpty();
        Assert.assertTrue(passwordResult.isEmpty());
    }
}



================================================
FILE: src/test/java/com/coveros/training/authentication/domainobjects/RegistrationResultTests.java
================================================
package com.coveros.training.authentication.domainobjects;

import nl.jqno.equalsverifier.EqualsVerifier;
import org.junit.Assert;
import org.junit.Test;


public class RegistrationResultTests {

    @Test
    public void testShouldHaveEqualsAndHashcodeImplementedCorrectly() {
        EqualsVerifier.forClass(RegistrationResult.class).verify();
    }

    @Test
    public void testShouldOutputGoodString() {
        final RegistrationResult registrationResult = RegistrationResult.createEmpty();
        final String result = registrationResult.toString();
        Assert.assertTrue("was " + registrationResult,
                result.contains("wasSuccessfullyRegistered=false") &&
                        result.contains("status=EMPTY") &&
                        result.contains("message="));
    }

    @Test
    public void testCanCreateEmpty() {
        final RegistrationResult registrationResult = RegistrationResult.createEmpty();
        Assert.assertTrue(registrationResult.isEmpty());
    }

}



================================================
FILE: src/test/java/com/coveros/training/authentication/domainobjects/UserTests.java
================================================
package com.coveros.training.authentication.domainobjects;

import nl.jqno.equalsverifier.EqualsVerifier;
import org.junit.Assert;
import org.junit.Test;

public class UserTests {

    @Test
    public void testShouldHaveEqualsAndHashcodeImplementedCorrectly() {
        EqualsVerifier.forClass(User.class).verify();
    }

    @Test
    public void testShouldOutputGoodString() {
        final User user = createTestUser();
        final String s = user.toString();
        Assert.assertTrue("toString was: " + user.toString(),
                s.contains("name=alice") &&
                s.contains("id=1"));
    }

    @Test
    public void testCanCreateEmpty() {
        final User user = User.createEmpty();
        Assert.assertTrue(user.isEmpty());
    }

    private static User createTestUser() {
        return new User("alice", 1);
    }

}



================================================
FILE: src/test/java/com/coveros/training/helpers/CheckUtilsTests.java
================================================
package com.coveros.training.helpers;

import org.junit.Test;

public class CheckUtilsTests {

    @Test(expected = IllegalArgumentException.class)
    public void testShouldThrowErrorFor0() {
        CheckUtils.IntParameterMustBePositive(0);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testShouldThrowErrorForSubZero() {
        CheckUtils.IntParameterMustBePositive(-1);
    }

    @Test
    public void testShouldSucceedForPositiveValue() {
        CheckUtils.IntParameterMustBePositive(1);
    }

}



================================================
FILE: src/test/java/com/coveros/training/helpers/DateUtils.java
================================================
package com.coveros.training.helpers;

import java.util.Date;

public class DateUtils {

    /**
     * @return true if the current time from {@link Date#getTime} is even.
     */
    public static boolean isTimeEven() {
        final Date date = new Date();
        return date.getTime() % 2 == 0;
    }

}



================================================
FILE: src/test/java/com/coveros/training/helpers/DateUtilsTests.java
================================================
package com.coveros.training.helpers;

import com.coveros.training.helpers.DateUtils;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

import java.time.LocalDate;
import java.time.Month;
import java.time.temporal.ChronoUnit;

public class DateUtilsTests {

    /**
     * This contrived example is here to provide an opportunity to
     * improve a flaky test.  Our tests should always return the same
     * result, we want total control over our laboratory.
     */
    @Ignore("used for teaching purposes")
    @Test
    public void testShouldReturnEvenTime() {
        Assert.assertTrue(DateUtils.isTimeEven());
    }

    /**
     * In Virginia, the law states you must be at least 16 years and 3 months
     * old to get a drivers license.
     *
     * In this test we'll presume a straightforward happy path.  A person
     * is born Jan 1, 1990.  When do they get their driver's license?
     *
     * 1990 + 16 years = 2006
     * Jan + 3 months = April
     * So, April 1, 2006.
     * How many days is that from the day they were born?
     */
    @Ignore("used for teaching purposes")
    @Test
    public void testShouldBe16Years3Months_HappyPath() {
        // arrange
        // assume a person is born Jan 1, 1990
        final LocalDate birthDate = LocalDate.of(1990, Month.JANUARY, 1);
        // expected that they can get it on April 1, 2006
        final LocalDate expectedLicenseDate = LocalDate.of(2006, Month.APRIL, 1);

        // act
        // add 16 years and 3 months
        final LocalDate licenseDate = calculateFirstPossibleLicenseDate(birthDate);

        // assert
        Assert.assertEquals(expectedLicenseDate, licenseDate);
        long noOfDaysBetween = ChronoUnit.DAYS.between(licenseDate, birthDate);

        // there were 5934 days from the day they were born to the day they can
        // get their license.  It seems fair that that number is the same for
        // everyone, right?  Why should being born on a different day of the
        // year make a difference in how long you have to wait to get your license?
        Assert.assertTrue(Math.abs(noOfDaysBetween) == 5934);

        // let's run an experiment.  We'll start with someone born in Jan 1, 1990,
        // and use the same method to calculate their first possible day to get
        // a driver's license.  We will then loop through every day for 100 years
        // to make sure the answer is always the same.

        for (LocalDate scanningBirthDate = birthDate;
             scanningBirthDate.isBefore(birthDate.plusYears(100));
             scanningBirthDate = scanningBirthDate.plusDays(1)) {
            LocalDate scanningLicenseDate = calculateFirstPossibleLicenseDate(scanningBirthDate);
            // assert
            long daysBetween = ChronoUnit.DAYS.between(scanningLicenseDate, scanningBirthDate);
            String errorMessage = "days between was " + Math.abs(daysBetween) + " for a birthdate of " + scanningBirthDate
                    + " and a license date of " + scanningLicenseDate;
            Assert.assertTrue(errorMessage, Math.abs(daysBetween) == 5934);
        }
    }

    /**
     * Determine the first date which this person is able to obtain a driver's
     * license, per Virginia's law that they be 16 years and 3 months.
     *<p>
     * calculates using this method: <p><code>birthDate.plusYears(16).plusMonths(3);</code></p>
     * </p>
     */
    private LocalDate calculateFirstPossibleLicenseDate(LocalDate birthDate) {
        return birthDate.plusYears(16).plusMonths(3);
    }

}



================================================
FILE: src/test/java/com/coveros/training/helpers/StringUtilsTests.java
================================================
package com.coveros.training.helpers;

import org.junit.Test;

import static com.coveros.training.helpers.StringUtils.*;
import static org.junit.Assert.assertEquals;

public class StringUtilsTests {

    @Test
    public void testShouldConvertNullToEmptyString() {
        final String s = StringUtils.makeNotNullable(null);
        assertEquals("", s);
    }

    @Test
    public void testShouldNotAlterNonNullString() {
        final String s = StringUtils.makeNotNullable("abc");
        assertEquals("abc", s);
    }

    /**
     * JSON won't parse if it has a double quote in a string
     */
    @Test
    public void testEscapeForJson_ShouldEscapeDoubleQuote() {
        final String expectedResult = new String(new byte[]{BACKSLASH, DOUBLE_QUOTE});
        final String inputString = new String(new byte[]{DOUBLE_QUOTE});
        String result = StringUtils.escapeForJson(inputString);
        assertEquals(expectedResult, result);
    }

    /**
     * Testing another potential problem with a JSON string
     */
    @Test
    public void testEscapeForJson_ShouldEscapeBackslash() {
        final String expectedResult = new String(new byte[]{BACKSLASH, BACKSLASH});
        final String inputString = new String(new byte[]{BACKSLASH});
        String result = StringUtils.escapeForJson(inputString);
        assertEquals(expectedResult, result);
    }

}



================================================
FILE: src/test/java/com/coveros/training/library/LendingTests.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.Book;
import com.coveros.training.library.domainobjects.Borrower;
import com.coveros.training.library.domainobjects.LibraryActionResults;
import com.coveros.training.library.domainobjects.Loan;
import org.junit.Assert;
import org.junit.Test;
import org.mockito.Mockito;

import java.sql.Date;
import java.time.LocalDate;
import java.time.Month;

import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doReturn;

public class LendingTests {


    private final static Date BORROW_DATE = Date.valueOf(LocalDate.of(2018, Month.JANUARY, 1));
    private final static String BORROWER_A_NAME = "borrower_a";
    private final static String BORROWER_B_NAME = "borrower_b";
    private final static String TITLE = "Some book";
    private final static Book SAMPLE_BOOK = new Book(1, TITLE);
    private final static Borrower SAMPLE_BORROWER_A = new Borrower(1, BORROWER_A_NAME);
    private final static Borrower SAMPLE_BORROWER_B = new Borrower(1, BORROWER_B_NAME);
    private final LibraryUtils libraryUtils = Mockito.spy(LibraryUtils.class);

    /**
     * If a borrower and a book are registered, a user should be able to borrow it.
     */
    @Test
    public void shouldLendToUser() {
        mockSearchForLoan();
        mockThatLoanIsCreated(SAMPLE_BOOK, SAMPLE_BORROWER_A, BORROW_DATE);
        final LibraryActionResults libraryActionResults = libraryUtils.lendBook(SAMPLE_BOOK, SAMPLE_BORROWER_A, BORROW_DATE);
        Assert.assertEquals(LibraryActionResults.SUCCESS, libraryActionResults);
    }

    private void mockThatLoanIsCreated(Book book, Borrower borrower, Date borrowDate) {
        Mockito.doNothing().when(libraryUtils).createLoan(book, borrower, borrowDate);
    }

    private void mockSearchForLoan() {
        Mockito.doReturn(Loan.createEmpty()).when(libraryUtils).searchForLoanByBook(SAMPLE_BOOK);
    }

    /**
     * Just make sure that we get the expected response if we register a borrower
     */
    @Test
    public void shouldRegisterBorrower() {
        mockBorrowerNotRegistered(BORROWER_A_NAME);
        mockThatNewBorrowerGetsSaved(BORROWER_A_NAME);
        final LibraryActionResults result = libraryUtils.registerBorrower(BORROWER_A_NAME);
        Assert.assertEquals(LibraryActionResults.SUCCESS, result);
    }

    private void mockThatNewBorrowerGetsSaved(String borrowerAName) {
        doNothing().when(libraryUtils).saveNewBorrower(borrowerAName);
    }

    private void mockBorrowerNotRegistered(String borrower) {
        doReturn(Borrower.createEmpty()).when(libraryUtils).searchForBorrowerByName(borrower);
    }

    /**
     * Just make sure that we get the expected response if we register a book
     */
    @Test
    public void shouldRegisterBook() {
        mockThatBookNotRegistered(TITLE);
        mockThatNewBookGetsSaved(TITLE);
        final LibraryActionResults result = libraryUtils.registerBook(TITLE);
        Assert.assertEquals(LibraryActionResults.SUCCESS, result);
    }

    private void mockThatNewBookGetsSaved(String title) {
        doNothing().when(libraryUtils).saveNewBook(title);
    }

    private void mockThatBookNotRegistered(String title) {
        doReturn(Book.createEmpty()).when(libraryUtils).searchForBookByTitle(title);
    }

    /**
     * We shouldn't be able to lend if we try to lend
     * to a borrower who isn't registered
     */
    @Test
    public void testShouldNotLendIfBorrowerNotRegistered() {
        final LibraryActionResults result = libraryUtils.lendBook(SAMPLE_BOOK, Borrower.createEmpty(), BORROW_DATE);
        Assert.assertEquals(LibraryActionResults.BORROWER_NOT_REGISTERED, result);
    }

    /**
     * We shouldn't be able to lend if we try to lend
     * out a book that isn't registered
     */
    @Test
    public void testShouldNotLendIfBookNotRegistered() {
        final LibraryActionResults result = libraryUtils.lendBook(Book.createEmpty(), SAMPLE_BORROWER_A, BORROW_DATE);
        Assert.assertEquals(LibraryActionResults.BOOK_NOT_REGISTERED, result);
    }

    /**
     * b wants to check out a book, but a has it.  Can they borrow it? (no)
     */
    @Test
    public void shouldNotLendIfCurrentlyBorrowed() {
        mockSearchForLoan();
        Mockito.when(libraryUtils.searchForLoanByBook(SAMPLE_BOOK)).thenReturn(new Loan(SAMPLE_BOOK, SAMPLE_BORROWER_B, 1, BORROW_DATE));
        final LibraryActionResults libraryActionResults_bob = libraryUtils.lendBook(SAMPLE_BOOK, SAMPLE_BORROWER_B, BORROW_DATE);
        Assert.assertEquals(LibraryActionResults.BOOK_CHECKED_OUT, libraryActionResults_bob);
    }

}



================================================
FILE: src/test/java/com/coveros/training/library/LibraryBookListAvailableServletTests.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.Book;
import com.coveros.training.helpers.ServletUtils;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.util.Arrays;

import static com.coveros.training.library.LibraryBookListAvailableServlet.RESULT;
import static org.mockito.Mockito.*;

public class LibraryBookListAvailableServletTests {

    public static final String A_BOOK = "a book";
    public static final Book DEFAULT_BOOK = new Book(1, A_BOOK);
    private HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    private HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    private LibraryBookListAvailableServlet libraryBookListAvailableServlet = spy(new LibraryBookListAvailableServlet());
    private final RequestDispatcher requestDispatcher = Mockito.mock(RequestDispatcher.class);
    private final LibraryUtils libraryUtils = Mockito.mock(LibraryUtils.class);


    @Before
    public void before() {
        request = mock(HttpServletRequest.class);
        response = mock(HttpServletResponse.class);
        libraryBookListAvailableServlet = spy(new LibraryBookListAvailableServlet());
        LibraryBookListAvailableServlet.libraryUtils = this.libraryUtils;
    }

    /**
     * If we don't pass a title or an id, we'll get a list of all books
     */
    @Test
    public void testListAvailableBooks_OneBook() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(libraryUtils.listAvailableBooks()).thenReturn(Arrays.asList(DEFAULT_BOOK));

        // act
        libraryBookListAvailableServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "[{\"Title\": \"a book\", \"Id\": \"1\"}]");
    }

    /**
     * If we don't pass a title or an id, we'll get a list of all books
     */
    @Test
    public void testListAvailableBooks_MultipleBook() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(libraryUtils.listAvailableBooks()).thenReturn(Arrays.asList(DEFAULT_BOOK, DEFAULT_BOOK, DEFAULT_BOOK));

        // act
        libraryBookListAvailableServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "[{\"Title\": \"a book\", \"Id\": \"1\"},{\"Title\": \"a book\", \"Id\": \"1\"},{\"Title\": \"a book\", \"Id\": \"1\"}]");
    }


    /**
     * If we don't pass a title or an id, we'll get a list of all books
     * This tests what happens if there's no books in the database
     */
    @Test
    public void testListAvailableBooks_EmptyList() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);

        // act
        libraryBookListAvailableServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "No books exist in the database");
    }

    /**
     * If there aren't any books
     */
    @Test
    public void testSearchNoBooks() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("id")).thenReturn("");
        when(request.getParameter("title")).thenReturn("");

        // act
        libraryBookListAvailableServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "No books exist in the database");
    }


}



================================================
FILE: src/test/java/com/coveros/training/library/LibraryBookListSearchServletTests.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.Book;
import com.coveros.training.helpers.ServletUtils;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.util.Arrays;

import static com.coveros.training.library.LibraryBookListSearchServlet.RESULT;
import static org.mockito.Mockito.*;

public class LibraryBookListSearchServletTests {

    public static final String A_BOOK = "a book";
    public static final Book DEFAULT_BOOK = new Book(1, A_BOOK);
    private HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    private HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    private LibraryBookListSearchServlet libraryBookListSearchServlet = spy(new LibraryBookListSearchServlet());
    private final RequestDispatcher requestDispatcher = Mockito.mock(RequestDispatcher.class);
    private final LibraryUtils libraryUtils = Mockito.mock(LibraryUtils.class);


    @Before
    public void before() {
        request = mock(HttpServletRequest.class);
        response = mock(HttpServletResponse.class);
        libraryBookListSearchServlet = spy(new LibraryBookListSearchServlet());
        LibraryBookListSearchServlet.libraryUtils = this.libraryUtils;
    }

    /**
     * If we don't pass a title or an id, we'll get a list of all books
     */
    @Test
    public void testListAllBooks() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(libraryUtils.listAllBooks()).thenReturn(Arrays.asList(DEFAULT_BOOK));
        // act
        libraryBookListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "[{\"Title\": \"a book\", \"Id\": \"1\"}]");
    }

    /**
     * If we don't pass a title or an id, we'll get a list of all books
     * this tests when the database is empty of books
     */
    @Test
    public void testListAllBooks_NoBooksInDatabase() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);

        // act
        libraryBookListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "No books exist in the database");
    }

    /**
     * If we pass an id, we'll get a particular book
     * testing for when there's no books found by that id
     */
    @Test
    public void testSearchById_noBookFound() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("id")).thenReturn("1");
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBookById(1)).thenReturn(Book.createEmpty());

        // act
        libraryBookListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "No books found with an id of 1");
    }

    /**
     * If we pass an id, we'll get a particular book
     */
    @Test
    public void testSearchById() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("id")).thenReturn("1");
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBookById(1)).thenReturn(DEFAULT_BOOK);

        // act
        libraryBookListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "[{\"Title\": \"a book\", \"Id\": \"1\"}]");
    }

    /**
     * If we pass a title, we'll get a particular book
     */
    @Test
    public void testSearchByTitle() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("title")).thenReturn(A_BOOK);
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBookByTitle(A_BOOK)).thenReturn(DEFAULT_BOOK);

        // act
        libraryBookListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(libraryUtils).searchForBookByTitle(A_BOOK);
        verify(request).setAttribute(RESULT, "[{\"Title\": \"a book\", \"Id\": \"1\"}]");
    }

    /**
     * If there aren't any books
     */
    @Test
    public void testSearchNoBooks() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("id")).thenReturn("");
        when(request.getParameter("title")).thenReturn("");

        // act
        libraryBookListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "No books exist in the database");
    }

    /**
     * If nothing found by id
     */
    @Test
    public void testSearchNothingFoundById() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("id")).thenReturn("1");
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBookById(1)).thenReturn(Book.createEmpty());

        // act
        libraryBookListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "No books found with an id of 1");
    }

    /**
     * If no books found by title
     */
    @Test
    public void testSearchNothingFoundByTitle() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("title")).thenReturn(A_BOOK);
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBookByTitle(A_BOOK)).thenReturn(Book.createEmpty());

        // act
        libraryBookListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(libraryUtils).searchForBookByTitle(A_BOOK);
        verify(request).setAttribute(RESULT, "No books found with a title of " + A_BOOK);
    }

    /**
     * If we provide an ID and a title
     */
    @Test
    public void testSearchIdAndTitle() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("title")).thenReturn(A_BOOK);
        when(request.getParameter("id")).thenReturn("1");

        // act
        libraryBookListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "Error: please search by either title or id, not both");
    }

}



================================================
FILE: src/test/java/com/coveros/training/library/LibraryBorrowerListSearchServletTests.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.Borrower;
import com.coveros.training.helpers.ServletUtils;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.util.Arrays;

import static com.coveros.training.library.LibraryBorrowerListSearchServlet.RESULT;
import static org.mockito.Mockito.*;

public class LibraryBorrowerListSearchServletTests {

    private static final String A_BORROWER = "abe borrower";
    private static final Borrower DEFAULT_BORROWER = new Borrower(1, A_BORROWER);
    private HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    private HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    private LibraryBorrowerListSearchServlet libraryBorrowerListSearchServlet = spy(new LibraryBorrowerListSearchServlet());
    private final RequestDispatcher requestDispatcher = Mockito.mock(RequestDispatcher.class);
    private final LibraryUtils libraryUtils = Mockito.mock(LibraryUtils.class);


    @Before
    public void before() {
        request = mock(HttpServletRequest.class);
        response = mock(HttpServletResponse.class);
        libraryBorrowerListSearchServlet = spy(new LibraryBorrowerListSearchServlet());
        LibraryBorrowerListSearchServlet.libraryUtils = this.libraryUtils;
    }

    /**
     * If we don't pass a name or an id, we'll get a list of all borrowers
     * But what do we get if there aren't any?
     */
    @Test
    public void testListAllBorrowers_noBorrowersExist() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);

        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "No borrowers exist in the database");
    }


    /**
     * If we don't pass a name or an id, we'll get a list of all borrowers
     */
    @Test
    public void testListAllBorrowers() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(libraryUtils.listAllBorrowers()).thenReturn(Arrays.asList(DEFAULT_BORROWER));
        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "[{\"Name\": \"abe borrower\", \"Id\": \"1\"}]");
    }

    /**
     * If we pass an id, we'll get a particular borrower
     */
    @Test
    public void testSearchById() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("id")).thenReturn("1");
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBorrowerById(1)).thenReturn(Borrower.createEmpty());

        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(libraryUtils).searchForBorrowerById(1);
    }

    /**
     * If we pass a name, and the borrower isn't found
     */
    @Test
    public void testSearchByNameNotFound() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("name")).thenReturn(A_BORROWER);
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBorrowerByName(A_BORROWER)).thenReturn(Borrower.createEmpty());

        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(libraryUtils).searchForBorrowerByName(A_BORROWER);
    }

    /**
     * If we pass a name, we'll get a particular borrower
     */
    @Test
    public void testSearchByName() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("name")).thenReturn(A_BORROWER);
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBorrowerByName(A_BORROWER)).thenReturn(DEFAULT_BORROWER);

        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "[{\"Name\": \"abe borrower\", \"Id\": \"1\"}]");
    }


    /**
     * If there aren't any borrowers
     */
    @Test
    public void testSearchNoBorrowers() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("id")).thenReturn("");
        when(request.getParameter("name")).thenReturn("");

        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "No borrowers exist in the database");
    }

    /**
     * If nothing found by id
     */
    @Test
    public void testSearchNothingFoundById() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("id")).thenReturn("1");
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBorrowerById(1)).thenReturn(Borrower.createEmpty());

        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "No borrowers found with an id of 1");
    }


    /**
     * If borrower found by id
     */
    @Test
    public void testSearchBorrowerFoundById() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("id")).thenReturn("1");
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBorrowerById(1)).thenReturn(DEFAULT_BORROWER);

        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "[{\"Name\": \"abe borrower\", \"Id\": \"1\"}]");
    }


    /**
     * If the id isn't a number
     */
    @Test
    public void testSearchByBadId() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        // a is not a valid id
        when(request.getParameter("id")).thenReturn("a");
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBorrowerById(1)).thenReturn(DEFAULT_BORROWER);

        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "Error: could not parse the borrower id as an integer");
    }

    /**
     * If no borrowers found by name
     */
    @Test
    public void testSearchNothingFoundByName() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("name")).thenReturn(A_BORROWER);
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBorrowerByName(A_BORROWER)).thenReturn(Borrower.createEmpty());

        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(libraryUtils).searchForBorrowerByName(A_BORROWER);
        verify(request).setAttribute(RESULT, "No borrowers found with a name of " + A_BORROWER);
    }

    /**
     * If we provide an ID and a name
     */
    @Test
    public void testSearchIdAndName() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("name")).thenReturn(A_BORROWER);
        when(request.getParameter("id")).thenReturn("1");

        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "Error: please search by either name or id, not both");
    }

}



================================================
FILE: src/test/java/com/coveros/training/library/LibraryLendServletTests.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.LibraryActionResults;
import org.junit.Assert;
import org.junit.Test;
import org.mockito.Mockito;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.sql.Date;
import java.time.LocalDate;
import java.time.Month;

import static org.mockito.Mockito.*;

public class LibraryLendServletTests {

    private final static Date BORROW_DATE = Date.valueOf(LocalDate.of(2018, Month.JANUARY, 1));
    private static final String BOOK_TITLE = "The DevOps Handbook";
    private static final String ALICE = "alice";
    private final LibraryLendServlet libraryLendServlet = Mockito.spy(new LibraryLendServlet());
    private final LibraryUtils libraryUtils = Mockito.mock(LibraryUtils.class);
    private final HttpServletRequest request = Mockito.mock(HttpServletRequest.class, RETURNS_DEEP_STUBS);
    private final HttpServletResponse response = Mockito.mock(HttpServletResponse.class);

    @Test
    public void testHappyPathPost() {
        when(request.getParameter("book")).thenReturn(BOOK_TITLE);
        when(request.getParameter("borrower")).thenReturn(ALICE);
        doReturn(BORROW_DATE).when(libraryLendServlet).getDateNow();
        LibraryLendServlet.libraryUtils = libraryUtils;
        when(libraryUtils.lendBook(BOOK_TITLE, ALICE, BORROW_DATE)).thenReturn(LibraryActionResults.SUCCESS);

        libraryLendServlet.doPost(request, response);

        verify(request).setAttribute("result", "SUCCESS");
    }

    @Test
    public void testDateFunction() {
        final Date dateNow = libraryLendServlet.getDateNow();
        Assert.assertNotEquals(dateNow, Date.valueOf(LocalDate.MIN));
        Assert.assertNotEquals(dateNow, Date.valueOf(LocalDate.MAX));
    }

    /**
     * If they pass in an empty string for either field, it should return a message
     * indicating that.
     */
    @Test
    public void testEmptyString_Book() {
        String emptyString = "";
        when(request.getParameter("book")).thenReturn(emptyString);
        when(request.getParameter("borrower")).thenReturn(ALICE);

        // do the post
        libraryLendServlet.doPost(request, response);

        // verify that the missing book title was handled
        Mockito.verify(request).setAttribute("result", "NO_BOOK_TITLE_PROVIDED");
    }

    /**
     * If they pass in an empty string for either field, it should return a message
     * indicating that.
     */
    @Test
    public void testEmptyString_Borrower() {
        String emptyString = "";
        when(request.getParameter("borrower")).thenReturn(emptyString);
        when(request.getParameter("book")).thenReturn(BOOK_TITLE);

        // do the post
        libraryLendServlet.doPost(request, response);

        // verify that the missing borrower was handled
        Mockito.verify(request).setAttribute("result", "NO_BORROWER_PROVIDED");
    }

}



================================================
FILE: src/test/java/com/coveros/training/library/LibraryRegisterBookServletTests.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.LibraryActionResults;
import com.coveros.training.helpers.ServletUtils;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import static org.mockito.Mockito.*;

public class LibraryRegisterBookServletTests {

    private HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    private HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    private LibraryRegisterBookServlet libraryRegisterBookServlet = spy(new LibraryRegisterBookServlet());
    private final RequestDispatcher requestDispatcher = Mockito.mock(RequestDispatcher.class);


    @Before
    public void before() {
        request = mock(HttpServletRequest.class);
        response = mock(HttpServletResponse.class);
        libraryRegisterBookServlet = spy(new LibraryRegisterBookServlet());
        LibraryRegisterBookServlet.libraryUtils = Mockito.mock(LibraryUtils.class);
    }

    @Test
    public void testHappyPathPost() {
        when(request.getRequestDispatcher(ServletUtils.RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("book")).thenReturn("The DevOps Handbook");
        when(LibraryRegisterBookServlet.libraryUtils.registerBook(Mockito.anyString()))
                .thenReturn(LibraryActionResults.SUCCESS);

        // do the post
        libraryRegisterBookServlet.doPost(request, response);

        // verify that the correct redirect was chosen.
        verify(request).getRequestDispatcher(ServletUtils.RESULT_JSP);
    }

    /**
     * If they pass in an empty string, it should return a message
     * indicating that.
     */
    @Test
    public void testEmptyString() {
        when(request.getRequestDispatcher(ServletUtils.RESULT_JSP)).thenReturn(requestDispatcher);
        String emptyString = "";
        when(request.getParameter("book")).thenReturn(emptyString);

        // do the post
        libraryRegisterBookServlet.doPost(request, response);

        // verify that the missing book title was handled
        Mockito.verify(request).setAttribute("result", "NO_BOOK_TITLE_PROVIDED");
    }
}



================================================
FILE: src/test/java/com/coveros/training/library/LibraryRegisterBorrowerServletTests.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.LibraryActionResults;
import com.coveros.training.helpers.ServletUtils;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import static org.mockito.Mockito.*;

public class LibraryRegisterBorrowerServletTests {

    private HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    private HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    private LibraryRegisterBorrowerServlet libraryRegisterBorrowerServlet = spy(new LibraryRegisterBorrowerServlet());
    private final RequestDispatcher requestDispatcher = Mockito.mock(RequestDispatcher.class);

    @Before
    public void before() {
        request = mock(HttpServletRequest.class);
        response = mock(HttpServletResponse.class);
        libraryRegisterBorrowerServlet = spy(new LibraryRegisterBorrowerServlet());
        LibraryRegisterBorrowerServlet.libraryUtils = Mockito.mock(LibraryUtils.class);
    }

    @Test
    public void testHappyPathPost() {
        when(request.getRequestDispatcher(ServletUtils.RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("borrower")).thenReturn("Alice");
        when(LibraryRegisterBorrowerServlet.libraryUtils.registerBorrower(Mockito.anyString()))
                .thenReturn(LibraryActionResults.SUCCESS);

        // do the post
        libraryRegisterBorrowerServlet.doPost(request, response);

        // verify that the correct redirect was chosen.
        verify(request).getRequestDispatcher(ServletUtils.RESULT_JSP);
    }


    /**
     * If they pass in an empty string, it should return a message
     * indicating that.
     */
    @Test
    public void testEmptyString() {
        when(request.getRequestDispatcher(ServletUtils.RESULT_JSP)).thenReturn(requestDispatcher);
        String emptyString = "";
        when(request.getParameter("borrower")).thenReturn(emptyString);

        // do the post
        libraryRegisterBorrowerServlet.doPost(request, response);

        // verify that the missing borrower name was handled
        Mockito.verify(request).setAttribute("result", "NO_BORROWER_PROVIDED");
    }
}



================================================
FILE: src/test/java/com/coveros/training/library/LibraryUtilsTests.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.*;
import com.coveros.training.persistence.IPersistenceLayer;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.mockito.Mockito;

import java.sql.Date;
import java.time.LocalDate;
import java.time.Month;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.mockito.internal.verification.VerificationModeFactory.times;

public class LibraryUtilsTests {

    private IPersistenceLayer mockPersistenceLayer = Mockito.mock(IPersistenceLayer.class);
    private LibraryUtils libraryUtils = Mockito.spy(new LibraryUtils(mockPersistenceLayer));

    private final Book DEFAULT_BOOK = BookTests.createTestBook();
    private final Borrower DEFAULT_BORROWER = BorrowerTests.createTestBorrower();
    private final static Date BORROW_DATE = Date.valueOf(LocalDate.of(2018, Month.JANUARY, 1));


    @Before
    public void init() {
        mockPersistenceLayer = Mockito.mock(IPersistenceLayer.class);
        libraryUtils = Mockito.spy(new LibraryUtils(mockPersistenceLayer));
    }

    @Test
    public void testCanCreateEmpty() {
        final LibraryUtils libraryUtils = LibraryUtils.createEmpty();
        Assert.assertTrue(libraryUtils.isEmpty());
    }

    @Test
    public void testCanLendBook() {
        Mockito.doReturn(Loan.createEmpty()).when(libraryUtils).searchForLoanByBook(DEFAULT_BOOK);

        final LibraryActionResults libraryActionResults =
                libraryUtils.lendBook(DEFAULT_BOOK, DEFAULT_BORROWER, BORROW_DATE);

        Assert.assertEquals(LibraryActionResults.SUCCESS, libraryActionResults);
    }

    /**
     * Same as {@link #testCanLendBook()} but we're hitting its wrapper.
     */
    @Test
    public void testCanLendBook_wrapperMethod() {
        Mockito.doReturn(Loan.createEmpty()).when(libraryUtils).searchForLoanByBook(DEFAULT_BOOK);
        Mockito.doReturn(DEFAULT_BOOK).when(libraryUtils).searchForBookByTitle(DEFAULT_BOOK.title);
        Mockito.doReturn(DEFAULT_BORROWER).when(libraryUtils).searchForBorrowerByName(DEFAULT_BORROWER.name);

        final LibraryActionResults libraryActionResults =
                libraryUtils.lendBook(DEFAULT_BOOK.title, DEFAULT_BORROWER.name, BORROW_DATE);

        Assert.assertEquals(LibraryActionResults.SUCCESS, libraryActionResults);
    }

    @Test
    public void testCanRegisterBorrower() {
        Mockito.doReturn(Borrower.createEmpty()).when(libraryUtils).searchForBorrowerByName(DEFAULT_BORROWER.name);

        final LibraryActionResults libraryActionResults
                = libraryUtils.registerBorrower(DEFAULT_BORROWER.name);

        Assert.assertEquals(LibraryActionResults.SUCCESS, libraryActionResults);
    }

    @Test
    public void testCanRegisterBook() {
        Mockito.doReturn(Book.createEmpty()).when(libraryUtils).searchForBookByTitle(DEFAULT_BOOK.title);

        final LibraryActionResults libraryActionResults = libraryUtils.registerBook(DEFAULT_BOOK.title);

        Assert.assertEquals(LibraryActionResults.SUCCESS, libraryActionResults);
    }

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /**
     * Makes no sense to allow registering a book with an empty string.
     * Throw an exception, since it's probably a dev error in that case - it
     * should never have been allowed to occur, by the developer.
     */
    @Test
    public void testCannotRegisterBookWithEmptyString() {
        thrown.expect(IllegalArgumentException.class);
        thrown.expectMessage("bookTitle was an empty string - disallowed when registering books");

        libraryUtils.registerBook("");
    }

    @Test
    public void testCanSearchForLoanByBook() {
        libraryUtils.searchForLoanByBook(DEFAULT_BOOK);
        Mockito.verify(mockPersistenceLayer, times(1)).searchForLoanByBook(DEFAULT_BOOK);
    }

    @Test
    public void testCanSearchForLoanByBorrower() {
        libraryUtils.searchForLoanByBorrower(DEFAULT_BORROWER);
        Mockito.verify(mockPersistenceLayer, times(1)).searchForLoanByBorrower(DEFAULT_BORROWER);
    }

    @Test
    public void testCanSearchForBorrowerByName() {
        libraryUtils.searchForBorrowerByName(DEFAULT_BORROWER.name);
        Mockito.verify(mockPersistenceLayer, times(1)).searchBorrowerDataByName(DEFAULT_BORROWER.name);
    }

    @Test
    public void testCanSearchForBooksByTitle() {
        Mockito.when(mockPersistenceLayer.searchBooksByTitle(DEFAULT_BOOK.title)).thenReturn(Optional.of(DEFAULT_BOOK));
        libraryUtils.searchForBookByTitle(DEFAULT_BOOK.title);
        Mockito.verify(mockPersistenceLayer, times(1)).searchBooksByTitle(DEFAULT_BOOK.title);
    }

    /**
     * We don't allow to search by empty string.
     */
    @Test
    public void testShouldThrowExceptionWhenSearchingWithEmptyStringAsBookTitle() {
        thrown.expect(IllegalArgumentException.class);
        thrown.expectMessage("when searching for a book, must include a non-empty string for title");

        libraryUtils.searchForBookByTitle("");
    }

    @Test
    public void testCanSearchForBooksById() {
        Mockito.when(mockPersistenceLayer.searchBooksById(DEFAULT_BOOK.id)).thenReturn(Optional.of(DEFAULT_BOOK));
        libraryUtils.searchForBookById(DEFAULT_BOOK.id);
        Mockito.verify(mockPersistenceLayer, times(1)).searchBooksById(DEFAULT_BOOK.id);
    }

    /**
     * The id of the book must be 1 or greater.  0 isn't allowed, nor anything else below 1.
     */
    @Test
    public void testShouldThrowExceptionWhenSearchingWithLessThanOneAsBookId() {
        thrown.expect(IllegalArgumentException.class);
        thrown.expectMessage("when searching for a book, must include an id of one or greater");

        libraryUtils.searchForBookById(0);
    }

    /**
     * Basic happy path - delete a book that is registered.
     */
    @Test
    public void testCanDeleteBook() {
        Mockito.when(mockPersistenceLayer.searchBooksByTitle(DEFAULT_BOOK.title)).thenReturn(Optional.of(DEFAULT_BOOK));

        final LibraryActionResults result = libraryUtils.deleteBook(DEFAULT_BOOK);

        Mockito.verify(mockPersistenceLayer, times(1)).deleteBook(DEFAULT_BOOK.id);
        Assert.assertEquals(LibraryActionResults.SUCCESS, result);
    }

    /**
     * If a book isn't registered, then obviously we cannot delete it.
     */
    @Test
    public void testCannotDeleteNonRegisteredBook() {
        Mockito.when(mockPersistenceLayer.searchBooksByTitle(DEFAULT_BOOK.title)).thenReturn(Optional.empty());

        final LibraryActionResults result = libraryUtils.deleteBook(DEFAULT_BOOK);

        Mockito.verify(mockPersistenceLayer, times(0)).deleteBook(DEFAULT_BOOK.id);
        Assert.assertEquals(LibraryActionResults.NON_REGISTERED_BOOK_CANNOT_BE_DELETED, result);
    }

    /**
     * Basic happy path - delete a borrower who is registered.
     */
    @Test
    public void testCanDeleteBorrower() {
        Mockito.when(mockPersistenceLayer.searchBorrowerDataByName(DEFAULT_BORROWER.name)).thenReturn(Optional.of(DEFAULT_BORROWER));

        final LibraryActionResults result = libraryUtils.deleteBorrower(DEFAULT_BORROWER);

        Mockito.verify(mockPersistenceLayer, times(1)).deleteBorrower(DEFAULT_BORROWER.id);
        Assert.assertEquals(LibraryActionResults.SUCCESS, result);
    }

    /**
     * If a borrower isn't registered, then obviously we cannot delete them.
     */
    @Test
    public void testCannotDeleteNonRegisteredBorrower() {
        Mockito.when(mockPersistenceLayer.searchBorrowerDataByName(DEFAULT_BORROWER.name)).thenReturn(Optional.empty());

        final LibraryActionResults result = libraryUtils.deleteBorrower(DEFAULT_BORROWER);

        Mockito.verify(mockPersistenceLayer, times(0)).deleteBorrower(DEFAULT_BORROWER.id);
        Assert.assertEquals(LibraryActionResults.NON_REGISTERED_BORROWER_CANNOT_BE_DELETED, result);
    }

    /**
     * A test to cover the action of listing all the books in the database.
     * Perhaps unusual, given how large libraries get, but we're going MVP style - minimum
     * viable product.  At early stages we may develop features that later on become obsolete.
     */
    @Test
    public void testShouldBeAbleToListAllBooks() {
        final List<Book> books = generateListOfBooks(new String[]{"foo", "bar"});
        Mockito.when(mockPersistenceLayer.listAllBooks()).thenReturn(Optional.of(books));

        List<Book> bookList = libraryUtils.listAllBooks();

        Assert.assertEquals(books, bookList);
    }

    /**
     * A test to cover the action of listing all the borrowers in the database.
     * Perhaps unusual, given how large libraries get, but we're going MVP style - minimum
     * viable product.  At early stages we may develop features that later on become obsolete.
     */
    @Test
    public void testShouldBeAbleToListAllBorrowers() {
        final List<Borrower> borrowers = generateListOfBorrowers(new String[]{"foo", "bar"});
        Mockito.when(mockPersistenceLayer.listAllBorrowers()).thenReturn(Optional.of(borrowers));
        List<Borrower> borrowerList = libraryUtils.listAllBorrowers();
        Assert.assertEquals(borrowers, borrowerList);
    }

    @Test
    public void testShouldListAvailableBooks() {
        libraryUtils.listAvailableBooks();
        Mockito.verify(mockPersistenceLayer).listAvailableBooks();
    }

    /**
     * A helper function to generate a list of books, given a list of titles.
     */
    public static List<Book> generateListOfBooks(String[] bookTitles) {
        ArrayList<Book> bookList = new ArrayList<>();
        int id = 1;
        for(String s : bookTitles) {
            bookList.add(new Book(id, s));
            id++;
        }
        return bookList;
    }


    /**
     * A helper function to generate a list of borrowers, given a list of names.
     */
    public static List<Borrower> generateListOfBorrowers(String[] names) {
        ArrayList<Borrower> borrowerList = new ArrayList<>();
        int id = 1;
        for(String s : names) {
            borrowerList.add(new Borrower(id, s));
            id++;
        }
        return borrowerList;
    }


}



================================================
FILE: src/test/java/com/coveros/training/library/domainobjects/BookTests.java
================================================
package com.coveros.training.library.domainobjects;

import nl.jqno.equalsverifier.EqualsVerifier;
import org.junit.Assert;
import org.junit.Test;

public class BookTests {

    @Test
    public void testShouldHaveEqualsAndHashcodeImplementedCorrectly() {
        EqualsVerifier.forClass(Book.class).verify();
    }

    @Test
    public void testShouldOutputGoodString() {
        final Book book = createTestBook();
        final String b = book.toString();
        Assert.assertTrue("toString was: " + book.toString(),
                b.contains("title=The DevOps Handbook") &&
                b.contains("id=1"));
    }

    public static Book createTestBook() {
        return new Book(1, "The DevOps Handbook");
    }

    @Test
    public void testCanCreateEmpty() {
        final Book book = Book.createEmpty();
        Assert.assertTrue(book.isEmpty());
    }

}



================================================
FILE: src/test/java/com/coveros/training/library/domainobjects/BorrowerTests.java
================================================
package com.coveros.training.library.domainobjects;

import nl.jqno.equalsverifier.EqualsVerifier;
import org.junit.Assert;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class BorrowerTests {

    @Test
    public void testShouldHaveEqualsAndHashcodeImplementedCorrectly() {
        EqualsVerifier.forClass(Borrower.class).verify();
    }

    @Test
    public void testShouldOutputGoodString() {
        final Borrower borrower = createTestBorrower();
        Assert.assertTrue(borrower.toString().contains("id=1,name=alice"));
    }

    public static Borrower createTestBorrower() {
        return new Borrower(1, "alice");
    }

    @Test
    public void testCanCreateEmpty() {
        final Borrower borrower = Borrower.createEmpty();
        Assert.assertTrue(borrower.isEmpty());
    }

    /**
     * toOutputString returns a JSON version of this object.
     */
    @Test
    public void testShouldReturnJsonString() {
        final Borrower borrower = createTestBorrower();
        final String expectedResult = "{\"Name\": \"alice\", \"Id\": \"1\"}";
        assertEquals(expectedResult, borrower.toOutputString());
    }

}



================================================
FILE: src/test/java/com/coveros/training/library/domainobjects/LoanTests.java
================================================
package com.coveros.training.library.domainobjects;

import nl.jqno.equalsverifier.EqualsVerifier;
import org.junit.Assert;
import org.junit.Test;

import java.sql.Date;
import java.time.LocalDate;
import java.time.Month;

public class LoanTests {

    @Test
    public void testShouldHaveEqualsAndHashcodeImplementedCorrectly() {
        EqualsVerifier.forClass(Loan.class).verify();
    }

    @Test
    public void testShouldOutputGoodString() {
        final Loan loan = createTestLoan();
        Assert.assertTrue("toString was: " + loan.toString(), loan.toString().contains("title=The DevOps Handbook"));
    }

    public static Loan createTestLoan() {
        Date borrowDate = Date.valueOf(LocalDate.of(2018, Month.JANUARY, 1));
        return new Loan(BookTests.createTestBook(), BorrowerTests.createTestBorrower(), 1, borrowDate);
    }

    @Test
    public void testCanCreateEmpty() {
        final Loan loan = Loan.createEmpty();
        Assert.assertTrue(loan.isEmpty());
    }
}



================================================
FILE: src/test/java/com/coveros/training/mathematics/AckermannIterativeParameterizedTests.java
================================================
package com.coveros.training.mathematics;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collection;

@RunWith(Parameterized.class)
public class AckermannIterativeParameterizedTests {

    @Parameters
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][] {
             //      m                 n                  expected
                {    0,                0,                    "1"     },

                {    1,                1,                    "3"     },
                {    1,                2,                    "4"     },
                {    1,                3,                    "5"     },

                {    2,                1,                    "5"     },
                {    2,                2,                    "7"     },
                {    2,                3,                    "9"     },
                {    2,                4,                    "11"    },

                {    3,                1,                    "13"    },
                {    3,                2,                    "29"    },
                {    3,                3,                    "61"    },
             //  {    4,                0,                    "13"    }, // the tail-recursive algorithm calculates this incorrectly... why?
                {    4,                1,                    "65533" },
                {},   //This one overflows!
        });
    }

    private final long m;
    private final long n;
    private final BigInteger expected;

    public AckermannIterativeParameterizedTests(long m, long n, String expected) {
        this.m = m;
        this.n = n;
        this.expected = new BigInteger(expected);
    }

    @Test
    public void testCalculateIterative() {
        final BigInteger result = AckermannIterative.calculate((int)m, (int)n);
        Assert.assertEquals(String.format("for m of %d and n of %d we should have gotten %d", m, n, expected), expected, result);
    }



}



================================================
FILE: src/test/java/com/coveros/training/mathematics/AckermannParameterizedTests.java
================================================
package com.coveros.training.mathematics;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collection;

@RunWith(Parameterized.class)
public class AckermannParameterizedTests {

    @Parameters
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][] {
             //      m                 n                  expected
                {    0,                0,                    "1"     },

                {    1,                1,                    "3"     },
                {    1,                2,                    "4"     },
                {    1,                3,                    "5"     },

                {    2,                1,                    "5"     },
                {    2,                2,                    "7"     },
                {    2,                3,                    "9"     },
                {    2,                4,                    "11"    },

                {    3,                1,                    "13"    },
                {    3,                2,                    "29"    },
                {    3,                3,                    "61"    },

                {    4,                0,                    "13"    },
        });
    }

    private final long m;
    private final long n;
    private final BigInteger expected;

    public AckermannParameterizedTests(long m, long n, String expected) {
        this.m = m;
        this.n = n;
        this.expected = new BigInteger(expected);
    }

    @Test
    public void testShouldProperlyCalculate() {
        final BigInteger result = Ackermann.calculate((int)m, (int)n);
        Assert.assertEquals(String.format("for m of %d and n of %d we should have gotten %d", m, n, expected), expected, result);
    }

}



================================================
FILE: src/test/java/com/coveros/training/mathematics/AckServletTests.java
================================================
package com.coveros.training.mathematics;

import com.coveros.training.helpers.ServletUtils;
import org.junit.Test;
import org.mockito.Mockito;
import org.slf4j.Logger;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

import static org.mockito.Mockito.*;

public class AckServletTests {

    private final AckServlet ackServlet = Mockito.spy(new AckServlet());
    private final HttpServletRequest request = Mockito.mock(HttpServletRequest.class, RETURNS_DEEP_STUBS);
    private final HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    private final Logger logger = Mockito.mock(Logger.class);

    /**
     * Testing a happy path, mocking the request, response, and forward.
     */
    @Test
    public void testPostService_HappyPath() {
        when(request.getParameter("ack_param_m")).thenReturn("2");
        when(request.getParameter("ack_param_n")).thenReturn("3");
        when(request.getParameter("ack_algorithm_choice")).thenReturn("regular_recursive");
        doNothing().when(ackServlet).forwardToResult(Mockito.any(), Mockito.any(), Mockito.any());

        ackServlet.doPost(request, response);

        verify(ackServlet).regularRecursive(request, 2, 3);
    }

    /**
     * Testing the tail recursive algorithm
     */
    @Test
    public void testPostService_TailRecursive() {
        when(request.getParameter("ack_param_m")).thenReturn("2");
        when(request.getParameter("ack_param_n")).thenReturn("3");
        when(request.getParameter("ack_algorithm_choice")).thenReturn("tail_recursive");
        doNothing().when(ackServlet).forwardToResult(Mockito.any(), Mockito.any(), Mockito.any());

        ackServlet.doPost(request, response);

        verify(ackServlet).tailRecursive(request, 2, 3);
    }

    /**
     * Here we allow a call into the actual forwardToResult method.
     */
    @Test
    public void testPostService_Forward() {
        AckServlet.logger = logger;

        ackServlet.doPost(request, response);

        verify(request).getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP);
        verify(AckServlet.logger, times(0)).error(Mockito.anyString());
    }

    /**
     * Here we allow a call into the actual forwardToResult method,
     * and we force an exception
     */
    @Test
    public void testPostService_realForward_withException() throws ServletException, IOException {
        AckServlet.logger = logger;
        final RequestDispatcher requestDispatcher = mock(RequestDispatcher.class);
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        doThrow(new RuntimeException("hi there, exception here."))
                .when(requestDispatcher).forward(request, response);

        ackServlet.doPost(request, response);

        verify(request).getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP);
        verify(AckServlet.logger).error(Mockito.anyString());
    }

}



================================================
FILE: src/test/java/com/coveros/training/mathematics/CalculatorTests.java
================================================
package com.coveros.training.mathematics;

import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.mockito.Mockito;

import static org.mockito.Mockito.when;

public class CalculatorTests {

    // ----------------------------------------------------------
    //
    //          Unit tests not requiring mocks
    //
    // ----------------------------------------------------------

    @Ignore("this test is for teaching")
    @Test
    public void testShouldAddTwoIntegers() {
    }

    @Ignore("this test is for teaching")
    @Test
    public void testShouldAddTwoDecimals() {
    }

    @Ignore("this test is for teaching")
    @Test
    public void testShouldGetStringVersionOfResult() {
    }

    @Ignore("this test is for teaching")
    @Test
    public void testShouldGetPairResult() {
    }

    // ----------------------------------------------------------
    //
    //          Unit tests requiring mocks
    //
    // ----------------------------------------------------------

    /**
     * Tests calculateAndMore
     */
    @Ignore("this test is for teaching")
    @Test
    public void testShouldMockOutsideMethods() {
    }

    /**
     * Tests calculateAndMorePart2
     */
    @Ignore("this test is for teaching")
    @Test
    public void testShouldMockOutsideMethodsPart2() {
    }
}



================================================
FILE: src/test/java/com/coveros/training/mathematics/FibonacciParameterizedTests.java
================================================
package com.coveros.training.mathematics;

import static org.junit.Assert.assertEquals;

import java.util.Arrays;
import java.util.Collection;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

@RunWith(Parameterized.class)
public class FibonacciParameterizedTests {
    @Parameters
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][] {
                { 0, 0 }, { 1, 1 }, { 2, 1 }, { 3, 2 },
                { 4, 3 }, { 5, 5 }, { 6, 8 }, {20, 6765}
        });
    }

    private final int fInput;

    private final int fExpected;

    public FibonacciParameterizedTests(int input, int expected) {
        this.fInput = input;
        this.fExpected = expected;
    }

    /**
     * Testing a very standard recursive version
     */
    @Test
    public void test() {
        assertEquals(String.format("for the %dth number, we expected %d", fInput, fExpected), fExpected, Fibonacci.calculate(fInput));
    }

    /**
     * Testing an iterative version found on Rosetta Code, see {@link FibonacciIterative}
     */
    @Test
    public void testIterative1() {
        assertEquals(String.format("for the %dth number, we expected %d", fInput, fExpected), fExpected, FibonacciIterative.fibAlgo1(fInput).intValue());
    }

    /**
     * Testing a second iterative version found on Rosetta Code, see {@link FibonacciIterative}
     */
    @Test
    public void testIterative2() {
        assertEquals(String.format("for the %dth number, we expected %d", fInput, fExpected), fExpected, FibonacciIterative.fibAlgo2(fInput).intValue());
    }
}


================================================
FILE: src/test/java/com/coveros/training/mathematics/FibonacciTests.java
================================================
package com.coveros.training.mathematics;

import org.junit.Assert;
import org.junit.Test;

import java.math.BigInteger;

public class FibonacciTests {

    private static final String FIB_FOR_43 = "433494437";
    private static final String FIB_FOR_200 = "280571172992510140037611932413038677189525";
    private static final String FIB_FOR_2000 = "4224696333392304878706725602341482782579852840250681098010280137314308584370130707224123599639141511088446087538909603607640194711643596029271983312598737326253555802606991585915229492453904998722256795316982874482472992263901833716778060607011615497886719879858311468870876264597369086722884023654422295243347964480139515349562972087652656069529806499841977448720155612802665404554171717881930324025204312082516817125";

    @Test
    public void testSmallValuesFibAlgo1() {
        final BigInteger fib = FibonacciIterative.fibAlgo1(43);
        Assert.assertEquals(new BigInteger(FIB_FOR_43), fib);
    }

    @Test
    public void testSmallValuesFibAlgo2() {
        final BigInteger fib = FibonacciIterative.fibAlgo2(43);
        Assert.assertEquals(new BigInteger(FIB_FOR_43), fib);
    }

    @Test
    public void testLargeValuesFibAlgo1() {
        final BigInteger fib = FibonacciIterative.fibAlgo1(200);
        Assert.assertEquals(new BigInteger(FIB_FOR_200), fib);
    }

    @Test
    public void testLargeValuesFibAlgo2() {
        final BigInteger fib = FibonacciIterative.fibAlgo2(200);
        Assert.assertEquals(new BigInteger(FIB_FOR_200), fib);
    }

    @Test
    public void testLargerValuesFibAlgo1() {
        final BigInteger fib = FibonacciIterative.fibAlgo1(2000);
        Assert.assertEquals(new BigInteger(FIB_FOR_2000), fib);
    }

    @Test
    public void testLargerValuesFibAlgo2() {
        final BigInteger fib = FibonacciIterative.fibAlgo2(2000);
        Assert.assertEquals(new BigInteger(FIB_FOR_2000), fib);
    }
}



================================================
FILE: src/test/java/com/coveros/training/mathematics/FibServletTests.java
================================================
package com.coveros.training.mathematics;

import com.coveros.training.helpers.ServletUtils;
import org.junit.Test;
import org.mockito.Mockito;
import org.slf4j.Logger;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

import static org.mockito.Mockito.*;

public class FibServletTests {

    private final FibServlet fibServlet = Mockito.spy(new FibServlet());
    private final HttpServletRequest request = Mockito.mock(HttpServletRequest.class, RETURNS_DEEP_STUBS);
    private final HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    private final Logger logger = Mockito.mock(Logger.class);

    /**
     * Testing a happy path, mocking the request, response, and forward.
     */
    @Test
    public void testPostService_HappyPath() {
        when(request.getParameter("fib_param_n")).thenReturn("2");
        when(request.getParameter("fib_algorithm_choice")).thenReturn("regular_recursive");
        doNothing().when(fibServlet).forwardToResult(Mockito.any(), Mockito.any(), Mockito.any());

        fibServlet.doPost(request, response);

        verify(fibServlet).defaultRecursiveCalculation(request, 2);
    }

    /**
     * Testing algorithm "tail_recursive 1"
     */
    @Test
    public void testPostService_tailRecursive1() {
        when(request.getParameter("fib_param_n")).thenReturn("2");
        when(request.getParameter("fib_algorithm_choice")).thenReturn("tail_recursive_1");
        doNothing().when(fibServlet).forwardToResult(Mockito.any(), Mockito.any(), Mockito.any());

        fibServlet.doPost(request, response);

        verify(fibServlet).tailRecursiveAlgo1Calc(request, 2);
    }

    /**
     * Testing algorithm "tail_recursive 2"
     */
    @Test
    public void testPostService_tailRecursive2() {
        when(request.getParameter("fib_param_n")).thenReturn("2");
        when(request.getParameter("fib_algorithm_choice")).thenReturn("tail_recursive_2");
        doNothing().when(fibServlet).forwardToResult(Mockito.any(), Mockito.any(), Mockito.any());

        fibServlet.doPost(request, response);

        verify(fibServlet).tailRecursiveAlgo2Calc(request, 2);
    }

    /**
     * Here we allow a call into the actual forwardToResult method.
     */
    @Test
    public void testPostService_Forward() {
        FibServlet.logger = logger;

        fibServlet.doPost(request, response);

        verify(request).getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP);
        verify(FibServlet.logger, times(0)).error(Mockito.anyString());
    }

    /**
     * Here we allow a call into the actual forwardToResult method,
     * and we force an exception
     */
    @Test
    public void testPostService_realForward_withException() throws ServletException, IOException {
        FibServlet.logger = logger;
        final RequestDispatcher requestDispatcher = mock(RequestDispatcher.class);
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        doThrow(new RuntimeException("hi there, exception here."))
                .when(requestDispatcher).forward(request, response);

        fibServlet.doPost(request, response);

        verify(request).getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP);
        verify(FibServlet.logger).error(Mockito.anyString());
    }

}



================================================
FILE: src/test/java/com/coveros/training/mathematics/MathServletTests.java
================================================
package com.coveros.training.mathematics;

import com.coveros.training.helpers.ServletUtils;
import org.junit.Test;
import org.mockito.Mockito;
import org.slf4j.Logger;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

import static org.mockito.Mockito.*;

public class MathServletTests {

    private final MathServlet mathServlet = Mockito.spy(new MathServlet());
    private final HttpServletRequest request = Mockito.mock(HttpServletRequest.class, RETURNS_DEEP_STUBS);
    private final HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    private final Logger logger = Mockito.mock(Logger.class);

    /**
     * Testing a happy path, mocking the request, response, and forward.
     */
    @Test
    public void testPostService_HappyPath() {
        when(request.getParameter("item_a")).thenReturn("2");
        when(request.getParameter("item_b")).thenReturn("3");
        doNothing().when(mathServlet).forwardToResult(Mockito.any(), Mockito.any(), Mockito.any());

        mathServlet.doPost(request, response);

        verify(mathServlet).setResultToSum(request, 2, 3);
    }

    /**
     * Here we allow a call into the actual forwardToResult method.
     */
    @Test
    public void testPostService_Forward() {
        MathServlet.logger = logger;

        mathServlet.doPost(request, response);

        verify(request).getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP);
        verify(MathServlet.logger, times(0)).error(Mockito.anyString());
    }

    /**
     * Here we allow a call into the actual forwardToResult method,
     * and we force an exception
     */
    @Test
    public void testPostService_realForward_withException() throws ServletException, IOException {
        MathServlet.logger = logger;
        final RequestDispatcher requestDispatcher = mock(RequestDispatcher.class);
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        doThrow(new RuntimeException("hi there, exception here."))
                .when(requestDispatcher).forward(request, response);

        mathServlet.doPost(request, response);

        verify(request).getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP);
        verify(MathServlet.logger).error(Mockito.anyString());
    }

}



================================================
FILE: src/test/java/com/coveros/training/persistence/DbServletTests.java
================================================
package com.coveros.training.persistence;

import org.junit.Test;
import org.mockito.Mockito;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import static org.mockito.Mockito.*;

public class DbServletTests {

    private final IPersistenceLayer pl = Mockito.mock(IPersistenceLayer.class);
    private final DbServlet dbServlet = Mockito.spy(new DbServlet(pl));
    private final HttpServletRequest request = Mockito.mock(HttpServletRequest.class, RETURNS_DEEP_STUBS);
    private final HttpServletResponse response = Mockito.mock(HttpServletResponse.class);

    @Test
    public void testClean() {
        when(request.getParameter("action")).thenReturn("clean");

        dbServlet.doGet(request, response);

        verify(pl).cleanDatabase();
    }

    @Test
    public void testMigrate() {
        when(request.getParameter("action")).thenReturn("migrate");

        dbServlet.doGet(request, response);

        verify(pl).migrateDatabase();
    }

    @Test
    public void testCleanAndMigrate() {
        // the default action is to clean and migrate, so if I send nothing, I'll get that result.
        when(request.getParameter("action")).thenReturn("");

        dbServlet.doGet(request, response);

        verify(pl).cleanAndMigrateDatabase();
    }
}



================================================
FILE: src/test/java/com/coveros/training/persistence/EmptyDataSourceTests.java
================================================
package com.coveros.training.persistence;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.PrintWriter;

/**
 * See {@link EmptyDataSource} for more detail.
 * <p>
 * Just confirm that all methods throw a NotImplementedException
 */
public class EmptyDataSourceTests {

    private EmptyDataSource emptyDataSource = new EmptyDataSource();

    @Before
    public void init() {
        emptyDataSource = new EmptyDataSource();
    }

    @Test(expected = NotImplementedException.class)
    public void testGetConnection() {
        emptyDataSource.getConnection();
    }

    @Test(expected = NotImplementedException.class)
    public void testGetConnectionWithParams() {
        emptyDataSource.getConnection("", "");
    }

    @Test(expected = NotImplementedException.class)
    public void testUnwrap() {
        emptyDataSource.unwrap(emptyDataSource.getClass());
    }

    @Test(expected = NotImplementedException.class)
    public void testIsWrapperFor() {
        emptyDataSource.isWrapperFor(emptyDataSource.getClass());
    }

    @Test(expected = NotImplementedException.class)
    public void testGetLogWriter() {
        emptyDataSource.getLogWriter();
    }

    @Test(expected = NotImplementedException.class)
    public void testSetLogWriter() {
        emptyDataSource.setLogWriter(Mockito.mock(PrintWriter.class));
    }

    @Test(expected = NotImplementedException.class)
    public void testSetLoginTimeout() {
        emptyDataSource.setLoginTimeout(0);
    }

    @Test(expected = NotImplementedException.class)
    public void testGetLoginTimeout() {
        emptyDataSource.getLoginTimeout();
    }

    @Test(expected = NotImplementedException.class)
    public void testGetParentLogger() {
        emptyDataSource.getParentLogger();
    }

}



================================================
FILE: src/test/java/com/coveros/training/persistence/ParameterObjectTests.java
================================================
package com.coveros.training.persistence;

import nl.jqno.equalsverifier.EqualsVerifier;
import org.junit.Assert;
import org.junit.Test;

public class ParameterObjectTests {

    @Test
    public void testShouldHaveEqualsAndHashcodeImplementedCorrectly() {
        EqualsVerifier.forClass(ParameterObject.class).verify();
    }

    @Test
    public void testShouldOutputGoodString() {
        final ParameterObject<String> parameterObject = createTestParameterObject();
        Assert.assertTrue("toString was: " + parameterObject.toString(), parameterObject.toString().contains("data=abc123,type=class java.lang.String"));
    }

    private static ParameterObject<String> createTestParameterObject() {
        return new ParameterObject<>("abc123", String.class);
    }

    @Test
    public void testCanCreateEmpty() {
        final ParameterObject<Void> parameterObject = ParameterObject.createEmpty();
        Assert.assertTrue(parameterObject.isEmpty());
    }
}




================================================
FILE: src/test/java/com/coveros/training/persistence/SqlDataTests.java
================================================
package com.coveros.training.persistence;

import com.coveros.training.authentication.domainobjects.User;
import nl.jqno.equalsverifier.EqualsVerifier;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.Month;

import static org.mockito.Mockito.doThrow;

public class SqlDataTests {

    private static final Date BORROW_DATE = Date.valueOf(LocalDate.of(2018, Month.JANUARY, 1));
    private PreparedStatement preparedStatement = Mockito.mock(PreparedStatement.class);

    @Before
    public void init() {
        preparedStatement = Mockito.mock(PreparedStatement.class);
    }

    @Test
    public void testShouldHaveEqualsAndHashcodeImplementedCorrectly() {
        EqualsVerifier.forClass(SqlData.class).verify();
    }

    @Test
    public void testShouldOutputGoodString() {
        final SqlData<String> sqlData = createTestSqlData();
        Assert.assertTrue("toString was: " + sqlData.toString(), sqlData.toString().contains("description=this is the description,params=,prepared statement=this is the prepared statement = ?;"));
    }

    @Test
    public void testCanCreateEmpty() {
        final SqlData<String> sqlData = SqlData.createEmpty();
        Assert.assertTrue(sqlData.isEmpty());
    }

    private <T> SqlData<T> createTestSqlData() {
        return new SqlData<>("this is the description", "this is the prepared statement = ?;");
    }

    @Test
    public void testCanApplyParamsToPreparedStatement_Long() throws SQLException {
        applyParam(1L, Long.class);
        Mockito.verify(preparedStatement, Mockito.times(1)).setLong(1, 1);
    }

    @Test
    public void testCanApplyParamsToPreparedStatement_String() throws SQLException {
        applyParam("1", String.class);
        Mockito.verify(preparedStatement, Mockito.times(1)).setString(1, "1");
    }

    @Test
    public void testCanApplyParamsToPreparedStatement_Integer() throws SQLException {
        applyParam(1, Integer.class);
        Mockito.verify(preparedStatement, Mockito.times(1)).setInt(1, 1);
    }

    @Test
    public void testCanApplyParamsToPreparedStatement_Date() throws SQLException {
        applyParam(BORROW_DATE, Date.class);
        Mockito.verify(preparedStatement, Mockito.times(1)).setDate(1, BORROW_DATE);
    }

    /**
     * If for some reason the prepared statement throws a SQLException, we
     * will catch it and throw it as a SqlRuntimeException
     */
    @Test(expected = SqlRuntimeException.class)
    public void testCanApplyParamsToPreparedStatement_NegativeCase() throws SQLException {
        doThrow(new SQLException()).when(preparedStatement).setString(1, "");
        applyParam("", String.class);
    }

    private <T> void applyParam(Object o, Class<T> clazz) {
        final SqlData<User> sqlData = new SqlData<>("just a test", "SELECT * FROM user WHERE id = ?");
        sqlData.addParameter(o, clazz);

        sqlData.applyParametersToPreparedStatement(preparedStatement);
    }

}



================================================
FILE: src/test/java/com/coveros/training/tomcat/WebAppListenerTests.java
================================================
package com.coveros.training.tomcat;

import com.coveros.training.persistence.IPersistenceLayer;
import org.junit.Test;
import org.mockito.Mockito;

import javax.servlet.ServletContextEvent;

public class WebAppListenerTests {

    private final IPersistenceLayer pl = Mockito.mock(IPersistenceLayer.class);
    private final WebAppListener webAppListener = Mockito.spy(new WebAppListener(pl));
    private final ServletContextEvent servletContextEvent = Mockito.mock(ServletContextEvent.class);

    /**
     * Directly calling the code that Tomcat will run when the
     * application starts.  It should clean and migrate the database.
     */
    @Test
    public void testContextInitialized() {
        webAppListener.contextInitialized(servletContextEvent);

        Mockito.verify(pl).cleanAndMigrateDatabase();
    }

    @Test
    public void testContextDestroyed() {
        webAppListener.contextDestroyed(servletContextEvent);
        Mockito.verifyNoInteractions(pl);
    }
}



================================================
FILE: src/ui_tests/README.txt
================================================
Contents of the ui directory
----------------------------

behave       :  files for the Python-based Behave BDD framework - see https://github.com/behave/behave
python       :  Python Selenium tests
js           :  JavaScript Selenium tests
c_sharp      :  C# Selenium tests
java         :  Java Selenium tests


================================================
FILE: src/ui_tests/behave/README.txt
================================================
These are BDD tests written in Behave, a Python BDD framework.

These tests drive the design of the UI.


================================================
FILE: src/ui_tests/behave/setup.cfg
================================================
# =============================================================
# BEHAVE CONFIGURATION
# =============================================================
# FILE: .behaverc, behave.ini
#
# SEE ALSO:
#  * http://pythonhosted.org/behave/behave.html#configuration-files
#  * https://github.com/behave/behave
#  * http://pypi.python.org/pypi/behave/
# =============================================================
# format   = rerun
# outfiles = rerun.featureset

[behave]
show_skipped   = false
show_timings   = true
default_format = progress
stdout_capture = no
logging_level  = INFO
junit=true
junit_directory=../../../build/test-results/bdd_ui





================================================
FILE: src/ui_tests/behave/features/authentication_ui.feature
================================================
Feature: A user may authenticate to the system through the UI

    As a user of the system
    I want to be able to authenticate myself
    So that I can use its features securely

    # This user story relates to behavior from a UI-centric point of view.
    # Note that we want as few UI tests as possible.  Logic should be tested lower down, this
    # is just to test the UI

    Scenario: Registering a new user
        Given I am not registered
        When I register with a valid username and password
        Then it indicates I am successfully registered

    Scenario: Login with valid user
        Given I am registered as a user
        When I login
        Then the system allows secure access




================================================
FILE: src/ui_tests/behave/features/environment.py
================================================
import requests
from selenium import webdriver
from selenium.webdriver.common.proxy import Proxy, ProxyType

SERVER = "localhost"
URL = "http://%s:8080" % SERVER


def before_all(context):
    __open_browser(context)


def __open_browser(context):
    chrm = context.config.userdata['chromedriver_path']
    
    try:
        # if there is a proxy, we'll use it.  Otherwise, we won't.
        requests.get("http://localhost:8888", timeout=0.01)

        # if there was no exception, we continue here.
        PROXY = "localhost:8888"

        proxy = Proxy()
        proxy.proxy_type = ProxyType.MANUAL
        proxy.http_proxy = PROXY

        capabilities = webdriver.DesiredCapabilities.CHROME
        proxy.add_to_capabilities(capabilities)
        
        if (chrm):
            context.driver = webdriver.Chrome(desired_capabilities=capabilities, executable_path=chrm)
        else:
            context.driver = webdriver.Chrome(desired_capabilities=capabilities)
        return context.driver
    except:
        if (chrm):
            context.driver = webdriver.Chrome(executable_path=chrm)
        else:
            # adding the service args as described below will cause Chromedriver
            # to create a log of the communication between it and the Chrome
            # browser.  It's eye-opening. 
            #
            # for instance:
	        #   [1568045962.076][INFO]: [e18882b1f2abbda89f232f777f98f686] COMMAND TypeElement {
	        #      "id": "0.47079920350295135-1",
	        #      "sessionId": "e18882b1f2abbda89f232f777f98f686",
	        #      "text": "Byron",
	        #      "value": [ "B", "y", "r", "o", "n" ]
	        #   }
            #context.driver = webdriver.Chrome(service_args=["--verbose","--logepath=C:\\temp\\qc1.log"])
            context.driver = webdriver.Chrome()
        return context.driver


def before_scenario(context, scenario):
    __reset_database()


def after_all(context):
    __close_browser(context)


def __close_browser(context):
    context.driver.close()


def __reset_database():
    requests.get("%s/demo/flyway" % URL)



================================================
FILE: src/ui_tests/behave/features/librarian_ui.feature
================================================
Feature: A librarian has a user interface to lend a book

    As a librarian,
    I want a UI for lending a book
    so that it is easy to provide books to borrowers

    # This user story relates to behavior from a UI-centric point of view.
    # Note that we want as few UI tests as possible.  Logic should be tested lower down, this
    # is just to test the UI

    Scenario: A registered patron checks out a book
        Given a borrower is registered
        And a book is available for borrowing
        When they try to check out the book
        Then the system indicates success




================================================
FILE: src/ui_tests/behave/features/steps/ackermannStepDefs.py
================================================
from behave import given, when, then
from hamcrest import *

@when('I calculate ackermann\'s function with an m of {param_m_val:d} and an n of {param_n_val:d}')
def step_impl(context, param_m_val, param_n_val):
    __calculate_ackermann(context, param_m_val, param_n_val)
    pass


def __calculate_ackermann(context, param_m_val, param_n_val):
    driver = context.driver
    driver.get("http://localhost:8080/demo")
    param_m = driver.find_element_by_id("ack_param_m")
    param_m.clear()
    param_m.send_keys(param_m_val)
    param_n = driver.find_element_by_id("ack_param_n")
    param_n.clear()
    param_n.send_keys(param_n_val)
    submit_button = driver.find_element_by_id("calculate_ackermann")
    submit_button.click()


@then('Ackermann\'s function indicates that the result is {result_val}')
def step_impl(context, result_val):
    result = context.driver.find_element_by_id('result')
    assert_that(result.text, contains_string(result_val))




================================================
FILE: src/ui_tests/behave/features/steps/authenticationStepDefs.py
================================================
from behave import given, when, then
from hamcrest import *

empty_database = ''
one_user_registered = 'alice password123'
URL = 'http://localhost:8080/demo/library.html'
DEFAULT_USERNAME = 'alice'
DEFAULT_PASSWORD = 'asdfkljhasdfishdfksaljdfh'


@given('I am not registered')
def step_impl(context):
    pass


@when('I register with a valid username and password')
def step_impl(context):
    __register_user(context, DEFAULT_USERNAME, DEFAULT_PASSWORD)
    pass


@then('it indicates I am successfully registered')
def step_impl(context):
    result = context.driver.find_element_by_id('result')
    assert_that(result.text, contains_string('successfully registered: true'))


@given('I am registered as a user')
def step_impl(context):
    context.username = DEFAULT_USERNAME
    context.password = DEFAULT_PASSWORD
    __register_user(context, context.username, context.password)
    pass


@when('I login')
def step_impl(context):
    __login_user(context, context.username, context.password)
    pass


@then('the system allows secure access')
def step_impl(context):
    result = context.driver.find_element_by_id('result')
    assert_that(result.text, contains_string('access granted'))


def __register_user(context, username_text, password_text):
    driver = context.driver
    driver.get(URL)
    username = driver.find_element_by_id("register_username")
    username.clear()
    username.send_keys(username_text)
    password = driver.find_element_by_id("register_password")
    password.clear()
    password.send_keys(password_text)
    submit_button = driver.find_element_by_id("register_submit")
    submit_button.click()


def __login_user(context, username_text, password_text):
    driver = context.driver
    driver.get(URL)
    username = driver.find_element_by_id("login_username")
    username.clear()
    username.send_keys(username_text)
    password = driver.find_element_by_id("login_password")
    password.clear()
    password.send_keys(password_text)
    submit_button = driver.find_element_by_id("login_submit")
    submit_button.click()


================================================
FILE: src/ui_tests/behave/features/steps/fibonacciStepDefs.py
================================================
from behave import given, when, then
from hamcrest import *

@when('I calculate the {n:d}th fibonacci number')
def step_impl(context, n):
    __calculate_fibonacci(context, n)
    pass


def __calculate_fibonacci(context, n):
    driver = context.driver
    driver.get("http://localhost:8080/demo")
    param_n = driver.find_element_by_id("fib_param_n")
    param_n.clear()
    param_n.send_keys(n)
    submit_button = driver.find_element_by_id("calculate_fibonacci")
    submit_button.click()


@then('the Fibonacci function indicates that the result is {result_val}')
def step_impl(context, result_val):
    result = context.driver.find_element_by_id('result')
    assert_that(result.text, contains_string(result_val))




================================================
FILE: src/ui_tests/behave/features/steps/librarianStepDefs.py
================================================
from behave import given, when, then
from hamcrest import *

URL = 'http://localhost:8080/demo/library.html'


@given('a borrower is registered')
def step_impl(context):
    borrower_name = "some borrower"
    __register_borrower(context, borrower_name)
    context.my_borrower_name = borrower_name

@given('a book is available for borrowing')
def step_impl(context):
    book_title = "some book"
    __register_book(context, book_title)
    context.my_book_title = book_title


@when('they try to check out the book')
def step_impl(context):
    __lend_book(context, context.my_borrower_name, context.my_book_title)


@then('the system indicates success')
def step_impl(context):
    result = context.driver.find_element_by_id('result')
    assert_that(result.text, contains_string('SUCCESS'))


def __register_borrower(context, borrower_name):
    driver = context.driver
    driver.get(URL)
    borrower = driver.find_element_by_id("register_borrower")
    borrower.clear()
    borrower.send_keys(borrower_name)
    submit_button = driver.find_element_by_id("register_borrower_submit")
    submit_button.click()


def __register_book(context, book_title):
    driver = context.driver
    driver.get(URL)
    book = driver.find_element_by_id("register_book")
    book.clear()
    book.send_keys(book_title)
    submit_button = driver.find_element_by_id("register_book_submit")
    submit_button.click()

def __lend_book(context, my_borrower_name, my_book_title):
    driver = context.driver
    driver.get(URL)
    book = driver.find_element_by_id("lend_book")
    book.send_keys(my_book_title)
    borrower = driver.find_element_by_id("lend_borrower")
    borrower.send_keys(my_borrower_name)
    submit_button = driver.find_element_by_id("lend_book_submit")
    submit_button.click()



================================================
FILE: src/ui_tests/cs/README.txt
================================================
Tested with Visual Studio 2019 Community edition.

dependencies:
    Visual Studio 2019
    Chrome (https://www.google.com/chrome/)
    Chromedriver (https://chromedriver.chromium.org/downloads)

See README.md in the root directory for further detail

To run tests:

    First, make sure the Demo application is already running, check at http://localhost:8080/demo/

    Then, to run these tests,
        1. Open the solution with Visual Studio 2019
        2. On the toolbar, select Test -> Run -> All tests

    Alternate:
        On the command line, in the testproject directory, run:

            dotnet test


================================================
FILE: src/ui_tests/cs/testproject/testproject.csproj
================================================
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netcoreapp2.1</TargetFramework>

    <IsPackable>false</IsPackable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="nunit" Version="3.10.1" />
    <PackageReference Include="NUnit3TestAdapter" Version="3.10.0" />
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.8.0" />
    <PackageReference Include="Selenium.WebDriver" Version="3.141.0" />
  </ItemGroup>

</Project>


================================================
FILE: src/ui_tests/cs/testproject/testproject.sln
================================================
﻿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.29009.5
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "testproject", "testproject.csproj", "{0F235366-2E02-4940-B780-B9053BF76E78}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{0F235366-2E02-4940-B780-B9053BF76E78}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{0F235366-2E02-4940-B780-B9053BF76E78}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{0F235366-2E02-4940-B780-B9053BF76E78}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{0F235366-2E02-4940-B780-B9053BF76E78}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {3F899618-DBAC-452F-BE9C-48FEDCE1652D}
	EndGlobalSection
EndGlobal



================================================
FILE: src/ui_tests/cs/testproject/UiTest.cs
================================================
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using NUnit.Framework;

namespace Tests
{


    [TestFixture]
    public class UiTest
    {

        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;

        [SetUp]
        public void SetUp()
        {
            driver = new ChromeDriver();
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
        }

        [TearDown]
        protected void TearDown()
        {
            driver.Quit();
        }

        [Test]
        public void Test1()
        {
            driver.Navigate().GoToUrl("http://localhost:8080/demo/library.html");
            driver.FindElement(By.CssSelector(".button-form:nth-child(4) > input")).Click();
            driver.FindElement(By.LinkText("Return")).Click();
            driver.FindElement(By.Id("register_book")).Click();
            driver.FindElement(By.Id("register_book")).SendKeys("some book");
            driver.FindElement(By.Id("register_book_submit")).Click();
            driver.FindElement(By.LinkText("Return")).Click();
            driver.FindElement(By.Id("register_borrower")).Click();
            driver.FindElement(By.Id("register_borrower")).SendKeys("some borrower");
            driver.FindElement(By.Id("register_borrower_submit")).Click();
            driver.FindElement(By.LinkText("Return")).Click();
            driver.FindElement(By.Id("lend_book")).Click();
            driver.FindElement(By.Id("lend_book")).SendKeys("some book");
            driver.FindElement(By.Id("lend_borrower")).SendKeys("some borrower");
            driver.FindElement(By.Id("lend_book_submit")).Click();
            Assert.That(driver.FindElement(By.Id("result")).Text, Is.EqualTo("SUCCESS"));
        }
    }
}


================================================
FILE: src/ui_tests/java/README.txt
================================================
dependencies:
    JDK 8 or above,
    Chrome (https://www.google.com/chrome/)
    Chromedriver (https://chromedriver.chromium.org/downloads)

See README.md in the root directory for further detail

To run tests:

    First, make sure the Demo application is already running, check at http://localhost:8080/demo/

    Then, to run these tests:

        gradlew test


================================================
FILE: src/ui_tests/java/gradle.properties
================================================
projectname=DemoJavaUITests
Description=A demonstration of testing the UI of an application
version=1.0.0
org.gradle.daemon=true
#
#If you want to specify the path to chromedriver.
#chromedriver.path=C:/Users/foo/Downloads/chromedriver_win32/chromedriver.exe
#chromedriver.path=/home/foo/Downloads/chromedriver_linux/chromedriver

# if you want to debug gradle, this will open a port on 5006 when the
# daemon is running.
#org.gradle.jvmargs=-XX:MaxPermSize=4g -XX:+HeapDumpOnOutOfMemoryError -Xmx4g -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5006

#no need for colorful output and progress bars.  plain will do.
org.gradle.console=plain
org.gradle.workers.max=1

# Setting the memory config explicitly
org.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=1024m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8


================================================
FILE: src/ui_tests/java/gradlew
================================================
#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"



================================================
FILE: src/ui_tests/java/gradlew.bat
================================================
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega



================================================
FILE: src/ui_tests/java/gradle/wrapper/gradle-wrapper.properties
================================================
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-7.0-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists



================================================
FILE: src/ui_tests/java/src/main/resources/log4j2.xml
================================================
<?xml version="1.0" encoding="UTF-8"?>
<Configuration monitorinterval="30" status="info" strict="true">

    <Appenders>
        <Appender type="Console" name="Console">
            <Layout type="PatternLayout" pattern="%d %p %m%n"/>
        </Appender>
    </Appenders>

    <Loggers>
        <Root level="INFO">
            <AppenderRef ref="Console"/>
        </Root>
    </Loggers>

</Configuration>



================================================
FILE: src/ui_tests/java/src/test/java/com/coveros/training/ApiCalls.java
================================================
package com.coveros.training;

import org.apache.http.client.fluent.Content;
import org.apache.http.client.fluent.Form;
import org.apache.http.client.fluent.Request;

import java.io.IOException;

public class ApiCalls {

    /**
     * Use the API to register a user
     * @param username some username
     * @param password a really good password (otherwise it will probably respond with a complaint
     * @return returns the body of the result, if you wish to use it.
     */
    public static String registerUser(String username, String password) {
        try {
            final Content content = Request.Post("http://localhost:8080/demo/register")
                    .bodyForm(Form.form().add("username", username).add("password", password).build())
                    .execute().returnContent();
            return content.asString();
        } catch (IOException e) {
            e.printStackTrace();
            return "";
        }
    }


    public static String registerBook(String title) {
        try {
            final Content content = Request.Post("http://localhost:8080/demo/registerbook")
                    .bodyForm(Form.form().add("book", title).build())
                    .execute().returnContent();
            return content.asString();
        } catch (IOException e) {
            e.printStackTrace();
            return "";
        }
    }

    public static String registerBorrowers(String name) {
        try {
            final Content content = Request.Post("http://localhost:8080/demo/registerborrower")
                    .bodyForm(Form.form().add("borrower", name).build())
                    .execute().returnContent();
            return content.asString();
        } catch (IOException e) {
            e.printStackTrace();
            return "";
        }
    }
}



================================================
FILE: src/ui_tests/java/src/test/java/com/coveros/training/HtmlUnitTests.java
================================================
package com.coveros.training;

import com.gargoylesoftware.htmlunit.ProxyConfig;
import com.gargoylesoftware.htmlunit.WebClient;
import com.gargoylesoftware.htmlunit.html.DomElement;
import com.gargoylesoftware.htmlunit.html.HtmlPage;
import com.gargoylesoftware.htmlunit.html.HtmlPasswordInput;
import com.gargoylesoftware.htmlunit.html.HtmlTextInput;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class HtmlUnitTests {

    private WebClient driver;

    @Before
    public void setUp() {
        driver = new WebClient();
        // prevent javascript from running.  We want these tests to really zip.
        driver.getOptions().setJavaScriptEnabled(false);
        ProxyConfig proxyConfig = new ProxyConfig("localhost", 10888);
        driver.getOptions().setProxyConfig(proxyConfig);
        try {
            getPage("http://localhost:8080");
        } catch (Exception ex) {
            // if we get here, the proxy isn't listening at that location.  Switch to non-proxy mode
            driver.getOptions().setProxyConfig(new ProxyConfig());
        }
    }

    @After
    public void tearDown() {
        driver.close();
    }


    private HtmlPage getPage(String url) {
        try {
            return driver.getPage(url);
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }

    private HtmlPage click(DomElement button) {
        try {
            return button.click();
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }

    private void type(DomElement input, String text) {
        try {
            // try to send text assuming it's a text input...
            ((HtmlTextInput) input).type(text);
        } catch (Exception ex) {
            // if we fail *because* it's a password input
            if (ex.getMessage().contains("HtmlPasswordInput cannot be cast to class com.gargoylesoftware.htmlunit.html.HtmlTextInput")) {
                try {
                    // try to use it as a password input.
                    ((HtmlPasswordInput) input).type(text);
                } catch (Exception ex1) {
                    throw new RuntimeException(ex1);
                }
            }
        }
    }

    /**
     * Tests the entire process of lending -
     * registers a book, a borrower, and lends it.
     * See {{@link SeleniumTests#test_shouldLendBook} for a
     * full javascript version that runs on Chrome
     */
    @Test
    public void test_shouldLendBook() {
        getPage("http://localhost:8080/demo/flyway");
        HtmlPage page = getPage("http://localhost:8080/demo/library.html");
        type(page.getElementById("register_book"), "some book");
        page = click(page.getElementById("register_book_submit"));
        page = click(page.getAnchorByText("Return"));
        type(page.getElementById("register_borrower"), "some borrower");
        page = click(page.getElementById("register_borrower_submit"));
        page = click(page.getAnchorByText("Return"));
        type(page.getElementById("lend_book"), "some book");
        type(page.getElementById("lend_borrower"), "some borrower");
        page = click(page.getElementById("lend_book_submit"));
        final DomElement result = page.getElementById("result");

        assertEquals("SUCCESS", result.getTextContent());
    }

    /**
     * Testing that the UI for registering and logging in a user (a librarian) works without javascript.
     */
    @Test
    public void test_shouldRegisterAndLoginUser() {
        getPage("http://localhost:8080/demo/flyway");
        String username = "some user";
        String password = "asdflkajsdfl;aksjdfal;sdfkj";
        ApiCalls.registerUser(username, password);

        HtmlPage page = getPage("http://localhost:8080/demo/library.html");
        type(page.getElementById("login_username"), username);
        type(page.getElementById("login_password"), password);
        page = click(page.getElementById("login_submit"));
        final DomElement loginResult = page.getElementById("result");

        assertTrue("result was " + loginResult.getTextContent(),
                loginResult.getTextContent().contains("access granted"));
    }


}



================================================
FILE: src/ui_tests/java/src/test/java/com/coveros/training/SeleniumTests.java
================================================
package com.coveros.training;

import io.github.bonigarcia.wdm.WebDriverManager;
import org.junit.*;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class SeleniumTests {
    private static WebDriver driver;

    @BeforeClass
    public static void setUp() {
        WebDriverManager.chromedriver().setup();
        driver = new ChromeDriver();
    }

    @AfterClass
    public static void tearDown() {
        driver.quit();
    }

    /**
     * Tests the entire process of lending -
     * registers a book, a borrower, and lends it.
     * See {{@link HtmlUnitTests#test_shouldLendBook} for a
     * non-javascript, headless version that runs on HtmlUnit
     */
    @Test
    public void test_shouldLendBook() {
        driver.get("http://localhost:8080/demo/flyway");
        driver.get("http://localhost:8080/demo/library.html");
        driver.findElement(By.id("register_book")).sendKeys("some book");
        driver.findElement(By.id("register_book_submit")).click();
        driver.findElement(By.linkText("Return")).click();
        driver.findElement(By.id("register_borrower")).sendKeys("some borrower");
        driver.findElement(By.id("register_borrower_submit")).click();
        driver.findElement(By.linkText("Return")).click();
        driver.findElement(By.id("lend_book")).sendKeys("some book");
        driver.findElement(By.id("lend_borrower")).sendKeys("some borrower");
        driver.findElement(By.id("lend_book_submit")).click();
        final String result = driver.findElement(By.id("result")).getText();
        assertEquals("SUCCESS", result);
    }

    /**
     * In this case, we're adding no books, so we shouldn't
     * be able to interact with this, it should throw ane exception
     *
     * more detail:
     * Under lending, books and borrowers inputs have three modes.
     * a) if no books/borrowers, lock the input
     * b) If 1 - 9, show a dropdown
     * c) If 10 and up, show an autocomplete
     */
    @Test(expected = org.openqa.selenium.ElementNotInteractableException.class)
    public void test_shouldShowLockedInput() {
        // clear the database...
        driver.get("http://localhost:8080/demo/flyway");

        driver.get("http://localhost:8080/demo/library.html");
        driver.findElement(By.id("lend_book")).sendKeys("some book");
    }

    /**
     * In this case, we have one book and one borrower,
     * so we should get a dropdown
     *
     * more detail:
     * Under lending, books and borrowers inputs have three modes.
     * a) if no books/borrowers, lock the input
     * b) If 1 - 9, show a dropdown
     * c) If 10 and up, show an autocomplete
     */
    @Test
    public void test_shouldShowDropdowns() {
        // clear the database...
        driver.get("http://localhost:8080/demo/flyway");
        ApiCalls.registerBook("some book");
        ApiCalls.registerBorrowers("some borrower");

        driver.get("http://localhost:8080/demo/library.html");

        // using the arrow keys to select an element is a very "dropdown" kind of behavior.
        driver.findElement(By.id("lend_book")).findElement(By.xpath("//option[contains(.,\'some book\')]")).click();
        driver.findElement(By.id("lend_borrower")).findElement(By.xpath("//option[contains(.,\'some borrower\')]")).click();
        driver.findElement(By.id("lend_book_submit")).click();
        final String result = driver.findElement(By.id("result")).getText();
        assertEquals("SUCCESS", result);
    }

    /**
     * In this case, we have 10 books and one borrower,
     * so we should get a autocomplete for books
     *
     * more detail:
     * Under lending, books and borrowers inputs have three modes.
     * a) if no books/borrowers, lock the input
     * b) If 1 - 9, show a dropdown
     * c) If 10 and up, show an autocomplete
     */
    @Test
    public void test_shouldShowAutocomplete() {
        // clear the database...
        driver.get("http://localhost:8080/demo/flyway");
        ApiCalls.registerBook("a");
        ApiCalls.registerBook("b");
        ApiCalls.registerBook("c");
        ApiCalls.registerBook("d");
        ApiCalls.registerBook("e");
        ApiCalls.registerBook("f");
        ApiCalls.registerBook("g");
        ApiCalls.registerBook("h");
        ApiCalls.registerBook("i");
        ApiCalls.registerBook("j");
        ApiCalls.registerBorrowers("some borrower");

        driver.get("http://localhost:8080/demo/library.html");

        // using the arrow keys to select an element is a very "dropdown" kind of behavior.
        driver.findElement(By.id("lend_book")).sendKeys("f");
        driver.findElement(By.xpath("//li[contains(.,\'f\')]")).click();
        driver.findElement(By.id("lend_borrower")).findElement(By.xpath("//option[contains(.,\'some borrower\')]")).click();
        driver.findElement(By.id("lend_book_submit")).click();
        final String result = driver.findElement(By.id("result")).getText();
        assertEquals("SUCCESS", result);
    }

    /**
     * If the value for a book or borrower has a quote in it,
     * single or double, it should continue to work.
     */
    @Test
    public void test_ShouldHandleQuotesInBookOrBorrowerValue() {
        // clear the database...
        driver.get("http://localhost:8080/demo/flyway");
        ApiCalls.registerBook("some \"book");
        ApiCalls.registerBorrowers("some \"borrower");

        driver.get("http://localhost:8080/demo/library.html");

        // using the arrow keys to select an element is a very "dropdown" kind of behavior.
        driver.findElement(By.id("lend_book")).findElement(By.xpath("//option[contains(.,\'some \"book\')]")).click();
        driver.findElement(By.id("lend_borrower")).findElement(By.xpath("//option[contains(.,\'some \"borrower\')]")).click();
        driver.findElement(By.id("lend_book_submit")).click();
        final String result = driver.findElement(By.id("result")).getText();
        assertEquals("SUCCESS", result);
    }

    @Test
    public void test_ShouldRegisterAndLoginUser() {
        driver.get("http://localhost:8080/demo/flyway");
        driver.get("http://localhost:8080/demo/library.html");
        driver.findElement(By.id("register_username")).sendKeys("some user");
        driver.findElement(By.id("register_password")).sendKeys("lasdfj;alsdkfjasdf");
        driver.findElement(By.id("register_submit")).click();

        final String registerResult = driver.findElement(By.id("result")).getText();
        assertTrue("result was " + registerResult,
                registerResult.contains("status: SUCCESSFULLY_REGISTERED"));

        driver.findElement(By.linkText("Return")).click();
        driver.findElement(By.id("login_username")).sendKeys("some user");
        driver.findElement(By.id("login_password")).sendKeys("lasdfj;alsdkfjasdf");
        driver.findElement(By.id("login_submit")).click();

        final String loginResult = driver.findElement(By.id("result")).getText();
        assertTrue("result was " + loginResult,
                loginResult.contains("access granted"));

    }


}



================================================
FILE: src/ui_tests/js/README.txt
================================================
This is a JavaScript Mocha test.

dependencies:
    NodeJS (https://nodejs.org/)
    Chrome (https://www.google.com/chrome/)
    Chromedriver (https://chromedriver.chromium.org/downloads)

See README.md in the root directory for further detail

To run tests:

    First, make sure the Demo application is already running, check at http://localhost:8080/demo/

    To initialize the system:

        npm install

    then...

        npm test


================================================
FILE: src/ui_tests/js/package.json
================================================
{
  "name": "js_tests",
  "description": "Allows testing with Selenium and Javascript",
  "version": "1.0.0",
  "scripts": {
    "test": "mocha"
  },
  "keywords": [
    "selenium",
    "coveros",
    "demo"
  ],
  "author": "Byron Katz",
  "license": "MIT",
  "homepage": "https://github.com/7ep/demo",
  "dependencies": {
    "mocha": "^7.1.1",
    "selenium-webdriver": "^4.0.0-alpha.7"
  }
}



================================================
FILE: src/ui_tests/js/test/test.spec.js
================================================
// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('test1', function() {
  this.timeout(30000)
  let driver
  let vars

  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })

  afterEach(async function() {
    await driver.quit();
  })

  it('test1', async function() {
    await driver.get("http://localhost:8080/demo/library.html")
    await driver.findElement(By.css(".button-form:nth-child(4) > input")).click()
    await driver.findElement(By.linkText("Return")).click()
    await driver.findElement(By.id("register_book")).click()
    await driver.findElement(By.id("register_book")).sendKeys("some book")
    await driver.findElement(By.id("register_book_submit")).click()
    await driver.findElement(By.linkText("Return")).click()
    await driver.findElement(By.id("register_borrower")).click()
    await driver.findElement(By.id("register_borrower")).sendKeys("some borrower")
    await driver.findElement(By.id("register_borrower_submit")).click()
    await driver.findElement(By.linkText("Return")).click()
    await driver.findElement(By.id("lend_book")).click()
    await driver.findElement(By.id("lend_book")).sendKeys("some book")
    await driver.findElement(By.id("lend_borrower")).sendKeys("some borrower")
    await driver.findElement(By.id("lend_book_submit")).click()
    assert(await driver.findElement(By.id("result")).getText() == "SUCCESS")
  })

})



================================================
FILE: src/ui_tests/python/README.txt
================================================
dependencies:
    Python 3 (https://www.python.org/downloads/),
    Chrome (https://www.google.com/chrome/)
    Chromedriver (https://chromedriver.chromium.org/downloads)

See README.md in the root directory for further detail

to run tests in this directory:

    pipenv run pytest


================================================
FILE: src/ui_tests/python/basic_test.py
================================================
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.select import Select
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import requests
from selenium.webdriver.common.proxy import Proxy, ProxyType
from hamcrest import *
import time

SERVER = "localhost"
URL = "http://%s:8080" % SERVER
HOMEPAGE = "%s/demo/library.html" % URL
RESET_DATABASE = "%s/demo/flyway" % URL
DEFAULT_BORROWER = "alice"

class TestBasic():

  def setup_class(self):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_class(self):
    self.driver.quit()
  
  def test_basic_lend_book(self):
    self.driver.get("http://localhost:8080/demo/library.html")
    self.driver.find_element(By.CSS_SELECTOR, ".button-form:nth-child(4) > input").click()
    self.driver.find_element(By.LINK_TEXT, "Return").click()
    self.driver.find_element(By.ID, "register_book").click()
    self.driver.find_element(By.ID, "register_book").send_keys("some book")
    self.driver.find_element(By.ID, "register_book_submit").click()
    self.driver.find_element(By.LINK_TEXT, "Return").click()
    self.driver.find_element(By.ID, "register_borrower").click()
    self.driver.find_element(By.ID, "register_borrower").send_keys("some borrower")
    self.driver.find_element(By.ID, "register_borrower_submit").click()
    self.driver.find_element(By.LINK_TEXT, "Return").click()
    self.driver.find_element(By.ID, "lend_book").click()
    self.driver.find_element(By.ID, "lend_book").send_keys("some book")
    self.driver.find_element(By.ID, "lend_borrower").send_keys("some borrower")
    self.driver.find_element(By.ID, "lend_book_submit").click()
    assert self.driver.find_element(By.ID, "result").text == "SUCCESS"

  # TDD for a UI element that makes choosing a book easier
  #
  # Put more concretely - I want there to exist some UI widget
  # so that when I want to lend a book, I am easily able to
  # search the book by name.  A nice UI experience
  # would be some kind of input box that shows all the books, paged,
  # and filters the possibilities immediately as the user types.
  # let's make that, TDD-style.
  def test_list_select_pom(self):
    self.driver.get(RESET_DATABASE)
    library = LibraryPageObjectModel(self.driver)
    library.register_book("another book")
    library.register_borrower(DEFAULT_BORROWER)

    # Enter in part of a borrower's name, then select the person from a list
    self.driver.get(HOMEPAGE)
    self.driver.find_element(By.ID, "lend_book").send_keys(Keys.ARROW_UP)

    # and select a book in a si
    # and lend them the book...
    select = Select(self.driver.find_element(By.ID, "lend_book"))
    assert select.first_selected_option.text == "another book"




# used as a simple object during console runs,
# to experiment.  typical incantation is:
#   context = Object()
class Object(object):
    pass


# all the important capabilities for the Login function
class Login:
    def __init__(self, driver):
        self.driver = driver

    def enter_username(self, text):
        login_username_field = self.driver.find_element_by_id("login_username")
        login_username_field.send_keys(text)

    def enter_password(self, text):
        login_password_field = self.driver.find_element_by_id("login_password")
        login_password_field.send_keys(text)

    def enter(self):
        login_button = self.driver.find_element_by_id("login_submit")
        login_button.click()


# all the important capabilities for the Registration function
class Registration:
    def __init__(self, driver):
        self.driver = driver

    def enter_username(self, text):
        register_username_field = self.driver.find_element_by_id("register_username")
        register_username_field.send_keys(text)

    def enter_password(self, text):
        register_password_field = self.driver.find_element_by_id("register_password")
        register_password_field.send_keys(text)

    def enter(self):
        register_button = self.driver.find_element_by_id("register_submit")
        register_button.click()


# all the important capabilities for the Book Registration function
class BookRegister:
    def __init__(self, driver):
        self.driver = driver

    def register_book(self, text):
        register_book_field = self.driver.find_element_by_id("register_book")
        register_book_field.send_keys(text)

    def enter(self):
        register_button = self.driver.find_element_by_id("register_book_submit")
        register_button.click()


# all the important capabilities for the Borrower Registration function
class BorrowerRegister:
    def __init__(self, driver):
        self.driver = driver

    def register_borrower(self, text):
        register_borrower_field = self.driver.find_element_by_id("register_borrower")
        register_borrower_field.send_keys(text)

    def enter(self):
        register_button = self.driver.find_element_by_id("register_borrower_submit")
        register_button.click()


# all the important capabilities for the Book Lending function
class BookLend:
    def __init__(self, driver):
        self.driver = driver

    def enter_book(self, text):
        book_field = self.driver.find_element_by_id("lend_book")
        book_field.send_keys(text)

    def enter_borrower(self, text):
        borrower_field = self.driver.find_element_by_id("lend_borrower")
        borrower_field.send_keys(text)

    def enter(self):
        lend_button = self.driver.find_element_by_id("lend_book_submit")
        lend_button.click()


# all the important capabilities for the Summation function
class Summation:
    def __init__(self, driver):
        self.driver = driver

    def enter_addend_a(self, text):
        addend_a = self.driver.find_element_by_id("addend_a")
        addend_a.send_keys(text)

    def enter_addend_b(self, text):
        addend_b = self.driver.find_element_by_id("addend_b")
        addend_b.send_keys(text)

    def enter(self):
        lend_button = self.driver.find_element_by_id("math_submit")
        lend_button.click()

# all the important capabilities for the Result page
class Result:
    def __init__(self, driver):
        self.driver = driver

    def get_result_text(self):
        return self.driver.find_element_by_id("result").text

class LibraryPageObjectModel:

    def __init__(self, driver):
        self.driver = driver

    def register_user(self, username, password):
        self.driver.get(HOMEPAGE)

        reg = Registration(driver)
        reg.enter_username(username)
        reg.enter_password(password)
        reg.enter()

    def login_user(self, username, password):
        self.driver.get(HOMEPAGE)

        login = Login(self.driver)
        login.enter_username(username)
        login.enter_password(password)
        login.enter()

    def add_numbers(self, a, b):
        self.driver.get(HOMEPAGE)

        sums = Summation(self.driver)
        sums.enter_addend_a(a)
        sums.enter_addend_b(b)
        sums.enter()

    def register_borrower(self, name):
        self.driver.get(HOMEPAGE)

        bor = BorrowerRegister(self.driver)
        bor.register_borrower(name)
        bor.enter()

    def register_book(self, title):
        self.driver.get(HOMEPAGE)

        br = BookRegister(self.driver)
        br.register_book(title)
        br.enter()

    def lend_book(self, title, borrower):
        self.driver.get(HOMEPAGE)

        bl = BookLend(self.driver)
        bl.enter_book(title)
        bl.enter_borrower(borrower)
        bl.enter()

    def result(self):
        return Result(self.driver)



# opens a browser, returns a handle for it
def start_testing():
    return open_browser()


# an example of page-object-model testing
def register_and_login():
    driver = start_testing()
    username = "bob"
    password = "fWd8SNtALsKScD9xYUm5Jb"

    driver.get(RESET_DATABASE)
    driver.get(HOMEPAGE)

    reg = Registration(driver)
    reg.enter_username(username)
    reg.enter_password(password)
    reg.enter()

    driver.get(HOMEPAGE)

    login = Login(driver)
    login.enter_username(username)
    login.enter_password(password)
    login.enter()

    result = Result(driver)
    result_text = result.get_result_text()
    assert_that(result_text, contains_string('access granted'))

    driver.close()

# an example of a more abstracted page-object-model
def full_lend_book():
    driver = start_testing()
    driver.get(RESET_DATABASE)
    book = "alice in wonderland"
    borrower = "bob"
    library = LibraryPageObjectModel(driver)
    library.register_book(book)
    library.register_borrower(borrower)
    library.lend_book(book, borrower)
    result = library.result()
    assert_that(result.get_result_text(), equal_to("SUCCESS"))
    driver.close()



def open_browser():
    try:
        # if there is a proxy, we'll use it.  Otherwise, we won't.
        requests.get("http://localhost:8888", timeout=0.01)

        # if there was no exception, we continue here.
        PROXY = "localhost:8888"

        proxy = Proxy()
        proxy.proxy_type = ProxyType.MANUAL
        proxy.http_proxy = PROXY

        capabilities = webdriver.DesiredCapabilities.CHROME
        proxy.add_to_capabilities(capabilities)

        driver = webdriver.Chrome(desired_capabilities=capabilities)
        return driver
    except:
        # if we got an exception while trying to hit a proxy URL,
        # it probably means the proxy isn't available, so we run
        # without a proxy, as follows.
        driver = webdriver.Chrome()
        return driver



================================================
FILE: src/ui_tests/python/Pipfile
================================================
[[source]]
name = "pypi"
url = "https://pypi.org/simple"
verify_ssl = true

[dev-packages]

[packages]
requests = "*"
behave = "*"
pyhamcrest = "*"
selenium = "*"
pytest = "*"
behave2cucumber = "*"


