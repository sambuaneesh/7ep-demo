


================================================
FILE: src/test/java/com/coveros/training/authentication/LoginServletTests.java
================================================
package com.coveros.training.authentication;

import com.coveros.training.helpers.ServletUtils;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import static org.mockito.Mockito.*;

/**
 * These tests cover the testing of the endpoint itself, not so much
 * anything it calls.  That's why we mock out everything outside
 * this class.  It makes our tests run very quickly, and enables us to
 * focus with laser-like precision on the functionality this class
 * provides.  Other tests will provide integration testing - but not
 * this one.
 */
public class LoginServletTests {
    public static final String DEFAULT_USERNAME = "alice";
    public static final String DEFAULT_PASSWORD = "abc123";
    private HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    private HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    private RequestDispatcher requestDispatcher = Mockito.mock(RequestDispatcher.class);
    private LoginServlet loginServlet = spy(new LoginServlet());

    /**
     * We'll be mocking requests and responses and so on throughout these
     * tests, so just initialize them here for later use.  Notice
     * that we use spy for the LoginServlet.  This specifically allows us to mock
     * out its loginUtils class, but otherwise, all LoginServlet calls
     * are to the real code.  Why mock LoginUtils? So that we can prevent
     * real calls into that class - it's assumed we have already tested
     * that class on its own, we just want to test code specific to this class.
     *
     * LoginServlet uses a static method, {@link ServletUtils#forwardToResult}
     * that has a call to {@link HttpServletRequest#getRequestDispatcher} that
     * we need to mock out.
     */
    @Before
    public void before() {
        request = mock(HttpServletRequest.class);
        response = mock(HttpServletResponse.class);
        requestDispatcher = mock(RequestDispatcher.class);
        loginServlet = spy(new LoginServlet());
        LoginServlet.loginUtils = Mockito.mock(LoginUtils.class);

        // this is always called in a static method, it's boilerplate for these tests.
        when(request.getRequestDispatcher(ServletUtils.RESULT_JSP)).thenReturn(requestDispatcher);
    }

    /**
     * The basic happy path - a username and password are entered
     */
    @Test
    public void testHappyPathPost() {
        // not the greatest password in the world, but we're not testing that
        // at this level - rather, just that the endpoint got a password at all
        setMock_UsernameAndPassword(DEFAULT_USERNAME, DEFAULT_PASSWORD);
        setMock_LoginUtilsUserRegistered(DEFAULT_USERNAME, DEFAULT_PASSWORD, true);

        loginServlet.doPost(request, response);

        verifyExpectedResult("access granted");
    }

    /**
     * If a particular username and password are not registered, login will fail.  access denied.
     */
    @Test
    public void testShouldGetAccessDeniedIfUserNotRegistered() {
        setMock_UsernameAndPassword(DEFAULT_USERNAME, DEFAULT_PASSWORD);
        setMock_LoginUtilsUserRegistered(DEFAULT_USERNAME, DEFAULT_PASSWORD, false);

        loginServlet.doPost(request, response);

        verifyExpectedResult("access denied");
    }

    /**
     * If they pass in an empty string for username, it should return a message
     * indicating that.
     */
    @Test
    public void testEmptyString_Username() {
        // Empty string for the username.
        setMock_UsernameAndPassword("", DEFAULT_PASSWORD);

        loginServlet.doPost(request, response);

        verifyExpectedResult("no username provided");
    }

    /**
     * If they pass in an empty string for password, it should return a message
     * indicating that.
     */
    @Test
    public void testEmptyString_Password() {
        // Empty string for the password.
        setMock_UsernameAndPassword(DEFAULT_USERNAME, "");

        loginServlet.doPost(request, response);

        verifyExpectedResult("no password provided");
    }

    /**
     * Mock out the username and password values on the request, the
     * user's input to this endpoint
     */
    private void setMock_UsernameAndPassword(String username, String password) {
        when(request.getParameter("username")).thenReturn(username);
        when(request.getParameter("password")).thenReturn(password);
    }


    /**
     * Mock out the call and response for LoginUtils, so we can
     * better control how our endpoint will behave in different situations
     * @param username check this if already registered
     * @param password check this if already registered
     * @param expectedReturn what we want the call to return for the purposes of our test
     */
    private void setMock_LoginUtilsUserRegistered(String username, String password, boolean expectedReturn) {
        when(LoginServlet.loginUtils.isUserRegistered(username, password)).thenReturn(expectedReturn);
    }


    /**
     * A wrapper around the mock just to better document intention
     * @param expectedResult what we expect as the bottom-line result,
     *                       which will end up sent to the user as a message
     */
    private void verifyExpectedResult(String expectedResult) {
        Mockito.verify(request).setAttribute("result", expectedResult);
    }
}



================================================
FILE: src/test/java/com/coveros/training/authentication/LoginUtilsTests.java
================================================
package com.coveros.training.authentication;

import com.coveros.training.persistence.IPersistenceLayer;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import static org.mockito.internal.verification.VerificationModeFactory.times;

public class LoginUtilsTests {

    private IPersistenceLayer mockPersistenceLayer = Mockito.mock(IPersistenceLayer.class);
    private LoginUtils loginUtils = Mockito.spy(new LoginUtils(mockPersistenceLayer));


    @Before
    public void init() {
        mockPersistenceLayer = Mockito.mock(IPersistenceLayer.class);
        loginUtils = Mockito.spy(new LoginUtils(mockPersistenceLayer));
    }

    @Test
    public void testCanCreateEmpty() {
        final LoginUtils loginUtils = LoginUtils.createEmpty();
        Assert.assertTrue(loginUtils.isEmpty());
    }

    @Test
    public void testCanSeeIfUserRegistered() {
        loginUtils.isUserRegistered("alice", "abc123");
        Mockito.verify(mockPersistenceLayer, times(1)).areCredentialsValid("alice", "abc123");
    }

}



================================================
FILE: src/test/java/com/coveros/training/authentication/RegisterServletTests.java
================================================
package com.coveros.training.authentication;

import com.coveros.training.authentication.domainobjects.RegistrationResult;
import com.coveros.training.authentication.domainobjects.RegistrationStatusEnums;
import com.coveros.training.helpers.ServletUtils;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import static org.mockito.Mockito.*;

public class RegisterServletTests {

    private static final String ALICE = "alice";
    private static final RegistrationResult EMPTY_USERNAME = new RegistrationResult(false, RegistrationStatusEnums.EMPTY_USERNAME);
    private static final RegistrationResult SUCCESSFUL_REGISTRATION = new RegistrationResult(true, RegistrationStatusEnums.SUCCESSFULLY_REGISTERED);
    private HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    private HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    private RequestDispatcher requestDispatcher = Mockito.mock(RequestDispatcher.class);
    private RegisterServlet registerServlet = spy(new RegisterServlet());

    @Before
    public void before() {
        request = mock(HttpServletRequest.class);
        response = mock(HttpServletResponse.class);
        requestDispatcher = mock(RequestDispatcher.class);
        registerServlet = spy(new RegisterServlet());
        RegisterServlet.registrationUtils = Mockito.mock(RegistrationUtils.class);
    }

    /**
     * Makes sure that the request dispatcher sends the user to the right place.
     * <p>
     * If the user enters no name when registering, they should be
     * sent to the error page "empty_username.html"
     */
    @Test
    public void doPostWithoutName() {
        // given a user entered an empty string for username
        mockRequestParam("username", "");
        mockRequestParam("password", "");
        mockRegisterUserToReturnSomeResponse(EMPTY_USERNAME);
        mockRequestDispatcherForExpectedRedirection(ServletUtils.RESULT_JSP);

        // do the post
        registerServlet.doPost(request, response);

        // verify that the correct redirect was chosen.
        verify(request).getRequestDispatcher(ServletUtils.RESULT_JSP);
    }

    /**
     * Makes sure that the request dispatcher sends the user to the right place.
     * <p>
     * If the user enters their name when registering, they should be
     * sent to the successful registration page.
     */
    @Test
    public void doPostWithName() {
        // given a user entered their username
        mockRequestParam("username", "Alice");
        mockRequestParam("password", "password123");
        mockRegisterUserToReturnSomeResponse(SUCCESSFUL_REGISTRATION);
        mockRequestDispatcherForExpectedRedirection(ServletUtils.RESULT_JSP);

        // do the post
        registerServlet.doPost(request, response);

        // verify that the correct redirect was chosen.
        verify(request).getRequestDispatcher(ServletUtils.RESULT_JSP);
    }

    /**
     * If they pass in an empty string, it should return a message
     * indicating that.
     */
    @Test
    public void testEmptyString_Username() {
        when(request.getRequestDispatcher(ServletUtils.RESULT_JSP)).thenReturn(requestDispatcher);
        String emptyString = "";
        when(request.getParameter("username")).thenReturn(emptyString);
        when(request.getParameter("password")).thenReturn("abc123");

        // do the post
        registerServlet.doPost(request, response);

        // verify that the missing book title was handled
        Mockito.verify(request).setAttribute("result", "no username provided");
    }

    /**
     * If they pass in an empty string, it should return a message
     * indicating that.
     */
    @Test
    public void testEmptyString_Password() {
        when(request.getRequestDispatcher(ServletUtils.RESULT_JSP)).thenReturn(requestDispatcher);
        String emptyString = "";
        when(request.getParameter("password")).thenReturn(emptyString);
        when(request.getParameter("username")).thenReturn(ALICE);

        // do the post
        registerServlet.doPost(request, response);

        // verify that the missing book title was handled
        Mockito.verify(request).setAttribute("result", "no password provided");
    }


    private void mockRegisterUserToReturnSomeResponse(RegistrationResult expectedResult) {
        when(RegisterServlet.registrationUtils.processRegistration(Mockito.anyString(), Mockito.anyString())).thenReturn(expectedResult);
    }

    private void mockRequestDispatcherForExpectedRedirection(String expectedPath) {
        when(request.getRequestDispatcher(expectedPath)).thenReturn(requestDispatcher);
    }

    private void mockRequestParam(String paramName, String name) {
        when(request.getParameter(paramName)).thenReturn(name);
    }


}



================================================
FILE: src/test/java/com/coveros/training/authentication/RegistrationUtilsTests.java
================================================
package com.coveros.training.authentication;

import com.coveros.training.authentication.domainobjects.*;
import com.coveros.training.persistence.IPersistenceLayer;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class RegistrationUtilsTests {

    private static final String GOOD_PASSWORD = "LpcVWwRkWSNVH";
    private static final String ALICE = "alice";
    private static final String BAD_PASSWORD = "abc123horsestaples";
    private final IPersistenceLayer persistenceLayer = mock(IPersistenceLayer.class);
    private final RegistrationUtils registrationUtils = new RegistrationUtils(persistenceLayer);

    /**
     * a really short password can be found by brute force extremely quickly,
     * making this highly insecure
     */
    @Test
    public void testShouldFailOnShortPassword() {
        final PasswordResult result = RegistrationUtils.isPasswordGood("abc");
        Assert.assertEquals(PasswordResultEnums.TOO_SHORT, result.status);
    }

    @Test
    public void testShouldFailOnEmptyPassword_EmptyString() {
        final PasswordResult result = RegistrationUtils.isPasswordGood("");
        Assert.assertEquals(PasswordResultEnums.EMPTY_PASSWORD, result.status);
    }

    /**
     * A lightweight performance test for a slow call
     */
    @Ignore
    @Test
    public void testShouldPerformWell() {
        long start = System.currentTimeMillis();
        final List<String> goodPasswords =
                Arrays.asList(
                        "XaZE}SkOC/@k#blv}U+wOlDfj=a]q",
                        "-MzlAim%Zuh.=B|8N|Vd~`l5?*Cs,ZH\\'l/76t-9]W\\D$Il#vynO+~y_@",
                        "lm=U(#C;@Bl*jvEy_*U1QlR@3sje");
        for (String password : goodPasswords) {
            RegistrationUtils.isPasswordGood(password);
        }
        long finish = System.currentTimeMillis();
        long timeElapsed = finish - start;

        Assert.assertTrue("All these calls should have finished in a short time.  " +
                "Time elapsed was " + timeElapsed, timeElapsed < 1500);
    }

    /**
     * If we provide a good password, then by golly we should get that
     * as a result from our {@link RegistrationUtils#isPasswordGood} method.
     */
    @Test
    public void testShouldHaveSufficientEntropyInPassword() {
        final PasswordResult result = RegistrationUtils.isPasswordGood(GOOD_PASSWORD);
        Assert.assertEquals(PasswordResultEnums.SUCCESS, result.status);
    }

    /**
     * Not really a lot to test here...
     */
    @Test
    public void testShouldDetermineIfUserInDatabase() {
        // mock that a user is found when we search for them
        when(persistenceLayer.searchForUserByName(ALICE)).thenReturn(Optional.of(new User(ALICE, 1)));

        final boolean result = registrationUtils.isUserInDatabase(ALICE);

        Assert.assertTrue(result);
    }

    /**
     * Testing registration without hitting the actual database.
     * The password has to be sufficient to meet the entropy stipulations.
     * We need to mock the calls that will have been sent to the database.
     */
    @Test
    public void testShouldProcessRegistration_HappyPath() {
        // this needs to not find a user
        when(persistenceLayer.searchForUserByName(ALICE)).thenReturn(Optional.empty());
        RegistrationResult expectedResult = new RegistrationResult(true, RegistrationStatusEnums.SUCCESSFULLY_REGISTERED);

        final RegistrationResult registrationResult =
                registrationUtils.processRegistration(ALICE, GOOD_PASSWORD);

        Assert.assertEquals(expectedResult, registrationResult);
    }

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /**
     * If we pass in an empty username, we should get a response that
     * registration failed.
     */
    @Test
    public void testShouldProcessRegistration_EmptyUsername() {
        thrown.expect(IllegalArgumentException.class);
        thrown.expectMessage("string must not be null or empty at this point");
        registrationUtils.processRegistration("", GOOD_PASSWORD);
    }

    /**
     * Registration should fail if the password isn't good enough.
     */
    @Test
    public void testShouldProcessRegistration_BadPassword() {
        // this needs to not find a user
        when(persistenceLayer.searchForUserByName(ALICE)).thenReturn(Optional.empty());
        final PasswordResult result = RegistrationUtils.isPasswordGood(BAD_PASSWORD);
        RegistrationResult expectedResult = new RegistrationResult(false, RegistrationStatusEnums.BAD_PASSWORD, result.toPrettyString());

        final RegistrationResult registrationResult =
                registrationUtils.processRegistration(ALICE, BAD_PASSWORD);

        Assert.assertEquals(expectedResult, registrationResult);
    }

    /**
     * Registration should fail if we're trying to register an already-existing user.
     */
    @Test
    public void testShouldProcessRegistration_ExistingUser() {
        // this needs to find an existing user - so they are already registered
        when(persistenceLayer.searchForUserByName(ALICE)).thenReturn(Optional.of(new User(ALICE, 1)));
        RegistrationResult expectedResult = new RegistrationResult(false, RegistrationStatusEnums.ALREADY_REGISTERED);

        final RegistrationResult registrationResult =
                registrationUtils.processRegistration(ALICE, GOOD_PASSWORD);

        Assert.assertEquals(expectedResult, registrationResult);
    }

    @Test
    public void testEmptyObject() {
        final RegistrationUtils registrationUtils = RegistrationUtils.createEmpty();
        Assert.assertTrue(registrationUtils.isEmpty());
    }

}



================================================
FILE: src/test/java/com/coveros/training/authentication/domainobjects/PasswordResultTests.java
================================================
package com.coveros.training.authentication.domainobjects;

import nl.jqno.equalsverifier.EqualsVerifier;
import org.junit.Assert;
import org.junit.Test;

public class PasswordResultTests {

    @Test
    public void testShouldHaveEqualsAndHashcodeImplementedCorrectly() {
        EqualsVerifier.forClass(PasswordResult.class).verify();
    }

    @Test
    public void testShouldOutputGoodString() {
        final PasswordResult passwordResult = createTestPasswordResult();
        final String result = passwordResult.toString();
        Assert.assertTrue("was " + passwordResult,
                result.contains("status=SUCCESS") &&
                result.contains("entropy=0.0") &&
                result.contains("timeToCrackOffline=") &&
                result.contains("timeToCrackOnline=") &&
                result.contains("message=BASIC_PASSWORD_CHECKS_FAILED"));
    }

    private static PasswordResult createTestPasswordResult() {
        return PasswordResult.createDefault(PasswordResultEnums.SUCCESS);
    }

    @Test
    public void testCanCreateEmpty() {
        final PasswordResult passwordResult = PasswordResult.createEmpty();
        Assert.assertTrue(passwordResult.isEmpty());
    }
}



================================================
FILE: src/test/java/com/coveros/training/authentication/domainobjects/RegistrationResultTests.java
================================================
package com.coveros.training.authentication.domainobjects;

import nl.jqno.equalsverifier.EqualsVerifier;
import org.junit.Assert;
import org.junit.Test;


public class RegistrationResultTests {

    @Test
    public void testShouldHaveEqualsAndHashcodeImplementedCorrectly() {
        EqualsVerifier.forClass(RegistrationResult.class).verify();
    }

    @Test
    public void testShouldOutputGoodString() {
        final RegistrationResult registrationResult = RegistrationResult.createEmpty();
        final String result = registrationResult.toString();
        Assert.assertTrue("was " + registrationResult,
                result.contains("wasSuccessfullyRegistered=false") &&
                        result.contains("status=EMPTY") &&
                        result.contains("message="));
    }

    @Test
    public void testCanCreateEmpty() {
        final RegistrationResult registrationResult = RegistrationResult.createEmpty();
        Assert.assertTrue(registrationResult.isEmpty());
    }

}



================================================
FILE: src/test/java/com/coveros/training/authentication/domainobjects/UserTests.java
================================================
package com.coveros.training.authentication.domainobjects;

import nl.jqno.equalsverifier.EqualsVerifier;
import org.junit.Assert;
import org.junit.Test;

public class UserTests {

    @Test
    public void testShouldHaveEqualsAndHashcodeImplementedCorrectly() {
        EqualsVerifier.forClass(User.class).verify();
    }

    @Test
    public void testShouldOutputGoodString() {
        final User user = createTestUser();
        final String s = user.toString();
        Assert.assertTrue("toString was: " + user.toString(),
                s.contains("name=alice") &&
                s.contains("id=1"));
    }

    @Test
    public void testCanCreateEmpty() {
        final User user = User.createEmpty();
        Assert.assertTrue(user.isEmpty());
    }

    private static User createTestUser() {
        return new User("alice", 1);
    }

}



================================================
FILE: src/test/java/com/coveros/training/helpers/CheckUtilsTests.java
================================================
package com.coveros.training.helpers;

import org.junit.Test;

public class CheckUtilsTests {

    @Test(expected = IllegalArgumentException.class)
    public void testShouldThrowErrorFor0() {
        CheckUtils.IntParameterMustBePositive(0);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testShouldThrowErrorForSubZero() {
        CheckUtils.IntParameterMustBePositive(-1);
    }

    @Test
    public void testShouldSucceedForPositiveValue() {
        CheckUtils.IntParameterMustBePositive(1);
    }

}



================================================
FILE: src/test/java/com/coveros/training/helpers/DateUtils.java
================================================
package com.coveros.training.helpers;

import java.util.Date;

public class DateUtils {

    /**
     * @return true if the current time from {@link Date#getTime} is even.
     */
    public static boolean isTimeEven() {
        final Date date = new Date();
        return date.getTime() % 2 == 0;
    }

}



================================================
FILE: src/test/java/com/coveros/training/helpers/DateUtilsTests.java
================================================
package com.coveros.training.helpers;

import com.coveros.training.helpers.DateUtils;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

import java.time.LocalDate;
import java.time.Month;
import java.time.temporal.ChronoUnit;

public class DateUtilsTests {

    /**
     * This contrived example is here to provide an opportunity to
     * improve a flaky test.  Our tests should always return the same
     * result, we want total control over our laboratory.
     */
    @Ignore("used for teaching purposes")
    @Test
    public void testShouldReturnEvenTime() {
        Assert.assertTrue(DateUtils.isTimeEven());
    }

    /**
     * In Virginia, the law states you must be at least 16 years and 3 months
     * old to get a drivers license.
     *
     * In this test we'll presume a straightforward happy path.  A person
     * is born Jan 1, 1990.  When do they get their driver's license?
     *
     * 1990 + 16 years = 2006
     * Jan + 3 months = April
     * So, April 1, 2006.
     * How many days is that from the day they were born?
     */
    @Ignore("used for teaching purposes")
    @Test
    public void testShouldBe16Years3Months_HappyPath() {
        // arrange
        // assume a person is born Jan 1, 1990
        final LocalDate birthDate = LocalDate.of(1990, Month.JANUARY, 1);
        // expected that they can get it on April 1, 2006
        final LocalDate expectedLicenseDate = LocalDate.of(2006, Month.APRIL, 1);

        // act
        // add 16 years and 3 months
        final LocalDate licenseDate = calculateFirstPossibleLicenseDate(birthDate);

        // assert
        Assert.assertEquals(expectedLicenseDate, licenseDate);
        long noOfDaysBetween = ChronoUnit.DAYS.between(licenseDate, birthDate);

        // there were 5934 days from the day they were born to the day they can
        // get their license.  It seems fair that that number is the same for
        // everyone, right?  Why should being born on a different day of the
        // year make a difference in how long you have to wait to get your license?
        Assert.assertTrue(Math.abs(noOfDaysBetween) == 5934);

        // let's run an experiment.  We'll start with someone born in Jan 1, 1990,
        // and use the same method to calculate their first possible day to get
        // a driver's license.  We will then loop through every day for 100 years
        // to make sure the answer is always the same.

        for (LocalDate scanningBirthDate = birthDate;
             scanningBirthDate.isBefore(birthDate.plusYears(100));
             scanningBirthDate = scanningBirthDate.plusDays(1)) {
            LocalDate scanningLicenseDate = calculateFirstPossibleLicenseDate(scanningBirthDate);
            // assert
            long daysBetween = ChronoUnit.DAYS.between(scanningLicenseDate, scanningBirthDate);
            String errorMessage = "days between was " + Math.abs(daysBetween) + " for a birthdate of " + scanningBirthDate
                    + " and a license date of " + scanningLicenseDate;
            Assert.assertTrue(errorMessage, Math.abs(daysBetween) == 5934);
        }
    }

    /**
     * Determine the first date which this person is able to obtain a driver's
     * license, per Virginia's law that they be 16 years and 3 months.
     *<p>
     * calculates using this method: <p><code>birthDate.plusYears(16).plusMonths(3);</code></p>
     * </p>
     */
    private LocalDate calculateFirstPossibleLicenseDate(LocalDate birthDate) {
        return birthDate.plusYears(16).plusMonths(3);
    }

}



================================================
FILE: src/test/java/com/coveros/training/helpers/StringUtilsTests.java
================================================
package com.coveros.training.helpers;

import org.junit.Test;

import static com.coveros.training.helpers.StringUtils.*;
import static org.junit.Assert.assertEquals;

public class StringUtilsTests {

    @Test
    public void testShouldConvertNullToEmptyString() {
        final String s = StringUtils.makeNotNullable(null);
        assertEquals("", s);
    }

    @Test
    public void testShouldNotAlterNonNullString() {
        final String s = StringUtils.makeNotNullable("abc");
        assertEquals("abc", s);
    }

    /**
     * JSON won't parse if it has a double quote in a string
     */
    @Test
    public void testEscapeForJson_ShouldEscapeDoubleQuote() {
        final String expectedResult = new String(new byte[]{BACKSLASH, DOUBLE_QUOTE});
        final String inputString = new String(new byte[]{DOUBLE_QUOTE});
        String result = StringUtils.escapeForJson(inputString);
        assertEquals(expectedResult, result);
    }

    /**
     * Testing another potential problem with a JSON string
     */
    @Test
    public void testEscapeForJson_ShouldEscapeBackslash() {
        final String expectedResult = new String(new byte[]{BACKSLASH, BACKSLASH});
        final String inputString = new String(new byte[]{BACKSLASH});
        String result = StringUtils.escapeForJson(inputString);
        assertEquals(expectedResult, result);
    }

}



================================================
FILE: src/test/java/com/coveros/training/library/LendingTests.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.Book;
import com.coveros.training.library.domainobjects.Borrower;
import com.coveros.training.library.domainobjects.LibraryActionResults;
import com.coveros.training.library.domainobjects.Loan;
import org.junit.Assert;
import org.junit.Test;
import org.mockito.Mockito;

import java.sql.Date;
import java.time.LocalDate;
import java.time.Month;

import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doReturn;

public class LendingTests {


    private final static Date BORROW_DATE = Date.valueOf(LocalDate.of(2018, Month.JANUARY, 1));
    private final static String BORROWER_A_NAME = "borrower_a";
    private final static String BORROWER_B_NAME = "borrower_b";
    private final static String TITLE = "Some book";
    private final static Book SAMPLE_BOOK = new Book(1, TITLE);
    private final static Borrower SAMPLE_BORROWER_A = new Borrower(1, BORROWER_A_NAME);
    private final static Borrower SAMPLE_BORROWER_B = new Borrower(1, BORROWER_B_NAME);
    private final LibraryUtils libraryUtils = Mockito.spy(LibraryUtils.class);

    /**
     * If a borrower and a book are registered, a user should be able to borrow it.
     */
    @Test
    public void shouldLendToUser() {
        mockSearchForLoan();
        mockThatLoanIsCreated(SAMPLE_BOOK, SAMPLE_BORROWER_A, BORROW_DATE);
        final LibraryActionResults libraryActionResults = libraryUtils.lendBook(SAMPLE_BOOK, SAMPLE_BORROWER_A, BORROW_DATE);
        Assert.assertEquals(LibraryActionResults.SUCCESS, libraryActionResults);
    }

    private void mockThatLoanIsCreated(Book book, Borrower borrower, Date borrowDate) {
        Mockito.doNothing().when(libraryUtils).createLoan(book, borrower, borrowDate);
    }

    private void mockSearchForLoan() {
        Mockito.doReturn(Loan.createEmpty()).when(libraryUtils).searchForLoanByBook(SAMPLE_BOOK);
    }

    /**
     * Just make sure that we get the expected response if we register a borrower
     */
    @Test
    public void shouldRegisterBorrower() {
        mockBorrowerNotRegistered(BORROWER_A_NAME);
        mockThatNewBorrowerGetsSaved(BORROWER_A_NAME);
        final LibraryActionResults result = libraryUtils.registerBorrower(BORROWER_A_NAME);
        Assert.assertEquals(LibraryActionResults.SUCCESS, result);
    }

    private void mockThatNewBorrowerGetsSaved(String borrowerAName) {
        doNothing().when(libraryUtils).saveNewBorrower(borrowerAName);
    }

    private void mockBorrowerNotRegistered(String borrower) {
        doReturn(Borrower.createEmpty()).when(libraryUtils).searchForBorrowerByName(borrower);
    }

    /**
     * Just make sure that we get the expected response if we register a book
     */
    @Test
    public void shouldRegisterBook() {
        mockThatBookNotRegistered(TITLE);
        mockThatNewBookGetsSaved(TITLE);
        final LibraryActionResults result = libraryUtils.registerBook(TITLE);
        Assert.assertEquals(LibraryActionResults.SUCCESS, result);
    }

    private void mockThatNewBookGetsSaved(String title) {
        doNothing().when(libraryUtils).saveNewBook(title);
    }

    private void mockThatBookNotRegistered(String title) {
        doReturn(Book.createEmpty()).when(libraryUtils).searchForBookByTitle(title);
    }

    /**
     * We shouldn't be able to lend if we try to lend
     * to a borrower who isn't registered
     */
    @Test
    public void testShouldNotLendIfBorrowerNotRegistered() {
        final LibraryActionResults result = libraryUtils.lendBook(SAMPLE_BOOK, Borrower.createEmpty(), BORROW_DATE);
        Assert.assertEquals(LibraryActionResults.BORROWER_NOT_REGISTERED, result);
    }

    /**
     * We shouldn't be able to lend if we try to lend
     * out a book that isn't registered
     */
    @Test
    public void testShouldNotLendIfBookNotRegistered() {
        final LibraryActionResults result = libraryUtils.lendBook(Book.createEmpty(), SAMPLE_BORROWER_A, BORROW_DATE);
        Assert.assertEquals(LibraryActionResults.BOOK_NOT_REGISTERED, result);
    }

    /**
     * b wants to check out a book, but a has it.  Can they borrow it? (no)
     */
    @Test
    public void shouldNotLendIfCurrentlyBorrowed() {
        mockSearchForLoan();
        Mockito.when(libraryUtils.searchForLoanByBook(SAMPLE_BOOK)).thenReturn(new Loan(SAMPLE_BOOK, SAMPLE_BORROWER_B, 1, BORROW_DATE));
        final LibraryActionResults libraryActionResults_bob = libraryUtils.lendBook(SAMPLE_BOOK, SAMPLE_BORROWER_B, BORROW_DATE);
        Assert.assertEquals(LibraryActionResults.BOOK_CHECKED_OUT, libraryActionResults_bob);
    }

}



================================================
FILE: src/test/java/com/coveros/training/library/LibraryBookListAvailableServletTests.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.Book;
import com.coveros.training.helpers.ServletUtils;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.util.Arrays;

import static com.coveros.training.library.LibraryBookListAvailableServlet.RESULT;
import static org.mockito.Mockito.*;

public class LibraryBookListAvailableServletTests {

    public static final String A_BOOK = "a book";
    public static final Book DEFAULT_BOOK = new Book(1, A_BOOK);
    private HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    private HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    private LibraryBookListAvailableServlet libraryBookListAvailableServlet = spy(new LibraryBookListAvailableServlet());
    private final RequestDispatcher requestDispatcher = Mockito.mock(RequestDispatcher.class);
    private final LibraryUtils libraryUtils = Mockito.mock(LibraryUtils.class);


    @Before
    public void before() {
        request = mock(HttpServletRequest.class);
        response = mock(HttpServletResponse.class);
        libraryBookListAvailableServlet = spy(new LibraryBookListAvailableServlet());
        LibraryBookListAvailableServlet.libraryUtils = this.libraryUtils;
    }

    /**
     * If we don't pass a title or an id, we'll get a list of all books
     */
    @Test
    public void testListAvailableBooks_OneBook() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(libraryUtils.listAvailableBooks()).thenReturn(Arrays.asList(DEFAULT_BOOK));

        // act
        libraryBookListAvailableServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "[{\"Title\": \"a book\", \"Id\": \"1\"}]");
    }

    /**
     * If we don't pass a title or an id, we'll get a list of all books
     */
    @Test
    public void testListAvailableBooks_MultipleBook() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(libraryUtils.listAvailableBooks()).thenReturn(Arrays.asList(DEFAULT_BOOK, DEFAULT_BOOK, DEFAULT_BOOK));

        // act
        libraryBookListAvailableServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "[{\"Title\": \"a book\", \"Id\": \"1\"},{\"Title\": \"a book\", \"Id\": \"1\"},{\"Title\": \"a book\", \"Id\": \"1\"}]");
    }


    /**
     * If we don't pass a title or an id, we'll get a list of all books
     * This tests what happens if there's no books in the database
     */
    @Test
    public void testListAvailableBooks_EmptyList() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);

        // act
        libraryBookListAvailableServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "No books exist in the database");
    }

    /**
     * If there aren't any books
     */
    @Test
    public void testSearchNoBooks() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("id")).thenReturn("");
        when(request.getParameter("title")).thenReturn("");

        // act
        libraryBookListAvailableServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "No books exist in the database");
    }


}



================================================
FILE: src/test/java/com/coveros/training/library/LibraryBookListSearchServletTests.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.Book;
import com.coveros.training.helpers.ServletUtils;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.util.Arrays;

import static com.coveros.training.library.LibraryBookListSearchServlet.RESULT;
import static org.mockito.Mockito.*;

public class LibraryBookListSearchServletTests {

    public static final String A_BOOK = "a book";
    public static final Book DEFAULT_BOOK = new Book(1, A_BOOK);
    private HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    private HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    private LibraryBookListSearchServlet libraryBookListSearchServlet = spy(new LibraryBookListSearchServlet());
    private final RequestDispatcher requestDispatcher = Mockito.mock(RequestDispatcher.class);
    private final LibraryUtils libraryUtils = Mockito.mock(LibraryUtils.class);


    @Before
    public void before() {
        request = mock(HttpServletRequest.class);
        response = mock(HttpServletResponse.class);
        libraryBookListSearchServlet = spy(new LibraryBookListSearchServlet());
        LibraryBookListSearchServlet.libraryUtils = this.libraryUtils;
    }

    /**
     * If we don't pass a title or an id, we'll get a list of all books
     */
    @Test
    public void testListAllBooks() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(libraryUtils.listAllBooks()).thenReturn(Arrays.asList(DEFAULT_BOOK));
        // act
        libraryBookListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "[{\"Title\": \"a book\", \"Id\": \"1\"}]");
    }

    /**
     * If we don't pass a title or an id, we'll get a list of all books
     * this tests when the database is empty of books
     */
    @Test
    public void testListAllBooks_NoBooksInDatabase() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);

        // act
        libraryBookListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "No books exist in the database");
    }

    /**
     * If we pass an id, we'll get a particular book
     * testing for when there's no books found by that id
     */
    @Test
    public void testSearchById_noBookFound() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("id")).thenReturn("1");
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBookById(1)).thenReturn(Book.createEmpty());

        // act
        libraryBookListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "No books found with an id of 1");
    }

    /**
     * If we pass an id, we'll get a particular book
     */
    @Test
    public void testSearchById() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("id")).thenReturn("1");
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBookById(1)).thenReturn(DEFAULT_BOOK);

        // act
        libraryBookListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "[{\"Title\": \"a book\", \"Id\": \"1\"}]");
    }

    /**
     * If we pass a title, we'll get a particular book
     */
    @Test
    public void testSearchByTitle() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("title")).thenReturn(A_BOOK);
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBookByTitle(A_BOOK)).thenReturn(DEFAULT_BOOK);

        // act
        libraryBookListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(libraryUtils).searchForBookByTitle(A_BOOK);
        verify(request).setAttribute(RESULT, "[{\"Title\": \"a book\", \"Id\": \"1\"}]");
    }

    /**
     * If there aren't any books
     */
    @Test
    public void testSearchNoBooks() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("id")).thenReturn("");
        when(request.getParameter("title")).thenReturn("");

        // act
        libraryBookListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "No books exist in the database");
    }

    /**
     * If nothing found by id
     */
    @Test
    public void testSearchNothingFoundById() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("id")).thenReturn("1");
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBookById(1)).thenReturn(Book.createEmpty());

        // act
        libraryBookListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "No books found with an id of 1");
    }

    /**
     * If no books found by title
     */
    @Test
    public void testSearchNothingFoundByTitle() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("title")).thenReturn(A_BOOK);
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBookByTitle(A_BOOK)).thenReturn(Book.createEmpty());

        // act
        libraryBookListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(libraryUtils).searchForBookByTitle(A_BOOK);
        verify(request).setAttribute(RESULT, "No books found with a title of " + A_BOOK);
    }

    /**
     * If we provide an ID and a title
     */
    @Test
    public void testSearchIdAndTitle() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("title")).thenReturn(A_BOOK);
        when(request.getParameter("id")).thenReturn("1");

        // act
        libraryBookListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "Error: please search by either title or id, not both");
    }

}



================================================
FILE: src/test/java/com/coveros/training/library/LibraryBorrowerListSearchServletTests.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.Borrower;
import com.coveros.training.helpers.ServletUtils;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.util.Arrays;

import static com.coveros.training.library.LibraryBorrowerListSearchServlet.RESULT;
import static org.mockito.Mockito.*;

public class LibraryBorrowerListSearchServletTests {

    private static final String A_BORROWER = "abe borrower";
    private static final Borrower DEFAULT_BORROWER = new Borrower(1, A_BORROWER);
    private HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    private HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    private LibraryBorrowerListSearchServlet libraryBorrowerListSearchServlet = spy(new LibraryBorrowerListSearchServlet());
    private final RequestDispatcher requestDispatcher = Mockito.mock(RequestDispatcher.class);
    private final LibraryUtils libraryUtils = Mockito.mock(LibraryUtils.class);


    @Before
    public void before() {
        request = mock(HttpServletRequest.class);
        response = mock(HttpServletResponse.class);
        libraryBorrowerListSearchServlet = spy(new LibraryBorrowerListSearchServlet());
        LibraryBorrowerListSearchServlet.libraryUtils = this.libraryUtils;
    }

    /**
     * If we don't pass a name or an id, we'll get a list of all borrowers
     * But what do we get if there aren't any?
     */
    @Test
    public void testListAllBorrowers_noBorrowersExist() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);

        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "No borrowers exist in the database");
    }


    /**
     * If we don't pass a name or an id, we'll get a list of all borrowers
     */
    @Test
    public void testListAllBorrowers() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(libraryUtils.listAllBorrowers()).thenReturn(Arrays.asList(DEFAULT_BORROWER));
        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "[{\"Name\": \"abe borrower\", \"Id\": \"1\"}]");
    }

    /**
     * If we pass an id, we'll get a particular borrower
     */
    @Test
    public void testSearchById() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("id")).thenReturn("1");
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBorrowerById(1)).thenReturn(Borrower.createEmpty());

        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(libraryUtils).searchForBorrowerById(1);
    }

    /**
     * If we pass a name, and the borrower isn't found
     */
    @Test
    public void testSearchByNameNotFound() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("name")).thenReturn(A_BORROWER);
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBorrowerByName(A_BORROWER)).thenReturn(Borrower.createEmpty());

        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(libraryUtils).searchForBorrowerByName(A_BORROWER);
    }

    /**
     * If we pass a name, we'll get a particular borrower
     */
    @Test
    public void testSearchByName() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("name")).thenReturn(A_BORROWER);
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBorrowerByName(A_BORROWER)).thenReturn(DEFAULT_BORROWER);

        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "[{\"Name\": \"abe borrower\", \"Id\": \"1\"}]");
    }


    /**
     * If there aren't any borrowers
     */
    @Test
    public void testSearchNoBorrowers() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("id")).thenReturn("");
        when(request.getParameter("name")).thenReturn("");

        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "No borrowers exist in the database");
    }

    /**
     * If nothing found by id
     */
    @Test
    public void testSearchNothingFoundById() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("id")).thenReturn("1");
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBorrowerById(1)).thenReturn(Borrower.createEmpty());

        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "No borrowers found with an id of 1");
    }


    /**
     * If borrower found by id
     */
    @Test
    public void testSearchBorrowerFoundById() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("id")).thenReturn("1");
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBorrowerById(1)).thenReturn(DEFAULT_BORROWER);

        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "[{\"Name\": \"abe borrower\", \"Id\": \"1\"}]");
    }


    /**
     * If the id isn't a number
     */
    @Test
    public void testSearchByBadId() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        // a is not a valid id
        when(request.getParameter("id")).thenReturn("a");
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBorrowerById(1)).thenReturn(DEFAULT_BORROWER);

        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "Error: could not parse the borrower id as an integer");
    }

    /**
     * If no borrowers found by name
     */
    @Test
    public void testSearchNothingFoundByName() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("name")).thenReturn(A_BORROWER);
        // the following is just to avoid a null pointer exception when the test succeeds
        when(libraryUtils.searchForBorrowerByName(A_BORROWER)).thenReturn(Borrower.createEmpty());

        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(libraryUtils).searchForBorrowerByName(A_BORROWER);
        verify(request).setAttribute(RESULT, "No borrowers found with a name of " + A_BORROWER);
    }

    /**
     * If we provide an ID and a name
     */
    @Test
    public void testSearchIdAndName() {
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("name")).thenReturn(A_BORROWER);
        when(request.getParameter("id")).thenReturn("1");

        // act
        libraryBorrowerListSearchServlet.doGet(request, response);

        // verify that the correct redirect was chosen.
        verify(request).setAttribute(RESULT, "Error: please search by either name or id, not both");
    }

}



================================================
FILE: src/test/java/com/coveros/training/library/LibraryLendServletTests.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.LibraryActionResults;
import org.junit.Assert;
import org.junit.Test;
import org.mockito.Mockito;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.sql.Date;
import java.time.LocalDate;
import java.time.Month;

import static org.mockito.Mockito.*;

public class LibraryLendServletTests {

    private final static Date BORROW_DATE = Date.valueOf(LocalDate.of(2018, Month.JANUARY, 1));
    private static final String BOOK_TITLE = "The DevOps Handbook";
    private static final String ALICE = "alice";
    private final LibraryLendServlet libraryLendServlet = Mockito.spy(new LibraryLendServlet());
    private final LibraryUtils libraryUtils = Mockito.mock(LibraryUtils.class);
    private final HttpServletRequest request = Mockito.mock(HttpServletRequest.class, RETURNS_DEEP_STUBS);
    private final HttpServletResponse response = Mockito.mock(HttpServletResponse.class);

    @Test
    public void testHappyPathPost() {
        when(request.getParameter("book")).thenReturn(BOOK_TITLE);
        when(request.getParameter("borrower")).thenReturn(ALICE);
        doReturn(BORROW_DATE).when(libraryLendServlet).getDateNow();
        LibraryLendServlet.libraryUtils = libraryUtils;
        when(libraryUtils.lendBook(BOOK_TITLE, ALICE, BORROW_DATE)).thenReturn(LibraryActionResults.SUCCESS);

        libraryLendServlet.doPost(request, response);

        verify(request).setAttribute("result", "SUCCESS");
    }

    @Test
    public void testDateFunction() {
        final Date dateNow = libraryLendServlet.getDateNow();
        Assert.assertNotEquals(dateNow, Date.valueOf(LocalDate.MIN));
        Assert.assertNotEquals(dateNow, Date.valueOf(LocalDate.MAX));
    }

    /**
     * If they pass in an empty string for either field, it should return a message
     * indicating that.
     */
    @Test
    public void testEmptyString_Book() {
        String emptyString = "";
        when(request.getParameter("book")).thenReturn(emptyString);
        when(request.getParameter("borrower")).thenReturn(ALICE);

        // do the post
        libraryLendServlet.doPost(request, response);

        // verify that the missing book title was handled
        Mockito.verify(request).setAttribute("result", "NO_BOOK_TITLE_PROVIDED");
    }

    /**
     * If they pass in an empty string for either field, it should return a message
     * indicating that.
     */
    @Test
    public void testEmptyString_Borrower() {
        String emptyString = "";
        when(request.getParameter("borrower")).thenReturn(emptyString);
        when(request.getParameter("book")).thenReturn(BOOK_TITLE);

        // do the post
        libraryLendServlet.doPost(request, response);

        // verify that the missing borrower was handled
        Mockito.verify(request).setAttribute("result", "NO_BORROWER_PROVIDED");
    }

}



================================================
FILE: src/test/java/com/coveros/training/library/LibraryRegisterBookServletTests.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.LibraryActionResults;
import com.coveros.training.helpers.ServletUtils;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import static org.mockito.Mockito.*;

public class LibraryRegisterBookServletTests {

    private HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    private HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    private LibraryRegisterBookServlet libraryRegisterBookServlet = spy(new LibraryRegisterBookServlet());
    private final RequestDispatcher requestDispatcher = Mockito.mock(RequestDispatcher.class);


    @Before
    public void before() {
        request = mock(HttpServletRequest.class);
        response = mock(HttpServletResponse.class);
        libraryRegisterBookServlet = spy(new LibraryRegisterBookServlet());
        LibraryRegisterBookServlet.libraryUtils = Mockito.mock(LibraryUtils.class);
    }

    @Test
    public void testHappyPathPost() {
        when(request.getRequestDispatcher(ServletUtils.RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("book")).thenReturn("The DevOps Handbook");
        when(LibraryRegisterBookServlet.libraryUtils.registerBook(Mockito.anyString()))
                .thenReturn(LibraryActionResults.SUCCESS);

        // do the post
        libraryRegisterBookServlet.doPost(request, response);

        // verify that the correct redirect was chosen.
        verify(request).getRequestDispatcher(ServletUtils.RESULT_JSP);
    }

    /**
     * If they pass in an empty string, it should return a message
     * indicating that.
     */
    @Test
    public void testEmptyString() {
        when(request.getRequestDispatcher(ServletUtils.RESULT_JSP)).thenReturn(requestDispatcher);
        String emptyString = "";
        when(request.getParameter("book")).thenReturn(emptyString);

        // do the post
        libraryRegisterBookServlet.doPost(request, response);

        // verify that the missing book title was handled
        Mockito.verify(request).setAttribute("result", "NO_BOOK_TITLE_PROVIDED");
    }
}



================================================
FILE: src/test/java/com/coveros/training/library/LibraryRegisterBorrowerServletTests.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.LibraryActionResults;
import com.coveros.training.helpers.ServletUtils;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import static org.mockito.Mockito.*;

public class LibraryRegisterBorrowerServletTests {

    private HttpServletRequest request = Mockito.mock(HttpServletRequest.class);
    private HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    private LibraryRegisterBorrowerServlet libraryRegisterBorrowerServlet = spy(new LibraryRegisterBorrowerServlet());
    private final RequestDispatcher requestDispatcher = Mockito.mock(RequestDispatcher.class);

    @Before
    public void before() {
        request = mock(HttpServletRequest.class);
        response = mock(HttpServletResponse.class);
        libraryRegisterBorrowerServlet = spy(new LibraryRegisterBorrowerServlet());
        LibraryRegisterBorrowerServlet.libraryUtils = Mockito.mock(LibraryUtils.class);
    }

    @Test
    public void testHappyPathPost() {
        when(request.getRequestDispatcher(ServletUtils.RESULT_JSP)).thenReturn(requestDispatcher);
        when(request.getParameter("borrower")).thenReturn("Alice");
        when(LibraryRegisterBorrowerServlet.libraryUtils.registerBorrower(Mockito.anyString()))
                .thenReturn(LibraryActionResults.SUCCESS);

        // do the post
        libraryRegisterBorrowerServlet.doPost(request, response);

        // verify that the correct redirect was chosen.
        verify(request).getRequestDispatcher(ServletUtils.RESULT_JSP);
    }


    /**
     * If they pass in an empty string, it should return a message
     * indicating that.
     */
    @Test
    public void testEmptyString() {
        when(request.getRequestDispatcher(ServletUtils.RESULT_JSP)).thenReturn(requestDispatcher);
        String emptyString = "";
        when(request.getParameter("borrower")).thenReturn(emptyString);

        // do the post
        libraryRegisterBorrowerServlet.doPost(request, response);

        // verify that the missing borrower name was handled
        Mockito.verify(request).setAttribute("result", "NO_BORROWER_PROVIDED");
    }
}



================================================
FILE: src/test/java/com/coveros/training/library/LibraryUtilsTests.java
================================================
package com.coveros.training.library;

import com.coveros.training.library.domainobjects.*;
import com.coveros.training.persistence.IPersistenceLayer;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.mockito.Mockito;

import java.sql.Date;
import java.time.LocalDate;
import java.time.Month;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.mockito.internal.verification.VerificationModeFactory.times;

public class LibraryUtilsTests {

    private IPersistenceLayer mockPersistenceLayer = Mockito.mock(IPersistenceLayer.class);
    private LibraryUtils libraryUtils = Mockito.spy(new LibraryUtils(mockPersistenceLayer));

    private final Book DEFAULT_BOOK = BookTests.createTestBook();
    private final Borrower DEFAULT_BORROWER = BorrowerTests.createTestBorrower();
    private final static Date BORROW_DATE = Date.valueOf(LocalDate.of(2018, Month.JANUARY, 1));


    @Before
    public void init() {
        mockPersistenceLayer = Mockito.mock(IPersistenceLayer.class);
        libraryUtils = Mockito.spy(new LibraryUtils(mockPersistenceLayer));
    }

    @Test
    public void testCanCreateEmpty() {
        final LibraryUtils libraryUtils = LibraryUtils.createEmpty();
        Assert.assertTrue(libraryUtils.isEmpty());
    }

    @Test
    public void testCanLendBook() {
        Mockito.doReturn(Loan.createEmpty()).when(libraryUtils).searchForLoanByBook(DEFAULT_BOOK);

        final LibraryActionResults libraryActionResults =
                libraryUtils.lendBook(DEFAULT_BOOK, DEFAULT_BORROWER, BORROW_DATE);

        Assert.assertEquals(LibraryActionResults.SUCCESS, libraryActionResults);
    }

    /**
     * Same as {@link #testCanLendBook()} but we're hitting its wrapper.
     */
    @Test
    public void testCanLendBook_wrapperMethod() {
        Mockito.doReturn(Loan.createEmpty()).when(libraryUtils).searchForLoanByBook(DEFAULT_BOOK);
        Mockito.doReturn(DEFAULT_BOOK).when(libraryUtils).searchForBookByTitle(DEFAULT_BOOK.title);
        Mockito.doReturn(DEFAULT_BORROWER).when(libraryUtils).searchForBorrowerByName(DEFAULT_BORROWER.name);

        final LibraryActionResults libraryActionResults =
                libraryUtils.lendBook(DEFAULT_BOOK.title, DEFAULT_BORROWER.name, BORROW_DATE);

        Assert.assertEquals(LibraryActionResults.SUCCESS, libraryActionResults);
    }

    @Test
    public void testCanRegisterBorrower() {
        Mockito.doReturn(Borrower.createEmpty()).when(libraryUtils).searchForBorrowerByName(DEFAULT_BORROWER.name);

        final LibraryActionResults libraryActionResults
                = libraryUtils.registerBorrower(DEFAULT_BORROWER.name);

        Assert.assertEquals(LibraryActionResults.SUCCESS, libraryActionResults);
    }

    @Test
    public void testCanRegisterBook() {
        Mockito.doReturn(Book.createEmpty()).when(libraryUtils).searchForBookByTitle(DEFAULT_BOOK.title);

        final LibraryActionResults libraryActionResults = libraryUtils.registerBook(DEFAULT_BOOK.title);

        Assert.assertEquals(LibraryActionResults.SUCCESS, libraryActionResults);
    }

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /**
     * Makes no sense to allow registering a book with an empty string.
     * Throw an exception, since it's probably a dev error in that case - it
     * should never have been allowed to occur, by the developer.
     */
    @Test
    public void testCannotRegisterBookWithEmptyString() {
        thrown.expect(IllegalArgumentException.class);
        thrown.expectMessage("bookTitle was an empty string - disallowed when registering books");

        libraryUtils.registerBook("");
    }

    @Test
    public void testCanSearchForLoanByBook() {
        libraryUtils.searchForLoanByBook(DEFAULT_BOOK);
        Mockito.verify(mockPersistenceLayer, times(1)).searchForLoanByBook(DEFAULT_BOOK);
    }

    @Test
    public void testCanSearchForLoanByBorrower() {
        libraryUtils.searchForLoanByBorrower(DEFAULT_BORROWER);
        Mockito.verify(mockPersistenceLayer, times(1)).searchForLoanByBorrower(DEFAULT_BORROWER);
    }

    @Test
    public void testCanSearchForBorrowerByName() {
        libraryUtils.searchForBorrowerByName(DEFAULT_BORROWER.name);
        Mockito.verify(mockPersistenceLayer, times(1)).searchBorrowerDataByName(DEFAULT_BORROWER.name);
    }

    @Test
    public void testCanSearchForBooksByTitle() {
        Mockito.when(mockPersistenceLayer.searchBooksByTitle(DEFAULT_BOOK.title)).thenReturn(Optional.of(DEFAULT_BOOK));
        libraryUtils.searchForBookByTitle(DEFAULT_BOOK.title);
        Mockito.verify(mockPersistenceLayer, times(1)).searchBooksByTitle(DEFAULT_BOOK.title);
    }

    /**
     * We don't allow to search by empty string.
     */
    @Test
    public void testShouldThrowExceptionWhenSearchingWithEmptyStringAsBookTitle() {
        thrown.expect(IllegalArgumentException.class);
        thrown.expectMessage("when searching for a book, must include a non-empty string for title");

        libraryUtils.searchForBookByTitle("");
    }

    @Test
    public void testCanSearchForBooksById() {
        Mockito.when(mockPersistenceLayer.searchBooksById(DEFAULT_BOOK.id)).thenReturn(Optional.of(DEFAULT_BOOK));
        libraryUtils.searchForBookById(DEFAULT_BOOK.id);
        Mockito.verify(mockPersistenceLayer, times(1)).searchBooksById(DEFAULT_BOOK.id);
    }

    /**
     * The id of the book must be 1 or greater.  0 isn't allowed, nor anything else below 1.
     */
    @Test
    public void testShouldThrowExceptionWhenSearchingWithLessThanOneAsBookId() {
        thrown.expect(IllegalArgumentException.class);
        thrown.expectMessage("when searching for a book, must include an id of one or greater");

        libraryUtils.searchForBookById(0);
    }

    /**
     * Basic happy path - delete a book that is registered.
     */
    @Test
    public void testCanDeleteBook() {
        Mockito.when(mockPersistenceLayer.searchBooksByTitle(DEFAULT_BOOK.title)).thenReturn(Optional.of(DEFAULT_BOOK));

        final LibraryActionResults result = libraryUtils.deleteBook(DEFAULT_BOOK);

        Mockito.verify(mockPersistenceLayer, times(1)).deleteBook(DEFAULT_BOOK.id);
        Assert.assertEquals(LibraryActionResults.SUCCESS, result);
    }

    /**
     * If a book isn't registered, then obviously we cannot delete it.
     */
    @Test
    public void testCannotDeleteNonRegisteredBook() {
        Mockito.when(mockPersistenceLayer.searchBooksByTitle(DEFAULT_BOOK.title)).thenReturn(Optional.empty());

        final LibraryActionResults result = libraryUtils.deleteBook(DEFAULT_BOOK);

        Mockito.verify(mockPersistenceLayer, times(0)).deleteBook(DEFAULT_BOOK.id);
        Assert.assertEquals(LibraryActionResults.NON_REGISTERED_BOOK_CANNOT_BE_DELETED, result);
    }

    /**
     * Basic happy path - delete a borrower who is registered.
     */
    @Test
    public void testCanDeleteBorrower() {
        Mockito.when(mockPersistenceLayer.searchBorrowerDataByName(DEFAULT_BORROWER.name)).thenReturn(Optional.of(DEFAULT_BORROWER));

        final LibraryActionResults result = libraryUtils.deleteBorrower(DEFAULT_BORROWER);

        Mockito.verify(mockPersistenceLayer, times(1)).deleteBorrower(DEFAULT_BORROWER.id);
        Assert.assertEquals(LibraryActionResults.SUCCESS, result);
    }

    /**
     * If a borrower isn't registered, then obviously we cannot delete them.
     */
    @Test
    public void testCannotDeleteNonRegisteredBorrower() {
        Mockito.when(mockPersistenceLayer.searchBorrowerDataByName(DEFAULT_BORROWER.name)).thenReturn(Optional.empty());

        final LibraryActionResults result = libraryUtils.deleteBorrower(DEFAULT_BORROWER);

        Mockito.verify(mockPersistenceLayer, times(0)).deleteBorrower(DEFAULT_BORROWER.id);
        Assert.assertEquals(LibraryActionResults.NON_REGISTERED_BORROWER_CANNOT_BE_DELETED, result);
    }

    /**
     * A test to cover the action of listing all the books in the database.
     * Perhaps unusual, given how large libraries get, but we're going MVP style - minimum
     * viable product.  At early stages we may develop features that later on become obsolete.
     */
    @Test
    public void testShouldBeAbleToListAllBooks() {
        final List<Book> books = generateListOfBooks(new String[]{"foo", "bar"});
        Mockito.when(mockPersistenceLayer.listAllBooks()).thenReturn(Optional.of(books));

        List<Book> bookList = libraryUtils.listAllBooks();

        Assert.assertEquals(books, bookList);
    }

    /**
     * A test to cover the action of listing all the borrowers in the database.
     * Perhaps unusual, given how large libraries get, but we're going MVP style - minimum
     * viable product.  At early stages we may develop features that later on become obsolete.
     */
    @Test
    public void testShouldBeAbleToListAllBorrowers() {
        final List<Borrower> borrowers = generateListOfBorrowers(new String[]{"foo", "bar"});
        Mockito.when(mockPersistenceLayer.listAllBorrowers()).thenReturn(Optional.of(borrowers));
        List<Borrower> borrowerList = libraryUtils.listAllBorrowers();
        Assert.assertEquals(borrowers, borrowerList);
    }

    @Test
    public void testShouldListAvailableBooks() {
        libraryUtils.listAvailableBooks();
        Mockito.verify(mockPersistenceLayer).listAvailableBooks();
    }

    /**
     * A helper function to generate a list of books, given a list of titles.
     */
    public static List<Book> generateListOfBooks(String[] bookTitles) {
        ArrayList<Book> bookList = new ArrayList<>();
        int id = 1;
        for(String s : bookTitles) {
            bookList.add(new Book(id, s));
            id++;
        }
        return bookList;
    }


    /**
     * A helper function to generate a list of borrowers, given a list of names.
     */
    public static List<Borrower> generateListOfBorrowers(String[] names) {
        ArrayList<Borrower> borrowerList = new ArrayList<>();
        int id = 1;
        for(String s : names) {
            borrowerList.add(new Borrower(id, s));
            id++;
        }
        return borrowerList;
    }


}



================================================
FILE: src/test/java/com/coveros/training/library/domainobjects/BookTests.java
================================================
package com.coveros.training.library.domainobjects;

import nl.jqno.equalsverifier.EqualsVerifier;
import org.junit.Assert;
import org.junit.Test;

public class BookTests {

    @Test
    public void testShouldHaveEqualsAndHashcodeImplementedCorrectly() {
        EqualsVerifier.forClass(Book.class).verify();
    }

    @Test
    public void testShouldOutputGoodString() {
        final Book book = createTestBook();
        final String b = book.toString();
        Assert.assertTrue("toString was: " + book.toString(),
                b.contains("title=The DevOps Handbook") &&
                b.contains("id=1"));
    }

    public static Book createTestBook() {
        return new Book(1, "The DevOps Handbook");
    }

    @Test
    public void testCanCreateEmpty() {
        final Book book = Book.createEmpty();
        Assert.assertTrue(book.isEmpty());
    }

}



================================================
FILE: src/test/java/com/coveros/training/library/domainobjects/BorrowerTests.java
================================================
package com.coveros.training.library.domainobjects;

import nl.jqno.equalsverifier.EqualsVerifier;
import org.junit.Assert;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class BorrowerTests {

    @Test
    public void testShouldHaveEqualsAndHashcodeImplementedCorrectly() {
        EqualsVerifier.forClass(Borrower.class).verify();
    }

    @Test
    public void testShouldOutputGoodString() {
        final Borrower borrower = createTestBorrower();
        Assert.assertTrue(borrower.toString().contains("id=1,name=alice"));
    }

    public static Borrower createTestBorrower() {
        return new Borrower(1, "alice");
    }

    @Test
    public void testCanCreateEmpty() {
        final Borrower borrower = Borrower.createEmpty();
        Assert.assertTrue(borrower.isEmpty());
    }

    /**
     * toOutputString returns a JSON version of this object.
     */
    @Test
    public void testShouldReturnJsonString() {
        final Borrower borrower = createTestBorrower();
        final String expectedResult = "{\"Name\": \"alice\", \"Id\": \"1\"}";
        assertEquals(expectedResult, borrower.toOutputString());
    }

}



================================================
FILE: src/test/java/com/coveros/training/library/domainobjects/LoanTests.java
================================================
package com.coveros.training.library.domainobjects;

import nl.jqno.equalsverifier.EqualsVerifier;
import org.junit.Assert;
import org.junit.Test;

import java.sql.Date;
import java.time.LocalDate;
import java.time.Month;

public class LoanTests {

    @Test
    public void testShouldHaveEqualsAndHashcodeImplementedCorrectly() {
        EqualsVerifier.forClass(Loan.class).verify();
    }

    @Test
    public void testShouldOutputGoodString() {
        final Loan loan = createTestLoan();
        Assert.assertTrue("toString was: " + loan.toString(), loan.toString().contains("title=The DevOps Handbook"));
    }

    public static Loan createTestLoan() {
        Date borrowDate = Date.valueOf(LocalDate.of(2018, Month.JANUARY, 1));
        return new Loan(BookTests.createTestBook(), BorrowerTests.createTestBorrower(), 1, borrowDate);
    }

    @Test
    public void testCanCreateEmpty() {
        final Loan loan = Loan.createEmpty();
        Assert.assertTrue(loan.isEmpty());
    }
}



================================================
FILE: src/test/java/com/coveros/training/mathematics/AckermannIterativeParameterizedTests.java
================================================
package com.coveros.training.mathematics;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collection;

@RunWith(Parameterized.class)
public class AckermannIterativeParameterizedTests {

    @Parameters
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][] {
             //      m                 n                  expected
                {    0,                0,                    "1"     },

                {    1,                1,                    "3"     },
                {    1,                2,                    "4"     },
                {    1,                3,                    "5"     },

                {    2,                1,                    "5"     },
                {    2,                2,                    "7"     },
                {    2,                3,                    "9"     },
                {    2,                4,                    "11"    },

                {    3,                1,                    "13"    },
                {    3,                2,                    "29"    },
                {    3,                3,                    "61"    },
             //  {    4,                0,                    "13"    }, // the tail-recursive algorithm calculates this incorrectly... why?
                {    4,                1,                    "65533" },
                {},   //This one overflows!
        });
    }

    private final long m;
    private final long n;
    private final BigInteger expected;

    public AckermannIterativeParameterizedTests(long m, long n, String expected) {
        this.m = m;
        this.n = n;
        this.expected = new BigInteger(expected);
    }

    @Test
    public void testCalculateIterative() {
        final BigInteger result = AckermannIterative.calculate((int)m, (int)n);
        Assert.assertEquals(String.format("for m of %d and n of %d we should have gotten %d", m, n, expected), expected, result);
    }



}



================================================
FILE: src/test/java/com/coveros/training/mathematics/AckermannParameterizedTests.java
================================================
package com.coveros.training.mathematics;

import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collection;

@RunWith(Parameterized.class)
public class AckermannParameterizedTests {

    @Parameters
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][] {
             //      m                 n                  expected
                {    0,                0,                    "1"     },

                {    1,                1,                    "3"     },
                {    1,                2,                    "4"     },
                {    1,                3,                    "5"     },

                {    2,                1,                    "5"     },
                {    2,                2,                    "7"     },
                {    2,                3,                    "9"     },
                {    2,                4,                    "11"    },

                {    3,                1,                    "13"    },
                {    3,                2,                    "29"    },
                {    3,                3,                    "61"    },

                {    4,                0,                    "13"    },
        });
    }

    private final long m;
    private final long n;
    private final BigInteger expected;

    public AckermannParameterizedTests(long m, long n, String expected) {
        this.m = m;
        this.n = n;
        this.expected = new BigInteger(expected);
    }

    @Test
    public void testShouldProperlyCalculate() {
        final BigInteger result = Ackermann.calculate((int)m, (int)n);
        Assert.assertEquals(String.format("for m of %d and n of %d we should have gotten %d", m, n, expected), expected, result);
    }

}



================================================
FILE: src/test/java/com/coveros/training/mathematics/AckServletTests.java
================================================
package com.coveros.training.mathematics;

import com.coveros.training.helpers.ServletUtils;
import org.junit.Test;
import org.mockito.Mockito;
import org.slf4j.Logger;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

import static org.mockito.Mockito.*;

public class AckServletTests {

    private final AckServlet ackServlet = Mockito.spy(new AckServlet());
    private final HttpServletRequest request = Mockito.mock(HttpServletRequest.class, RETURNS_DEEP_STUBS);
    private final HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    private final Logger logger = Mockito.mock(Logger.class);

    /**
     * Testing a happy path, mocking the request, response, and forward.
     */
    @Test
    public void testPostService_HappyPath() {
        when(request.getParameter("ack_param_m")).thenReturn("2");
        when(request.getParameter("ack_param_n")).thenReturn("3");
        when(request.getParameter("ack_algorithm_choice")).thenReturn("regular_recursive");
        doNothing().when(ackServlet).forwardToResult(Mockito.any(), Mockito.any(), Mockito.any());

        ackServlet.doPost(request, response);

        verify(ackServlet).regularRecursive(request, 2, 3);
    }

    /**
     * Testing the tail recursive algorithm
     */
    @Test
    public void testPostService_TailRecursive() {
        when(request.getParameter("ack_param_m")).thenReturn("2");
        when(request.getParameter("ack_param_n")).thenReturn("3");
        when(request.getParameter("ack_algorithm_choice")).thenReturn("tail_recursive");
        doNothing().when(ackServlet).forwardToResult(Mockito.any(), Mockito.any(), Mockito.any());

        ackServlet.doPost(request, response);

        verify(ackServlet).tailRecursive(request, 2, 3);
    }

    /**
     * Here we allow a call into the actual forwardToResult method.
     */
    @Test
    public void testPostService_Forward() {
        AckServlet.logger = logger;

        ackServlet.doPost(request, response);

        verify(request).getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP);
        verify(AckServlet.logger, times(0)).error(Mockito.anyString());
    }

    /**
     * Here we allow a call into the actual forwardToResult method,
     * and we force an exception
     */
    @Test
    public void testPostService_realForward_withException() throws ServletException, IOException {
        AckServlet.logger = logger;
        final RequestDispatcher requestDispatcher = mock(RequestDispatcher.class);
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        doThrow(new RuntimeException("hi there, exception here."))
                .when(requestDispatcher).forward(request, response);

        ackServlet.doPost(request, response);

        verify(request).getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP);
        verify(AckServlet.logger).error(Mockito.anyString());
    }

}



================================================
FILE: src/test/java/com/coveros/training/mathematics/CalculatorTests.java
================================================
package com.coveros.training.mathematics;

import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.mockito.Mockito;

import static org.mockito.Mockito.when;

public class CalculatorTests {

    // ----------------------------------------------------------
    //
    //          Unit tests not requiring mocks
    //
    // ----------------------------------------------------------

    @Ignore("this test is for teaching")
    @Test
    public void testShouldAddTwoIntegers() {
    }

    @Ignore("this test is for teaching")
    @Test
    public void testShouldAddTwoDecimals() {
    }

    @Ignore("this test is for teaching")
    @Test
    public void testShouldGetStringVersionOfResult() {
    }

    @Ignore("this test is for teaching")
    @Test
    public void testShouldGetPairResult() {
    }

    // ----------------------------------------------------------
    //
    //          Unit tests requiring mocks
    //
    // ----------------------------------------------------------

    /**
     * Tests calculateAndMore
     */
    @Ignore("this test is for teaching")
    @Test
    public void testShouldMockOutsideMethods() {
    }

    /**
     * Tests calculateAndMorePart2
     */
    @Ignore("this test is for teaching")
    @Test
    public void testShouldMockOutsideMethodsPart2() {
    }
}



================================================
FILE: src/test/java/com/coveros/training/mathematics/FibonacciParameterizedTests.java
================================================
package com.coveros.training.mathematics;

import static org.junit.Assert.assertEquals;

import java.util.Arrays;
import java.util.Collection;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

@RunWith(Parameterized.class)
public class FibonacciParameterizedTests {
    @Parameters
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][] {
                { 0, 0 }, { 1, 1 }, { 2, 1 }, { 3, 2 },
                { 4, 3 }, { 5, 5 }, { 6, 8 }, {20, 6765}
        });
    }

    private final int fInput;

    private final int fExpected;

    public FibonacciParameterizedTests(int input, int expected) {
        this.fInput = input;
        this.fExpected = expected;
    }

    /**
     * Testing a very standard recursive version
     */
    @Test
    public void test() {
        assertEquals(String.format("for the %dth number, we expected %d", fInput, fExpected), fExpected, Fibonacci.calculate(fInput));
    }

    /**
     * Testing an iterative version found on Rosetta Code, see {@link FibonacciIterative}
     */
    @Test
    public void testIterative1() {
        assertEquals(String.format("for the %dth number, we expected %d", fInput, fExpected), fExpected, FibonacciIterative.fibAlgo1(fInput).intValue());
    }

    /**
     * Testing a second iterative version found on Rosetta Code, see {@link FibonacciIterative}
     */
    @Test
    public void testIterative2() {
        assertEquals(String.format("for the %dth number, we expected %d", fInput, fExpected), fExpected, FibonacciIterative.fibAlgo2(fInput).intValue());
    }
}


================================================
FILE: src/test/java/com/coveros/training/mathematics/FibonacciTests.java
================================================
package com.coveros.training.mathematics;

import org.junit.Assert;
import org.junit.Test;

import java.math.BigInteger;

public class FibonacciTests {

    private static final String FIB_FOR_43 = "433494437";
    private static final String FIB_FOR_200 = "280571172992510140037611932413038677189525";
    private static final String FIB_FOR_2000 = "4224696333392304878706725602341482782579852840250681098010280137314308584370130707224123599639141511088446087538909603607640194711643596029271983312598737326253555802606991585915229492453904998722256795316982874482472992263901833716778060607011615497886719879858311468870876264597369086722884023654422295243347964480139515349562972087652656069529806499841977448720155612802665404554171717881930324025204312082516817125";

    @Test
    public void testSmallValuesFibAlgo1() {
        final BigInteger fib = FibonacciIterative.fibAlgo1(43);
        Assert.assertEquals(new BigInteger(FIB_FOR_43), fib);
    }

    @Test
    public void testSmallValuesFibAlgo2() {
        final BigInteger fib = FibonacciIterative.fibAlgo2(43);
        Assert.assertEquals(new BigInteger(FIB_FOR_43), fib);
    }

    @Test
    public void testLargeValuesFibAlgo1() {
        final BigInteger fib = FibonacciIterative.fibAlgo1(200);
        Assert.assertEquals(new BigInteger(FIB_FOR_200), fib);
    }

    @Test
    public void testLargeValuesFibAlgo2() {
        final BigInteger fib = FibonacciIterative.fibAlgo2(200);
        Assert.assertEquals(new BigInteger(FIB_FOR_200), fib);
    }

    @Test
    public void testLargerValuesFibAlgo1() {
        final BigInteger fib = FibonacciIterative.fibAlgo1(2000);
        Assert.assertEquals(new BigInteger(FIB_FOR_2000), fib);
    }

    @Test
    public void testLargerValuesFibAlgo2() {
        final BigInteger fib = FibonacciIterative.fibAlgo2(2000);
        Assert.assertEquals(new BigInteger(FIB_FOR_2000), fib);
    }
}



================================================
FILE: src/test/java/com/coveros/training/mathematics/FibServletTests.java
================================================
package com.coveros.training.mathematics;

import com.coveros.training.helpers.ServletUtils;
import org.junit.Test;
import org.mockito.Mockito;
import org.slf4j.Logger;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

import static org.mockito.Mockito.*;

public class FibServletTests {

    private final FibServlet fibServlet = Mockito.spy(new FibServlet());
    private final HttpServletRequest request = Mockito.mock(HttpServletRequest.class, RETURNS_DEEP_STUBS);
    private final HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    private final Logger logger = Mockito.mock(Logger.class);

    /**
     * Testing a happy path, mocking the request, response, and forward.
     */
    @Test
    public void testPostService_HappyPath() {
        when(request.getParameter("fib_param_n")).thenReturn("2");
        when(request.getParameter("fib_algorithm_choice")).thenReturn("regular_recursive");
        doNothing().when(fibServlet).forwardToResult(Mockito.any(), Mockito.any(), Mockito.any());

        fibServlet.doPost(request, response);

        verify(fibServlet).defaultRecursiveCalculation(request, 2);
    }

    /**
     * Testing algorithm "tail_recursive 1"
     */
    @Test
    public void testPostService_tailRecursive1() {
        when(request.getParameter("fib_param_n")).thenReturn("2");
        when(request.getParameter("fib_algorithm_choice")).thenReturn("tail_recursive_1");
        doNothing().when(fibServlet).forwardToResult(Mockito.any(), Mockito.any(), Mockito.any());

        fibServlet.doPost(request, response);

        verify(fibServlet).tailRecursiveAlgo1Calc(request, 2);
    }

    /**
     * Testing algorithm "tail_recursive 2"
     */
    @Test
    public void testPostService_tailRecursive2() {
        when(request.getParameter("fib_param_n")).thenReturn("2");
        when(request.getParameter("fib_algorithm_choice")).thenReturn("tail_recursive_2");
        doNothing().when(fibServlet).forwardToResult(Mockito.any(), Mockito.any(), Mockito.any());

        fibServlet.doPost(request, response);

        verify(fibServlet).tailRecursiveAlgo2Calc(request, 2);
    }

    /**
     * Here we allow a call into the actual forwardToResult method.
     */
    @Test
    public void testPostService_Forward() {
        FibServlet.logger = logger;

        fibServlet.doPost(request, response);

        verify(request).getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP);
        verify(FibServlet.logger, times(0)).error(Mockito.anyString());
    }

    /**
     * Here we allow a call into the actual forwardToResult method,
     * and we force an exception
     */
    @Test
    public void testPostService_realForward_withException() throws ServletException, IOException {
        FibServlet.logger = logger;
        final RequestDispatcher requestDispatcher = mock(RequestDispatcher.class);
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        doThrow(new RuntimeException("hi there, exception here."))
                .when(requestDispatcher).forward(request, response);

        fibServlet.doPost(request, response);

        verify(request).getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP);
        verify(FibServlet.logger).error(Mockito.anyString());
    }

}



================================================
FILE: src/test/java/com/coveros/training/mathematics/MathServletTests.java
================================================
package com.coveros.training.mathematics;

import com.coveros.training.helpers.ServletUtils;
import org.junit.Test;
import org.mockito.Mockito;
import org.slf4j.Logger;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

import static org.mockito.Mockito.*;

public class MathServletTests {

    private final MathServlet mathServlet = Mockito.spy(new MathServlet());
    private final HttpServletRequest request = Mockito.mock(HttpServletRequest.class, RETURNS_DEEP_STUBS);
    private final HttpServletResponse response = Mockito.mock(HttpServletResponse.class);
    private final Logger logger = Mockito.mock(Logger.class);

    /**
     * Testing a happy path, mocking the request, response, and forward.
     */
    @Test
    public void testPostService_HappyPath() {
        when(request.getParameter("item_a")).thenReturn("2");
        when(request.getParameter("item_b")).thenReturn("3");
        doNothing().when(mathServlet).forwardToResult(Mockito.any(), Mockito.any(), Mockito.any());

        mathServlet.doPost(request, response);

        verify(mathServlet).setResultToSum(request, 2, 3);
    }

    /**
     * Here we allow a call into the actual forwardToResult method.
     */
    @Test
    public void testPostService_Forward() {
        MathServlet.logger = logger;

        mathServlet.doPost(request, response);

        verify(request).getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP);
        verify(MathServlet.logger, times(0)).error(Mockito.anyString());
    }

    /**
     * Here we allow a call into the actual forwardToResult method,
     * and we force an exception
     */
    @Test
    public void testPostService_realForward_withException() throws ServletException, IOException {
        MathServlet.logger = logger;
        final RequestDispatcher requestDispatcher = mock(RequestDispatcher.class);
        when(request.getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP)).thenReturn(requestDispatcher);
        doThrow(new RuntimeException("hi there, exception here."))
                .when(requestDispatcher).forward(request, response);

        mathServlet.doPost(request, response);

        verify(request).getRequestDispatcher(ServletUtils.RESTFUL_RESULT_JSP);
        verify(MathServlet.logger).error(Mockito.anyString());
    }

}



================================================
FILE: src/test/java/com/coveros/training/persistence/DbServletTests.java
================================================
package com.coveros.training.persistence;

import org.junit.Test;
import org.mockito.Mockito;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import static org.mockito.Mockito.*;

public class DbServletTests {

    private final IPersistenceLayer pl = Mockito.mock(IPersistenceLayer.class);
    private final DbServlet dbServlet = Mockito.spy(new DbServlet(pl));
    private final HttpServletRequest request = Mockito.mock(HttpServletRequest.class, RETURNS_DEEP_STUBS);
    private final HttpServletResponse response = Mockito.mock(HttpServletResponse.class);

    @Test
    public void testClean() {
        when(request.getParameter("action")).thenReturn("clean");

        dbServlet.doGet(request, response);

        verify(pl).cleanDatabase();
    }

    @Test
    public void testMigrate() {
        when(request.getParameter("action")).thenReturn("migrate");

        dbServlet.doGet(request, response);

        verify(pl).migrateDatabase();
    }

    @Test
    public void testCleanAndMigrate() {
        // the default action is to clean and migrate, so if I send nothing, I'll get that result.
        when(request.getParameter("action")).thenReturn("");

        dbServlet.doGet(request, response);

        verify(pl).cleanAndMigrateDatabase();
    }
}



================================================
FILE: src/test/java/com/coveros/training/persistence/EmptyDataSourceTests.java
================================================
package com.coveros.training.persistence;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.PrintWriter;

/**
 * See {@link EmptyDataSource} for more detail.
 * <p>
 * Just confirm that all methods throw a NotImplementedException
 */
public class EmptyDataSourceTests {

    private EmptyDataSource emptyDataSource = new EmptyDataSource();

    @Before
    public void init() {
        emptyDataSource = new EmptyDataSource();
    }

    @Test(expected = NotImplementedException.class)
    public void testGetConnection() {
        emptyDataSource.getConnection();
    }

    @Test(expected = NotImplementedException.class)
    public void testGetConnectionWithParams() {
        emptyDataSource.getConnection("", "");
    }

    @Test(expected = NotImplementedException.class)
    public void testUnwrap() {
        emptyDataSource.unwrap(emptyDataSource.getClass());
    }

    @Test(expected = NotImplementedException.class)
    public void testIsWrapperFor() {
        emptyDataSource.isWrapperFor(emptyDataSource.getClass());
    }

    @Test(expected = NotImplementedException.class)
    public void testGetLogWriter() {
        emptyDataSource.getLogWriter();
    }

    @Test(expected = NotImplementedException.class)
    public void testSetLogWriter() {
        emptyDataSource.setLogWriter(Mockito.mock(PrintWriter.class));
    }

    @Test(expected = NotImplementedException.class)
    public void testSetLoginTimeout() {
        emptyDataSource.setLoginTimeout(0);
    }

    @Test(expected = NotImplementedException.class)
    public void testGetLoginTimeout() {
        emptyDataSource.getLoginTimeout();
    }

    @Test(expected = NotImplementedException.class)
    public void testGetParentLogger() {
        emptyDataSource.getParentLogger();
    }

}



================================================
FILE: src/test/java/com/coveros/training/persistence/ParameterObjectTests.java
================================================
package com.coveros.training.persistence;

import nl.jqno.equalsverifier.EqualsVerifier;
import org.junit.Assert;
import org.junit.Test;

public class ParameterObjectTests {

    @Test
    public void testShouldHaveEqualsAndHashcodeImplementedCorrectly() {
        EqualsVerifier.forClass(ParameterObject.class).verify();
    }

    @Test
    public void testShouldOutputGoodString() {
        final ParameterObject<String> parameterObject = createTestParameterObject();
        Assert.assertTrue("toString was: " + parameterObject.toString(), parameterObject.toString().contains("data=abc123,type=class java.lang.String"));
    }

    private static ParameterObject<String> createTestParameterObject() {
        return new ParameterObject<>("abc123", String.class);
    }

    @Test
    public void testCanCreateEmpty() {
        final ParameterObject<Void> parameterObject = ParameterObject.createEmpty();
        Assert.assertTrue(parameterObject.isEmpty());
    }
}




================================================
FILE: src/test/java/com/coveros/training/persistence/SqlDataTests.java
================================================
package com.coveros.training.persistence;

import com.coveros.training.authentication.domainobjects.User;
import nl.jqno.equalsverifier.EqualsVerifier;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.Month;

import static org.mockito.Mockito.doThrow;

public class SqlDataTests {

    private static final Date BORROW_DATE = Date.valueOf(LocalDate.of(2018, Month.JANUARY, 1));
    private PreparedStatement preparedStatement = Mockito.mock(PreparedStatement.class);

    @Before
    public void init() {
        preparedStatement = Mockito.mock(PreparedStatement.class);
    }

    @Test
    public void testShouldHaveEqualsAndHashcodeImplementedCorrectly() {
        EqualsVerifier.forClass(SqlData.class).verify();
    }

    @Test
    public void testShouldOutputGoodString() {
        final SqlData<String> sqlData = createTestSqlData();
        Assert.assertTrue("toString was: " + sqlData.toString(), sqlData.toString().contains("description=this is the description,params=,prepared statement=this is the prepared statement = ?;"));
    }

    @Test
    public void testCanCreateEmpty() {
        final SqlData<String> sqlData = SqlData.createEmpty();
        Assert.assertTrue(sqlData.isEmpty());
    }

    private <T> SqlData<T> createTestSqlData() {
        return new SqlData<>("this is the description", "this is the prepared statement = ?;");
    }

    @Test
    public void testCanApplyParamsToPreparedStatement_Long() throws SQLException {
        applyParam(1L, Long.class);
        Mockito.verify(preparedStatement, Mockito.times(1)).setLong(1, 1);
    }

    @Test
    public void testCanApplyParamsToPreparedStatement_String() throws SQLException {
        applyParam("1", String.class);
        Mockito.verify(preparedStatement, Mockito.times(1)).setString(1, "1");
    }

    @Test
    public void testCanApplyParamsToPreparedStatement_Integer() throws SQLException {
        applyParam(1, Integer.class);
        Mockito.verify(preparedStatement, Mockito.times(1)).setInt(1, 1);
    }

    @Test
    public void testCanApplyParamsToPreparedStatement_Date() throws SQLException {
        applyParam(BORROW_DATE, Date.class);
        Mockito.verify(preparedStatement, Mockito.times(1)).setDate(1, BORROW_DATE);
    }

    /**
     * If for some reason the prepared statement throws a SQLException, we
     * will catch it and throw it as a SqlRuntimeException
     */
    @Test(expected = SqlRuntimeException.class)
    public void testCanApplyParamsToPreparedStatement_NegativeCase() throws SQLException {
        doThrow(new SQLException()).when(preparedStatement).setString(1, "");
        applyParam("", String.class);
    }

    private <T> void applyParam(Object o, Class<T> clazz) {
        final SqlData<User> sqlData = new SqlData<>("just a test", "SELECT * FROM user WHERE id = ?");
        sqlData.addParameter(o, clazz);

        sqlData.applyParametersToPreparedStatement(preparedStatement);
    }

}



================================================
FILE: src/test/java/com/coveros/training/tomcat/WebAppListenerTests.java
================================================
package com.coveros.training.tomcat;

import com.coveros.training.persistence.IPersistenceLayer;
import org.junit.Test;
import org.mockito.Mockito;

import javax.servlet.ServletContextEvent;

public class WebAppListenerTests {

    private final IPersistenceLayer pl = Mockito.mock(IPersistenceLayer.class);
    private final WebAppListener webAppListener = Mockito.spy(new WebAppListener(pl));
    private final ServletContextEvent servletContextEvent = Mockito.mock(ServletContextEvent.class);

    /**
     * Directly calling the code that Tomcat will run when the
     * application starts.  It should clean and migrate the database.
     */
    @Test
    public void testContextInitialized() {
        webAppListener.contextInitialized(servletContextEvent);

        Mockito.verify(pl).cleanAndMigrateDatabase();
    }

    @Test
    public void testContextDestroyed() {
        webAppListener.contextDestroyed(servletContextEvent);
        Mockito.verifyNoInteractions(pl);
    }
}



================================================
FILE: src/ui_tests/README.txt
================================================
Contents of the ui directory
----------------------------

behave       :  files for the Python-based Behave BDD framework - see https://github.com/behave/behave
python       :  Python Selenium tests
js           :  JavaScript Selenium tests
c_sharp      :  C# Selenium tests
java         :  Java Selenium tests


================================================
FILE: src/ui_tests/behave/README.txt
================================================
These are BDD tests written in Behave, a Python BDD framework.

These tests drive the design of the UI.


================================================
FILE: src/ui_tests/behave/setup.cfg
================================================
# =============================================================
# BEHAVE CONFIGURATION
# =============================================================
# FILE: .behaverc, behave.ini
#
# SEE ALSO:
#  * http://pythonhosted.org/behave/behave.html#configuration-files
#  * https://github.com/behave/behave
#  * http://pypi.python.org/pypi/behave/
# =============================================================
# format   = rerun
# outfiles = rerun.featureset

[behave]
show_skipped   = false
show_timings   = true
default_format = progress
stdout_capture = no
logging_level  = INFO
junit=true
junit_directory=../../../build/test-results/bdd_ui





================================================
FILE: src/ui_tests/behave/features/authentication_ui.feature
================================================
Feature: A user may authenticate to the system through the UI

    As a user of the system
    I want to be able to authenticate myself
    So that I can use its features securely

    # This user story relates to behavior from a UI-centric point of view.
    # Note that we want as few UI tests as possible.  Logic should be tested lower down, this
    # is just to test the UI

    Scenario: Registering a new user
        Given I am not registered
        When I register with a valid username and password
        Then it indicates I am successfully registered

    Scenario: Login with valid user
        Given I am registered as a user
        When I login
        Then the system allows secure access




================================================
FILE: src/ui_tests/behave/features/environment.py
================================================
import requests
from selenium import webdriver
from selenium.webdriver.common.proxy import Proxy, ProxyType

SERVER = "localhost"
URL = "http://%s:8080" % SERVER


def before_all(context):
    __open_browser(context)


def __open_browser(context):
    chrm = context.config.userdata['chromedriver_path']
    
    try:
        # if there is a proxy, we'll use it.  Otherwise, we won't.
        requests.get("http://localhost:8888", timeout=0.01)

        # if there was no exception, we continue here.
        PROXY = "localhost:8888"

        proxy = Proxy()
        proxy.proxy_type = ProxyType.MANUAL
        proxy.http_proxy = PROXY

        capabilities = webdriver.DesiredCapabilities.CHROME
        proxy.add_to_capabilities(capabilities)
        
        if (chrm):
            context.driver = webdriver.Chrome(desired_capabilities=capabilities, executable_path=chrm)
        else:
            context.driver = webdriver.Chrome(desired_capabilities=capabilities)
        return context.driver
    except:
        if (chrm):
            context.driver = webdriver.Chrome(executable_path=chrm)
        else:
            # adding the service args as described below will cause Chromedriver
            # to create a log of the communication between it and the Chrome
            # browser.  It's eye-opening. 
            #
            # for instance:
	        #   [1568045962.076][INFO]: [e18882b1f2abbda89f232f777f98f686] COMMAND TypeElement {
	        #      "id": "0.47079920350295135-1",
	        #      "sessionId": "e18882b1f2abbda89f232f777f98f686",
	        #      "text": "Byron",
	        #      "value": [ "B", "y", "r", "o", "n" ]
	        #   }
            #context.driver = webdriver.Chrome(service_args=["--verbose","--logepath=C:\\temp\\qc1.log"])
            context.driver = webdriver.Chrome()
        return context.driver


def before_scenario(context, scenario):
    __reset_database()


def after_all(context):
    __close_browser(context)


def __close_browser(context):
    context.driver.close()


def __reset_database():
    requests.get("%s/demo/flyway" % URL)



================================================
FILE: src/ui_tests/behave/features/librarian_ui.feature
================================================
Feature: A librarian has a user interface to lend a book

    As a librarian,
    I want a UI for lending a book
    so that it is easy to provide books to borrowers

    # This user story relates to behavior from a UI-centric point of view.
    # Note that we want as few UI tests as possible.  Logic should be tested lower down, this
    # is just to test the UI

    Scenario: A registered patron checks out a book
        Given a borrower is registered
        And a book is available for borrowing
        When they try to check out the book
        Then the system indicates success




================================================
FILE: src/ui_tests/behave/features/steps/ackermannStepDefs.py
================================================
from behave import given, when, then
from hamcrest import *

@when('I calculate ackermann\'s function with an m of {param_m_val:d} and an n of {param_n_val:d}')
def step_impl(context, param_m_val, param_n_val):
    __calculate_ackermann(context, param_m_val, param_n_val)
    pass


def __calculate_ackermann(context, param_m_val, param_n_val):
    driver = context.driver
    driver.get("http://localhost:8080/demo")
    param_m = driver.find_element_by_id("ack_param_m")
    param_m.clear()
    param_m.send_keys(param_m_val)
    param_n = driver.find_element_by_id("ack_param_n")
    param_n.clear()
    param_n.send_keys(param_n_val)
    submit_button = driver.find_element_by_id("calculate_ackermann")
    submit_button.click()


@then('Ackermann\'s function indicates that the result is {result_val}')
def step_impl(context, result_val):
    result = context.driver.find_element_by_id('result')
    assert_that(result.text, contains_string(result_val))




================================================
FILE: src/ui_tests/behave/features/steps/authenticationStepDefs.py
================================================
from behave import given, when, then
from hamcrest import *

empty_database = ''
one_user_registered = 'alice password123'
URL = 'http://localhost:8080/demo/library.html'
DEFAULT_USERNAME = 'alice'
DEFAULT_PASSWORD = 'asdfkljhasdfishdfksaljdfh'


@given('I am not registered')
def step_impl(context):
    pass


@when('I register with a valid username and password')
def step_impl(context):
    __register_user(context, DEFAULT_USERNAME, DEFAULT_PASSWORD)
    pass


@then('it indicates I am successfully registered')
def step_impl(context):
    result = context.driver.find_element_by_id('result')
    assert_that(result.text, contains_string('successfully registered: true'))


@given('I am registered as a user')
def step_impl(context):
    context.username = DEFAULT_USERNAME
    context.password = DEFAULT_PASSWORD
    __register_user(context, context.username, context.password)
    pass


@when('I login')
def step_impl(context):
    __login_user(context, context.username, context.password)
    pass


@then('the system allows secure access')
def step_impl(context):
    result = context.driver.find_element_by_id('result')
    assert_that(result.text, contains_string('access granted'))


def __register_user(context, username_text, password_text):
    driver = context.driver
    driver.get(URL)
    username = driver.find_element_by_id("register_username")
    username.clear()
    username.send_keys(username_text)
    password = driver.find_element_by_id("register_password")
    password.clear()
    password.send_keys(password_text)
    submit_button = driver.find_element_by_id("register_submit")
    submit_button.click()


def __login_user(context, username_text, password_text):
    driver = context.driver
    driver.get(URL)
    username = driver.find_element_by_id("login_username")
    username.clear()
    username.send_keys(username_text)
    password = driver.find_element_by_id("login_password")
    password.clear()
    password.send_keys(password_text)
    submit_button = driver.find_element_by_id("login_submit")
    submit_button.click()


================================================
FILE: src/ui_tests/behave/features/steps/fibonacciStepDefs.py
================================================
from behave import given, when, then
from hamcrest import *

@when('I calculate the {n:d}th fibonacci number')
def step_impl(context, n):
    __calculate_fibonacci(context, n)
    pass


def __calculate_fibonacci(context, n):
    driver = context.driver
    driver.get("http://localhost:8080/demo")
    param_n = driver.find_element_by_id("fib_param_n")
    param_n.clear()
    param_n.send_keys(n)
    submit_button = driver.find_element_by_id("calculate_fibonacci")
    submit_button.click()


@then('the Fibonacci function indicates that the result is {result_val}')
def step_impl(context, result_val):
    result = context.driver.find_element_by_id('result')
    assert_that(result.text, contains_string(result_val))




================================================
FILE: src/ui_tests/behave/features/steps/librarianStepDefs.py
================================================
from behave import given, when, then
from hamcrest import *

URL = 'http://localhost:8080/demo/library.html'


@given('a borrower is registered')
def step_impl(context):
    borrower_name = "some borrower"
    __register_borrower(context, borrower_name)
    context.my_borrower_name = borrower_name

@given('a book is available for borrowing')
def step_impl(context):
    book_title = "some book"
    __register_book(context, book_title)
    context.my_book_title = book_title


@when('they try to check out the book')
def step_impl(context):
    __lend_book(context, context.my_borrower_name, context.my_book_title)


@then('the system indicates success')
def step_impl(context):
    result = context.driver.find_element_by_id('result')
    assert_that(result.text, contains_string('SUCCESS'))


def __register_borrower(context, borrower_name):
    driver = context.driver
    driver.get(URL)
    borrower = driver.find_element_by_id("register_borrower")
    borrower.clear()
    borrower.send_keys(borrower_name)
    submit_button = driver.find_element_by_id("register_borrower_submit")
    submit_button.click()


def __register_book(context, book_title):
    driver = context.driver
    driver.get(URL)
    book = driver.find_element_by_id("register_book")
    book.clear()
    book.send_keys(book_title)
    submit_button = driver.find_element_by_id("register_book_submit")
    submit_button.click()

def __lend_book(context, my_borrower_name, my_book_title):
    driver = context.driver
    driver.get(URL)
    book = driver.find_element_by_id("lend_book")
    book.send_keys(my_book_title)
    borrower = driver.find_element_by_id("lend_borrower")
    borrower.send_keys(my_borrower_name)
    submit_button = driver.find_element_by_id("lend_book_submit")
    submit_button.click()



================================================
FILE: src/ui_tests/cs/README.txt
================================================
Tested with Visual Studio 2019 Community edition.

dependencies:
    Visual Studio 2019
    Chrome (https://www.google.com/chrome/)
    Chromedriver (https://chromedriver.chromium.org/downloads)

See README.md in the root directory for further detail

To run tests:

    First, make sure the Demo application is already running, check at http://localhost:8080/demo/

    Then, to run these tests,
        1. Open the solution with Visual Studio 2019
        2. On the toolbar, select Test -> Run -> All tests

    Alternate:
        On the command line, in the testproject directory, run:

            dotnet test


================================================
FILE: src/ui_tests/cs/testproject/testproject.csproj
================================================
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netcoreapp2.1</TargetFramework>

    <IsPackable>false</IsPackable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="nunit" Version="3.10.1" />
    <PackageReference Include="NUnit3TestAdapter" Version="3.10.0" />
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.8.0" />
    <PackageReference Include="Selenium.WebDriver" Version="3.141.0" />
  </ItemGroup>

</Project>


================================================
FILE: src/ui_tests/cs/testproject/testproject.sln
================================================
﻿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.29009.5
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "testproject", "testproject.csproj", "{0F235366-2E02-4940-B780-B9053BF76E78}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{0F235366-2E02-4940-B780-B9053BF76E78}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{0F235366-2E02-4940-B780-B9053BF76E78}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{0F235366-2E02-4940-B780-B9053BF76E78}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{0F235366-2E02-4940-B780-B9053BF76E78}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {3F899618-DBAC-452F-BE9C-48FEDCE1652D}
	EndGlobalSection
EndGlobal



================================================
FILE: src/ui_tests/cs/testproject/UiTest.cs
================================================
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using NUnit.Framework;

namespace Tests
{


    [TestFixture]
    public class UiTest
    {

        private IWebDriver driver;
        public IDictionary<string, object> vars { get; private set; }
        private IJavaScriptExecutor js;

        [SetUp]
        public void SetUp()
        {
            driver = new ChromeDriver();
            js = (IJavaScriptExecutor)driver;
            vars = new Dictionary<string, object>();
        }

        [TearDown]
        protected void TearDown()
        {
            driver.Quit();
        }

        [Test]
        public void Test1()
        {
            driver.Navigate().GoToUrl("http://localhost:8080/demo/library.html");
            driver.FindElement(By.CssSelector(".button-form:nth-child(4) > input")).Click();
            driver.FindElement(By.LinkText("Return")).Click();
            driver.FindElement(By.Id("register_book")).Click();
            driver.FindElement(By.Id("register_book")).SendKeys("some book");
            driver.FindElement(By.Id("register_book_submit")).Click();
            driver.FindElement(By.LinkText("Return")).Click();
            driver.FindElement(By.Id("register_borrower")).Click();
            driver.FindElement(By.Id("register_borrower")).SendKeys("some borrower");
            driver.FindElement(By.Id("register_borrower_submit")).Click();
            driver.FindElement(By.LinkText("Return")).Click();
            driver.FindElement(By.Id("lend_book")).Click();
            driver.FindElement(By.Id("lend_book")).SendKeys("some book");
            driver.FindElement(By.Id("lend_borrower")).SendKeys("some borrower");
            driver.FindElement(By.Id("lend_book_submit")).Click();
            Assert.That(driver.FindElement(By.Id("result")).Text, Is.EqualTo("SUCCESS"));
        }
    }
}


================================================
FILE: src/ui_tests/java/README.txt
================================================
dependencies:
    JDK 8 or above,
    Chrome (https://www.google.com/chrome/)
    Chromedriver (https://chromedriver.chromium.org/downloads)

See README.md in the root directory for further detail

To run tests:

    First, make sure the Demo application is already running, check at http://localhost:8080/demo/

    Then, to run these tests:

        gradlew test


================================================
FILE: src/ui_tests/java/gradle.properties
================================================
projectname=DemoJavaUITests
Description=A demonstration of testing the UI of an application
version=1.0.0
org.gradle.daemon=true
#
#If you want to specify the path to chromedriver.
#chromedriver.path=C:/Users/foo/Downloads/chromedriver_win32/chromedriver.exe
#chromedriver.path=/home/foo/Downloads/chromedriver_linux/chromedriver

# if you want to debug gradle, this will open a port on 5006 when the
# daemon is running.
#org.gradle.jvmargs=-XX:MaxPermSize=4g -XX:+HeapDumpOnOutOfMemoryError -Xmx4g -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5006

#no need for colorful output and progress bars.  plain will do.
org.gradle.console=plain
org.gradle.workers.max=1

# Setting the memory config explicitly
org.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=1024m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8


================================================
FILE: src/ui_tests/java/gradlew
================================================
#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"



================================================
FILE: src/ui_tests/java/gradlew.bat
================================================
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega



================================================
FILE: src/ui_tests/java/gradle/wrapper/gradle-wrapper.properties
================================================
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-7.0-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists



================================================
FILE: src/ui_tests/java/src/main/resources/log4j2.xml
================================================
<?xml version="1.0" encoding="UTF-8"?>
<Configuration monitorinterval="30" status="info" strict="true">

    <Appenders>
        <Appender type="Console" name="Console">
            <Layout type="PatternLayout" pattern="%d %p %m%n"/>
        </Appender>
    </Appenders>

    <Loggers>
        <Root level="INFO">
            <AppenderRef ref="Console"/>
        </Root>
    </Loggers>

</Configuration>



================================================
FILE: src/ui_tests/java/src/test/java/com/coveros/training/ApiCalls.java
================================================
package com.coveros.training;

import org.apache.http.client.fluent.Content;
import org.apache.http.client.fluent.Form;
import org.apache.http.client.fluent.Request;

import java.io.IOException;

public class ApiCalls {

    /**
     * Use the API to register a user
     * @param username some username
     * @param password a really good password (otherwise it will probably respond with a complaint
     * @return returns the body of the result, if you wish to use it.
     */
    public static String registerUser(String username, String password) {
        try {
            final Content content = Request.Post("http://localhost:8080/demo/register")
                    .bodyForm(Form.form().add("username", username).add("password", password).build())
                    .execute().returnContent();
            return content.asString();
        } catch (IOException e) {
            e.printStackTrace();
            return "";
        }
    }


    public static String registerBook(String title) {
        try {
            final Content content = Request.Post("http://localhost:8080/demo/registerbook")
                    .bodyForm(Form.form().add("book", title).build())
                    .execute().returnContent();
            return content.asString();
        } catch (IOException e) {
            e.printStackTrace();
            return "";
        }
    }

    public static String registerBorrowers(String name) {
        try {
            final Content content = Request.Post("http://localhost:8080/demo/registerborrower")
                    .bodyForm(Form.form().add("borrower", name).build())
                    .execute().returnContent();
            return content.asString();
        } catch (IOException e) {
            e.printStackTrace();
            return "";
        }
    }
}



================================================
FILE: src/ui_tests/java/src/test/java/com/coveros/training/HtmlUnitTests.java
================================================
package com.coveros.training;

import com.gargoylesoftware.htmlunit.ProxyConfig;
import com.gargoylesoftware.htmlunit.WebClient;
import com.gargoylesoftware.htmlunit.html.DomElement;
import com.gargoylesoftware.htmlunit.html.HtmlPage;
import com.gargoylesoftware.htmlunit.html.HtmlPasswordInput;
import com.gargoylesoftware.htmlunit.html.HtmlTextInput;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class HtmlUnitTests {

    private WebClient driver;

    @Before
    public void setUp() {
        driver = new WebClient();
        // prevent javascript from running.  We want these tests to really zip.
        driver.getOptions().setJavaScriptEnabled(false);
        ProxyConfig proxyConfig = new ProxyConfig("localhost", 10888);
        driver.getOptions().setProxyConfig(proxyConfig);
        try {
            getPage("http://localhost:8080");
        } catch (Exception ex) {
            // if we get here, the proxy isn't listening at that location.  Switch to non-proxy mode
            driver.getOptions().setProxyConfig(new ProxyConfig());
        }
    }

    @After
    public void tearDown() {
        driver.close();
    }


    private HtmlPage getPage(String url) {
        try {
            return driver.getPage(url);
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }

    private HtmlPage click(DomElement button) {
        try {
            return button.click();
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }

    private void type(DomElement input, String text) {
        try {
            // try to send text assuming it's a text input...
            ((HtmlTextInput) input).type(text);
        } catch (Exception ex) {
            // if we fail *because* it's a password input
            if (ex.getMessage().contains("HtmlPasswordInput cannot be cast to class com.gargoylesoftware.htmlunit.html.HtmlTextInput")) {
                try {
                    // try to use it as a password input.
                    ((HtmlPasswordInput) input).type(text);
                } catch (Exception ex1) {
                    throw new RuntimeException(ex1);
                }
            }
        }
    }

    /**
     * Tests the entire process of lending -
     * registers a book, a borrower, and lends it.
     * See {{@link SeleniumTests#test_shouldLendBook} for a
     * full javascript version that runs on Chrome
     */
    @Test
    public void test_shouldLendBook() {
        getPage("http://localhost:8080/demo/flyway");
        HtmlPage page = getPage("http://localhost:8080/demo/library.html");
        type(page.getElementById("register_book"), "some book");
        page = click(page.getElementById("register_book_submit"));
        page = click(page.getAnchorByText("Return"));
        type(page.getElementById("register_borrower"), "some borrower");
        page = click(page.getElementById("register_borrower_submit"));
        page = click(page.getAnchorByText("Return"));
        type(page.getElementById("lend_book"), "some book");
        type(page.getElementById("lend_borrower"), "some borrower");
        page = click(page.getElementById("lend_book_submit"));
        final DomElement result = page.getElementById("result");

        assertEquals("SUCCESS", result.getTextContent());
    }

    /**
     * Testing that the UI for registering and logging in a user (a librarian) works without javascript.
     */
    @Test
    public void test_shouldRegisterAndLoginUser() {
        getPage("http://localhost:8080/demo/flyway");
        String username = "some user";
        String password = "asdflkajsdfl;aksjdfal;sdfkj";
        ApiCalls.registerUser(username, password);

        HtmlPage page = getPage("http://localhost:8080/demo/library.html");
        type(page.getElementById("login_username"), username);
        type(page.getElementById("login_password"), password);
        page = click(page.getElementById("login_submit"));
        final DomElement loginResult = page.getElementById("result");

        assertTrue("result was " + loginResult.getTextContent(),
                loginResult.getTextContent().contains("access granted"));
    }


}



================================================
FILE: src/ui_tests/java/src/test/java/com/coveros/training/SeleniumTests.java
================================================
package com.coveros.training;

import io.github.bonigarcia.wdm.WebDriverManager;
import org.junit.*;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class SeleniumTests {
    private static WebDriver driver;

    @BeforeClass
    public static void setUp() {
        WebDriverManager.chromedriver().setup();
        driver = new ChromeDriver();
    }

    @AfterClass
    public static void tearDown() {
        driver.quit();
    }

    /**
     * Tests the entire process of lending -
     * registers a book, a borrower, and lends it.
     * See {{@link HtmlUnitTests#test_shouldLendBook} for a
     * non-javascript, headless version that runs on HtmlUnit
     */
    @Test
    public void test_shouldLendBook() {
        driver.get("http://localhost:8080/demo/flyway");
        driver.get("http://localhost:8080/demo/library.html");
        driver.findElement(By.id("register_book")).sendKeys("some book");
        driver.findElement(By.id("register_book_submit")).click();
        driver.findElement(By.linkText("Return")).click();
        driver.findElement(By.id("register_borrower")).sendKeys("some borrower");
        driver.findElement(By.id("register_borrower_submit")).click();
        driver.findElement(By.linkText("Return")).click();
        driver.findElement(By.id("lend_book")).sendKeys("some book");
        driver.findElement(By.id("lend_borrower")).sendKeys("some borrower");
        driver.findElement(By.id("lend_book_submit")).click();
        final String result = driver.findElement(By.id("result")).getText();
        assertEquals("SUCCESS", result);
    }

    /**
     * In this case, we're adding no books, so we shouldn't
     * be able to interact with this, it should throw ane exception
     *
     * more detail:
     * Under lending, books and borrowers inputs have three modes.
     * a) if no books/borrowers, lock the input
     * b) If 1 - 9, show a dropdown
     * c) If 10 and up, show an autocomplete
     */
    @Test(expected = org.openqa.selenium.ElementNotInteractableException.class)
    public void test_shouldShowLockedInput() {
        // clear the database...
        driver.get("http://localhost:8080/demo/flyway");

        driver.get("http://localhost:8080/demo/library.html");
        driver.findElement(By.id("lend_book")).sendKeys("some book");
    }

    /**
     * In this case, we have one book and one borrower,
     * so we should get a dropdown
     *
     * more detail:
     * Under lending, books and borrowers inputs have three modes.
     * a) if no books/borrowers, lock the input
     * b) If 1 - 9, show a dropdown
     * c) If 10 and up, show an autocomplete
     */
    @Test
    public void test_shouldShowDropdowns() {
        // clear the database...
        driver.get("http://localhost:8080/demo/flyway");
        ApiCalls.registerBook("some book");
        ApiCalls.registerBorrowers("some borrower");

        driver.get("http://localhost:8080/demo/library.html");

        // using the arrow keys to select an element is a very "dropdown" kind of behavior.
        driver.findElement(By.id("lend_book")).findElement(By.xpath("//option[contains(.,\'some book\')]")).click();
        driver.findElement(By.id("lend_borrower")).findElement(By.xpath("//option[contains(.,\'some borrower\')]")).click();
        driver.findElement(By.id("lend_book_submit")).click();
        final String result = driver.findElement(By.id("result")).getText();
        assertEquals("SUCCESS", result);
    }

    /**
     * In this case, we have 10 books and one borrower,
     * so we should get a autocomplete for books
     *
     * more detail:
     * Under lending, books and borrowers inputs have three modes.
     * a) if no books/borrowers, lock the input
     * b) If 1 - 9, show a dropdown
     * c) If 10 and up, show an autocomplete
     */
    @Test
    public void test_shouldShowAutocomplete() {
        // clear the database...
        driver.get("http://localhost:8080/demo/flyway");
        ApiCalls.registerBook("a");
        ApiCalls.registerBook("b");
        ApiCalls.registerBook("c");
        ApiCalls.registerBook("d");
        ApiCalls.registerBook("e");
        ApiCalls.registerBook("f");
        ApiCalls.registerBook("g");
        ApiCalls.registerBook("h");
        ApiCalls.registerBook("i");
        ApiCalls.registerBook("j");
        ApiCalls.registerBorrowers("some borrower");

        driver.get("http://localhost:8080/demo/library.html");

        // using the arrow keys to select an element is a very "dropdown" kind of behavior.
        driver.findElement(By.id("lend_book")).sendKeys("f");
        driver.findElement(By.xpath("//li[contains(.,\'f\')]")).click();
        driver.findElement(By.id("lend_borrower")).findElement(By.xpath("//option[contains(.,\'some borrower\')]")).click();
        driver.findElement(By.id("lend_book_submit")).click();
        final String result = driver.findElement(By.id("result")).getText();
        assertEquals("SUCCESS", result);
    }

    /**
     * If the value for a book or borrower has a quote in it,
     * single or double, it should continue to work.
     */
    @Test
    public void test_ShouldHandleQuotesInBookOrBorrowerValue() {
        // clear the database...
        driver.get("http://localhost:8080/demo/flyway");
        ApiCalls.registerBook("some \"book");
        ApiCalls.registerBorrowers("some \"borrower");

        driver.get("http://localhost:8080/demo/library.html");

        // using the arrow keys to select an element is a very "dropdown" kind of behavior.
        driver.findElement(By.id("lend_book")).findElement(By.xpath("//option[contains(.,\'some \"book\')]")).click();
        driver.findElement(By.id("lend_borrower")).findElement(By.xpath("//option[contains(.,\'some \"borrower\')]")).click();
        driver.findElement(By.id("lend_book_submit")).click();
        final String result = driver.findElement(By.id("result")).getText();
        assertEquals("SUCCESS", result);
    }

    @Test
    public void test_ShouldRegisterAndLoginUser() {
        driver.get("http://localhost:8080/demo/flyway");
        driver.get("http://localhost:8080/demo/library.html");
        driver.findElement(By.id("register_username")).sendKeys("some user");
        driver.findElement(By.id("register_password")).sendKeys("lasdfj;alsdkfjasdf");
        driver.findElement(By.id("register_submit")).click();

        final String registerResult = driver.findElement(By.id("result")).getText();
        assertTrue("result was " + registerResult,
                registerResult.contains("status: SUCCESSFULLY_REGISTERED"));

        driver.findElement(By.linkText("Return")).click();
        driver.findElement(By.id("login_username")).sendKeys("some user");
        driver.findElement(By.id("login_password")).sendKeys("lasdfj;alsdkfjasdf");
        driver.findElement(By.id("login_submit")).click();

        final String loginResult = driver.findElement(By.id("result")).getText();
        assertTrue("result was " + loginResult,
                loginResult.contains("access granted"));

    }


}



================================================
FILE: src/ui_tests/js/README.txt
================================================
This is a JavaScript Mocha test.

dependencies:
    NodeJS (https://nodejs.org/)
    Chrome (https://www.google.com/chrome/)
    Chromedriver (https://chromedriver.chromium.org/downloads)

See README.md in the root directory for further detail

To run tests:

    First, make sure the Demo application is already running, check at http://localhost:8080/demo/

    To initialize the system:

        npm install

    then...

        npm test


================================================
FILE: src/ui_tests/js/package.json
================================================
{
  "name": "js_tests",
  "description": "Allows testing with Selenium and Javascript",
  "version": "1.0.0",
  "scripts": {
    "test": "mocha"
  },
  "keywords": [
    "selenium",
    "coveros",
    "demo"
  ],
  "author": "Byron Katz",
  "license": "MIT",
  "homepage": "https://github.com/7ep/demo",
  "dependencies": {
    "mocha": "^7.1.1",
    "selenium-webdriver": "^4.0.0-alpha.7"
  }
}



================================================
FILE: src/ui_tests/js/test/test.spec.js
================================================
// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('test1', function() {
  this.timeout(30000)
  let driver
  let vars

  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })

  afterEach(async function() {
    await driver.quit();
  })

  it('test1', async function() {
    await driver.get("http://localhost:8080/demo/library.html")
    await driver.findElement(By.css(".button-form:nth-child(4) > input")).click()
    await driver.findElement(By.linkText("Return")).click()
    await driver.findElement(By.id("register_book")).click()
    await driver.findElement(By.id("register_book")).sendKeys("some book")
    await driver.findElement(By.id("register_book_submit")).click()
    await driver.findElement(By.linkText("Return")).click()
    await driver.findElement(By.id("register_borrower")).click()
    await driver.findElement(By.id("register_borrower")).sendKeys("some borrower")
    await driver.findElement(By.id("register_borrower_submit")).click()
    await driver.findElement(By.linkText("Return")).click()
    await driver.findElement(By.id("lend_book")).click()
    await driver.findElement(By.id("lend_book")).sendKeys("some book")
    await driver.findElement(By.id("lend_borrower")).sendKeys("some borrower")
    await driver.findElement(By.id("lend_book_submit")).click()
    assert(await driver.findElement(By.id("result")).getText() == "SUCCESS")
  })

})



================================================
FILE: src/ui_tests/python/README.txt
================================================
dependencies:
    Python 3 (https://www.python.org/downloads/),
    Chrome (https://www.google.com/chrome/)
    Chromedriver (https://chromedriver.chromium.org/downloads)

See README.md in the root directory for further detail

to run tests in this directory:

    pipenv run pytest


================================================
FILE: src/ui_tests/python/basic_test.py
================================================
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.select import Select
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import requests
from selenium.webdriver.common.proxy import Proxy, ProxyType
from hamcrest import *
import time

SERVER = "localhost"
URL = "http://%s:8080" % SERVER
HOMEPAGE = "%s/demo/library.html" % URL
RESET_DATABASE = "%s/demo/flyway" % URL
DEFAULT_BORROWER = "alice"

class TestBasic():

  def setup_class(self):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_class(self):
    self.driver.quit()
  
  def test_basic_lend_book(self):
    self.driver.get("http://localhost:8080/demo/library.html")
    self.driver.find_element(By.CSS_SELECTOR, ".button-form:nth-child(4) > input").click()
    self.driver.find_element(By.LINK_TEXT, "Return").click()
    self.driver.find_element(By.ID, "register_book").click()
    self.driver.find_element(By.ID, "register_book").send_keys("some book")
    self.driver.find_element(By.ID, "register_book_submit").click()
    self.driver.find_element(By.LINK_TEXT, "Return").click()
    self.driver.find_element(By.ID, "register_borrower").click()
    self.driver.find_element(By.ID, "register_borrower").send_keys("some borrower")
    self.driver.find_element(By.ID, "register_borrower_submit").click()
    self.driver.find_element(By.LINK_TEXT, "Return").click()
    self.driver.find_element(By.ID, "lend_book").click()
    self.driver.find_element(By.ID, "lend_book").send_keys("some book")
    self.driver.find_element(By.ID, "lend_borrower").send_keys("some borrower")
    self.driver.find_element(By.ID, "lend_book_submit").click()
    assert self.driver.find_element(By.ID, "result").text == "SUCCESS"

  # TDD for a UI element that makes choosing a book easier
  #
  # Put more concretely - I want there to exist some UI widget
  # so that when I want to lend a book, I am easily able to
  # search the book by name.  A nice UI experience
  # would be some kind of input box that shows all the books, paged,
  # and filters the possibilities immediately as the user types.
  # let's make that, TDD-style.
  def test_list_select_pom(self):
    self.driver.get(RESET_DATABASE)
    library = LibraryPageObjectModel(self.driver)
    library.register_book("another book")
    library.register_borrower(DEFAULT_BORROWER)

    # Enter in part of a borrower's name, then select the person from a list
    self.driver.get(HOMEPAGE)
    self.driver.find_element(By.ID, "lend_book").send_keys(Keys.ARROW_UP)

    # and select a book in a si
    # and lend them the book...
    select = Select(self.driver.find_element(By.ID, "lend_book"))
    assert select.first_selected_option.text == "another book"




# used as a simple object during console runs,
# to experiment.  typical incantation is:
#   context = Object()
class Object(object):
    pass


# all the important capabilities for the Login function
class Login:
    def __init__(self, driver):
        self.driver = driver

    def enter_username(self, text):
        login_username_field = self.driver.find_element_by_id("login_username")
        login_username_field.send_keys(text)

    def enter_password(self, text):
        login_password_field = self.driver.find_element_by_id("login_password")
        login_password_field.send_keys(text)

    def enter(self):
        login_button = self.driver.find_element_by_id("login_submit")
        login_button.click()


# all the important capabilities for the Registration function
class Registration:
    def __init__(self, driver):
        self.driver = driver

    def enter_username(self, text):
        register_username_field = self.driver.find_element_by_id("register_username")
        register_username_field.send_keys(text)

    def enter_password(self, text):
        register_password_field = self.driver.find_element_by_id("register_password")
        register_password_field.send_keys(text)

    def enter(self):
        register_button = self.driver.find_element_by_id("register_submit")
        register_button.click()


# all the important capabilities for the Book Registration function
class BookRegister:
    def __init__(self, driver):
        self.driver = driver

    def register_book(self, text):
        register_book_field = self.driver.find_element_by_id("register_book")
        register_book_field.send_keys(text)

    def enter(self):
        register_button = self.driver.find_element_by_id("register_book_submit")
        register_button.click()


# all the important capabilities for the Borrower Registration function
class BorrowerRegister:
    def __init__(self, driver):
        self.driver = driver

    def register_borrower(self, text):
        register_borrower_field = self.driver.find_element_by_id("register_borrower")
        register_borrower_field.send_keys(text)

    def enter(self):
        register_button = self.driver.find_element_by_id("register_borrower_submit")
        register_button.click()


# all the important capabilities for the Book Lending function
class BookLend:
    def __init__(self, driver):
        self.driver = driver

    def enter_book(self, text):
        book_field = self.driver.find_element_by_id("lend_book")
        book_field.send_keys(text)

    def enter_borrower(self, text):
        borrower_field = self.driver.find_element_by_id("lend_borrower")
        borrower_field.send_keys(text)

    def enter(self):
        lend_button = self.driver.find_element_by_id("lend_book_submit")
        lend_button.click()


# all the important capabilities for the Summation function
class Summation:
    def __init__(self, driver):
        self.driver = driver

    def enter_addend_a(self, text):
        addend_a = self.driver.find_element_by_id("addend_a")
        addend_a.send_keys(text)

    def enter_addend_b(self, text):
        addend_b = self.driver.find_element_by_id("addend_b")
        addend_b.send_keys(text)

    def enter(self):
        lend_button = self.driver.find_element_by_id("math_submit")
        lend_button.click()

# all the important capabilities for the Result page
class Result:
    def __init__(self, driver):
        self.driver = driver

    def get_result_text(self):
        return self.driver.find_element_by_id("result").text

class LibraryPageObjectModel:

    def __init__(self, driver):
        self.driver = driver

    def register_user(self, username, password):
        self.driver.get(HOMEPAGE)

        reg = Registration(driver)
        reg.enter_username(username)
        reg.enter_password(password)
        reg.enter()

    def login_user(self, username, password):
        self.driver.get(HOMEPAGE)

        login = Login(self.driver)
        login.enter_username(username)
        login.enter_password(password)
        login.enter()

    def add_numbers(self, a, b):
        self.driver.get(HOMEPAGE)

        sums = Summation(self.driver)
        sums.enter_addend_a(a)
        sums.enter_addend_b(b)
        sums.enter()

    def register_borrower(self, name):
        self.driver.get(HOMEPAGE)

        bor = BorrowerRegister(self.driver)
        bor.register_borrower(name)
        bor.enter()

    def register_book(self, title):
        self.driver.get(HOMEPAGE)

        br = BookRegister(self.driver)
        br.register_book(title)
        br.enter()

    def lend_book(self, title, borrower):
        self.driver.get(HOMEPAGE)

        bl = BookLend(self.driver)
        bl.enter_book(title)
        bl.enter_borrower(borrower)
        bl.enter()

    def result(self):
        return Result(self.driver)



# opens a browser, returns a handle for it
def start_testing():
    return open_browser()


# an example of page-object-model testing
def register_and_login():
    driver = start_testing()
    username = "bob"
    password = "fWd8SNtALsKScD9xYUm5Jb"

    driver.get(RESET_DATABASE)
    driver.get(HOMEPAGE)

    reg = Registration(driver)
    reg.enter_username(username)
    reg.enter_password(password)
    reg.enter()

    driver.get(HOMEPAGE)

    login = Login(driver)
    login.enter_username(username)
    login.enter_password(password)
    login.enter()

    result = Result(driver)
    result_text = result.get_result_text()
    assert_that(result_text, contains_string('access granted'))

    driver.close()

# an example of a more abstracted page-object-model
def full_lend_book():
    driver = start_testing()
    driver.get(RESET_DATABASE)
    book = "alice in wonderland"
    borrower = "bob"
    library = LibraryPageObjectModel(driver)
    library.register_book(book)
    library.register_borrower(borrower)
    library.lend_book(book, borrower)
    result = library.result()
    assert_that(result.get_result_text(), equal_to("SUCCESS"))
    driver.close()



def open_browser():
    try:
        # if there is a proxy, we'll use it.  Otherwise, we won't.
        requests.get("http://localhost:8888", timeout=0.01)

        # if there was no exception, we continue here.
        PROXY = "localhost:8888"

        proxy = Proxy()
        proxy.proxy_type = ProxyType.MANUAL
        proxy.http_proxy = PROXY

        capabilities = webdriver.DesiredCapabilities.CHROME
        proxy.add_to_capabilities(capabilities)

        driver = webdriver.Chrome(desired_capabilities=capabilities)
        return driver
    except:
        # if we got an exception while trying to hit a proxy URL,
        # it probably means the proxy isn't available, so we run
        # without a proxy, as follows.
        driver = webdriver.Chrome()
        return driver



================================================
FILE: src/ui_tests/python/Pipfile
================================================
[[source]]
name = "pypi"
url = "https://pypi.org/simple"
verify_ssl = true

[dev-packages]

[packages]
requests = "*"
behave = "*"
pyhamcrest = "*"
selenium = "*"
pytest = "*"
behave2cucumber = "*"


